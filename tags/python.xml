<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Louis Tiao (Posts about python)</title><link>http://tiao.io/</link><description></description><atom:link href="http://tiao.io/tags/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:louistiao@me.com"&gt;Louis Tiao&lt;/a&gt; </copyright><lastBuildDate>Sun, 25 Feb 2018 14:23:37 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>A simple way to do Bayesian Deep Learning in Keras</title><link>http://tiao.io/posts/a-simple-way-to-do-bayesian-deep-learning-in-keras/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;div class="section" id="posterior-distribution-over-weights"&gt;
&lt;h2&gt;Posterior distribution over weights&lt;/h2&gt;
&lt;p&gt;We approximate the full posterior distribution over the weights of the layer
using variational inference. We do this by specifying a &lt;em&gt;variational distribution&lt;/em&gt;
which we use to approximate the exact posterior. The variational distribution of
choice here is a simple diagonal Gaussian. The parameters of the variational
distribution are called &lt;em&gt;variational parameters&lt;/em&gt; and consist of the mean and
standard deviation of the layer's weights. They are the parameters of the Keras
layer, which we add with &lt;tt class="docutils literal"&gt;self.add_weight&lt;/tt&gt; (kind of a bad name). We don't take
advantage of the option to add regularizer as we will add the KL directly to the
loss ourselves later.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-1"&gt;&lt;/a&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kernel_loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_weight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_dim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-2"&gt;&lt;/a&gt;                                  &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kernel_loc'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-3"&gt;&lt;/a&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kernel_scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_weight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_dim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-4"&gt;&lt;/a&gt;                                    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kernel_scale'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-6"&gt;&lt;/a&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distributions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kernel_loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-7"&gt;&lt;/a&gt;                                      &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kernel_scale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use_bias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-10"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bias_loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_weight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-11"&gt;&lt;/a&gt;                                    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'bias_loc'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-12"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bias_scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_weight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-13"&gt;&lt;/a&gt;                                      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'bias_scale'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-15"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distributions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bias_loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-16"&gt;&lt;/a&gt;                                        &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bias_scale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6ad72ac267c5493f9379bef924b7f39f-18"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="prior-distribution"&gt;
&lt;h2&gt;Prior distribution&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_510c0bb1250a4aa5a75ede24ea9c59c7-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;kernel_prior&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_510c0bb1250a4aa5a75ede24ea9c59c7-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;kernel_prior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_510c0bb1250a4aa5a75ede24ea9c59c7-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_510c0bb1250a4aa5a75ede24ea9c59c7-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bias_prior&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_510c0bb1250a4aa5a75ede24ea9c59c7-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bias_prior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_510c0bb1250a4aa5a75ede24ea9c59c7-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_510c0bb1250a4aa5a75ede24ea9c59c7-7"&gt;&lt;/a&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kernel_prior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kernel_prior&lt;/span&gt;
&lt;a name="rest_code_510c0bb1250a4aa5a75ede24ea9c59c7-8"&gt;&lt;/a&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bias_prior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bias_prior&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="kl-divergence"&gt;
&lt;h2&gt;KL Divergence&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_03aa2ffefc97437ea6324dac6e51414c-1"&gt;&lt;/a&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_loss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kl_divergence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kernel_posterior&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_03aa2ffefc97437ea6324dac6e51414c-2"&gt;&lt;/a&gt;                            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kernel_prior&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_03aa2ffefc97437ea6324dac6e51414c-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_03aa2ffefc97437ea6324dac6e51414c-4"&gt;&lt;/a&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_loss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kl_divergence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bias_posterior&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_03aa2ffefc97437ea6324dac6e51414c-5"&gt;&lt;/a&gt;                            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bias_prior&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In a &lt;a class="reference external" href="http://tiao.io/posts/implementing-variational-autoencoders-in-keras-beyond-the-quickstart-tutorial/"&gt;previous post&lt;/a&gt;,
I demonstrated how to leverage Keras' modular design to implement variational
autoencoders in a way that makes it easy to tweak hyperparameters, adapt to it
to other related models, and extend it to the more sophisticated methods
proposed in the current research.&lt;/p&gt;
&lt;p&gt;Recall that we optimize the generally intractable evidence lower bound (ELBO)
using reparameterization gradients, which approximates the expectation of
gradients with Monte Carlo (MC) samples. In their original paper, Kingma and
Welling (2014) &lt;a class="footnote-reference" href="http://tiao.io/posts/a-simple-way-to-do-bayesian-deep-learning-in-keras/#kingma2014" id="id1"&gt;[1]&lt;/a&gt; remark that an MC sample size of 1 is adequate for
a sufficiently large batch size (~100). Obviously, this is highly dependent on
the problem (more specifically the likelihood). In general, it is important to
experiment with different MC sample sizes and observe the various effects it
has on training stability. In this short post, we demonstrate how to tweak the
MC sample size under our basic framework.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tiao.io/posts/a-simple-way-to-do-bayesian-deep-learning-in-keras/"&gt;Read moreâ¦&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>bayesian</category><category>deep learning</category><category>keras</category><category>mathjax</category><category>python</category><category>representation learning</category><category>tensorflow</category><category>variational inference</category><guid>http://tiao.io/posts/a-simple-way-to-do-bayesian-deep-learning-in-keras/</guid><pubDate>Sat, 20 Jan 2018 11:47:57 GMT</pubDate></item><item><title>Using negative log-likelihoods of TensorFlow Distributions as Keras losses</title><link>http://tiao.io/posts/using-negative-log-likelihoods-of-tensorflow-distributions-as-keras-losses/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;Nothing here yet. This short post is supposed to summarize its
&lt;a class="reference external" href="http://tiao.io/listings/keras/using_negative_log_likelihoods_of_tensorflow_distributions_as_keras_losses.ipynb.html"&gt;supplementary notebook&lt;/a&gt;. For now, please go there instead.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tiao.io/posts/using-negative-log-likelihoods-of-tensorflow-distributions-as-keras-losses/"&gt;Read moreâ¦&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>keras</category><category>python</category><category>tensorflow</category><guid>http://tiao.io/posts/using-negative-log-likelihoods-of-tensorflow-distributions-as-keras-losses/</guid><pubDate>Sun, 03 Dec 2017 11:36:10 GMT</pubDate></item><item><title>Inference in Variational Autoencoders with Different Monte Carlo Sample Sizes (Addendum)</title><link>http://tiao.io/posts/inference-in-variational-autoencoders-with-different-monte-carlo-sample-sizes-addendum/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;div class="admonition admonition-draft"&gt;
&lt;p class="first admonition-title"&gt;Draft&lt;/p&gt;
&lt;p class="last"&gt;Please do not share or link.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is a short addendum to a previous post that demonstrates how to perform
&lt;a class="reference external" href="http://tiao.io/posts/inference-in-variational-autoencoders-with-different-monte-carlo-sample-sizes/"&gt;Inference in Variational Autoencoders with Different Monte Carlo Sample Sizes&lt;/a&gt;
using the basic modular framework we developed in an &lt;a class="reference external" href="http://tiao.io/posts/implementing-variational-autoencoders-in-keras-beyond-the-quickstart-tutorial/"&gt;earlier post&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;object data="http://tiao.io/images/vae/nelbo_batch_vs_mc_sample_sizes.svg" style="height: 200px;" type="image/svg+xml"&gt;
../../images/vae/nelbo_batch_vs_mc_sample_sizes.svg&lt;/object&gt;
&lt;p class="caption"&gt;The negative evidence lower bound (ELBO) plotted after each training epoch
for various combinations of batch and Monte Carlo sample sizes.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="http://tiao.io/posts/inference-in-variational-autoencoders-with-different-monte-carlo-sample-sizes-addendum/"&gt;Read moreâ¦&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>bayesian</category><category>deep learning</category><category>keras</category><category>mathjax</category><category>python</category><category>representation learning</category><category>tensorflow</category><category>unsupervised learning</category><category>variational autoencoder</category><category>variational inference</category><guid>http://tiao.io/posts/inference-in-variational-autoencoders-with-different-monte-carlo-sample-sizes-addendum/</guid><pubDate>Sun, 26 Nov 2017 13:47:03 GMT</pubDate></item><item><title>Inference in Variational Autoencoders with Different Monte Carlo Sample Sizes</title><link>http://tiao.io/posts/inference-in-variational-autoencoders-with-different-monte-carlo-sample-sizes/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;In a &lt;a class="reference external" href="http://tiao.io/posts/implementing-variational-autoencoders-in-keras-beyond-the-quickstart-tutorial/"&gt;previous post&lt;/a&gt;,
I demonstrated how to leverage Keras' modular design to implement variational
autoencoders in a way that makes it easy to tweak hyperparameters, adapt to it
to other related models, and extend it to the more sophisticated methods
proposed in the current research.&lt;/p&gt;
&lt;p&gt;Recall that we optimize the generally intractable evidence lower bound (ELBO)
using reparameterization gradients, which approximates the expectation of
gradients with Monte Carlo (MC) samples. In their original paper, Kingma and
Welling (2014) &lt;a class="footnote-reference" href="http://tiao.io/posts/inference-in-variational-autoencoders-with-different-monte-carlo-sample-sizes/#kingma2014" id="id1"&gt;[1]&lt;/a&gt; remark that an MC sample size of 1 is adequate for
a sufficiently large batch size (~100). Obviously, this is highly dependent on
the problem (more specifically the likelihood). In general, it is important to
experiment with different MC sample sizes and observe the various effects it
has on training stability. In this short post, we demonstrate how to tweak the
MC sample size under our basic framework.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tiao.io/posts/inference-in-variational-autoencoders-with-different-monte-carlo-sample-sizes/"&gt;Read moreâ¦&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>bayesian</category><category>deep learning</category><category>keras</category><category>mathjax</category><category>python</category><category>representation learning</category><category>tensorflow</category><category>unsupervised learning</category><category>variational autoencoder</category><category>variational inference</category><guid>http://tiao.io/posts/inference-in-variational-autoencoders-with-different-monte-carlo-sample-sizes/</guid><pubDate>Mon, 20 Nov 2017 12:51:24 GMT</pubDate></item><item><title>Implementing Variational Autoencoders in Keras: Beyond the Quickstart Tutorial</title><link>http://tiao.io/posts/implementing-variational-autoencoders-in-keras-beyond-the-quickstart-tutorial/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="https://keras.io/"&gt;Keras&lt;/a&gt; is awesome. It is a very well-designed library that clearly abides by
its &lt;a class="reference external" href="https://keras.io/#guiding-principles"&gt;guiding principles&lt;/a&gt; of modularity and extensibility, enabling us to
easily assemble powerful, complex models from primitive building blocks.
This has been demonstrated in numerous blog posts and tutorials, in particular,
the excellent tutorial on &lt;a class="reference external" href="https://blog.keras.io/building-autoencoders-in-keras.html"&gt;Building Autoencoders in Keras&lt;/a&gt;.
As the name suggests, that tutorial provides examples of how to implement
various kinds of autoencoders in Keras, including the variational autoencoder
(VAE) &lt;a class="footnote-reference" href="http://tiao.io/posts/implementing-variational-autoencoders-in-keras-beyond-the-quickstart-tutorial/#kingma2014" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="../../images/vae/result_combined.png" src="http://tiao.io/images/vae/result_combined.png"&gt;
&lt;p class="caption"&gt;Visualization of 2D manifold of MNIST digits (left)
and the representation of digits in latent space colored according to their
digit labels (right).&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Like all autoencoders, the variational autoencoder is primarily used for
unsupervised learning of hidden representations.
However, they are fundamentally different to your usual neural network-based
autoencoder in that they approach the problem from a probabilistic perspective.
They specify a joint distribution over the observed and latent variables, and
approximate the intractable posterior conditional density over latent
variables with variational inference, using an &lt;em&gt;inference network&lt;/em&gt;
&lt;a class="footnote-reference" href="http://tiao.io/posts/implementing-variational-autoencoders-in-keras-beyond-the-quickstart-tutorial/#inference1" id="id2"&gt;[2]&lt;/a&gt; &lt;a class="footnote-reference" href="http://tiao.io/posts/implementing-variational-autoencoders-in-keras-beyond-the-quickstart-tutorial/#inference2" id="id3"&gt;[3]&lt;/a&gt; (or more classically, a &lt;em&gt;recognition model&lt;/em&gt;
&lt;a class="footnote-reference" href="http://tiao.io/posts/implementing-variational-autoencoders-in-keras-beyond-the-quickstart-tutorial/#dayan1995" id="id4"&gt;[4]&lt;/a&gt;) to amortize the cost of inference.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tiao.io/posts/implementing-variational-autoencoders-in-keras-beyond-the-quickstart-tutorial/"&gt;Read moreâ¦&lt;/a&gt; (25 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>deep learning</category><category>keras</category><category>mathjax</category><category>python</category><category>representation learning</category><category>tensorflow</category><category>unsupervised learning</category><category>variational autoencoder</category><category>variational inference</category><guid>http://tiao.io/posts/implementing-variational-autoencoders-in-keras-beyond-the-quickstart-tutorial/</guid><pubDate>Sun, 22 Oct 2017 14:19:59 GMT</pubDate></item><item><title>Visualizing the Latent Space of Vector Drawings from the Google QuickDraw Dataset with SketchRNN, PCA and t-SNE</title><link>http://tiao.io/posts/notebooks/visualizing-the-latent-space-of-vector-drawings-from-the-google-quickdraw-dataset-with-sketchrnn-pca-and-t-sne/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;img src="http://tiao.io/sketchrnn/aaron_sheep_tsne.svg" alt="t-SNE Visualization of Sheep Sketches" title="t-SNE Visualization of Sheep Sketches"&gt;&lt;/p&gt;
&lt;p&gt;This is the third part in a series of notes on my exploration of the recently released &lt;a href="https://quickdraw.withgoogle.com/data"&gt;Google QuickDraw dataset&lt;/a&gt; &lt;sup class="footnote-ref" id="fnref-1"&gt;&lt;a href="http://tiao.io/posts/notebooks/visualizing-the-latent-space-of-vector-drawings-from-the-google-quickdraw-dataset-with-sketchrnn-pca-and-t-sne/#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;, using the concurrently released &lt;a href="http://arxiv.org/abs/1704.03477" title="D. Ha and D. Eck, 'A Neural Representation of Sketch Drawings,' Apr. 2017."&gt;SketchRNN model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The QuickDraw dataset is curated from the millions of drawings contributed by over 15 million people around the world who participated in the &lt;a href="https://aiexperiments.withgoogle.com/quick-draw"&gt;"Quick, Draw!" A.I. Experiment&lt;/a&gt;, in which they were given the challenge of drawing objects belonging to a particular class (such as "cat") in under 20 seconds.&lt;/p&gt;
&lt;p&gt;SketchRNN is an impressive generative model that was trained to produce vector drawings using this dataset. It was of particular interest to me because it cleverly assembles many of the latest tools and techniques recently developed in machine learning, such as &lt;a href="https://arxiv.org/abs/1312.6114" title="D. P. Kingma and M. Welling, 'Auto-Encoding Variational Bayes,' Dec. 2013."&gt;Variational Autoencoders&lt;/a&gt;, HyperLSTMs (a &lt;a href="https://arxiv.org/abs/1609.09106" title="D. Ha, A. Dai, and Q. V. Le, 'HyperNetworks,' Sep. 2016."&gt;HyperNetwork&lt;/a&gt; for LSTM), &lt;a href="https://arxiv.org/abs/1703.03664" title="S. Reed et al., 'Parallel Multiscale Autoregressive Density Estimation,' Mar. 2017."&gt;Autoregressive models&lt;/a&gt;, &lt;a href="https://arxiv.org/abs/1607.06450" title="J. L. Ba, J. R. Kiros, and G. E. Hinton, 'Layer Normalization,' Jul. 2016."&gt;Layer Normalization&lt;/a&gt;, &lt;a href="https://arxiv.org/abs/1603.05118" title="S. Semeniuta, A. Severyn, and E. Barth, 'Recurrent Dropout without Memory Loss,' Mar. 2016."&gt;Recurrent Dropout&lt;/a&gt;, the &lt;a href="https://arxiv.org/abs/1412.6980" title="D. P. Kingma and J. Ba, 'Adam: A Method for Stochastic Optimization,' Dec. 2014."&gt;Adam optimizer&lt;/a&gt;, among others.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tiao.io/posts/notebooks/visualizing-the-latent-space-of-vector-drawings-from-the-google-quickdraw-dataset-with-sketchrnn-pca-and-t-sne/"&gt;Read moreâ¦&lt;/a&gt; (12 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>deep learning</category><category>dimensionality reduction</category><category>machine learning</category><category>pca</category><category>python</category><category>t-sne</category><category>tensorflow</category><category>visualization</category><guid>http://tiao.io/posts/notebooks/visualizing-the-latent-space-of-vector-drawings-from-the-google-quickdraw-dataset-with-sketchrnn-pca-and-t-sne/</guid><pubDate>Sun, 04 Jun 2017 13:17:58 GMT</pubDate></item><item><title>Exploring the Google QuickDraw Dataset with SketchRNN (Part 3)</title><link>http://tiao.io/notes/exploring-the-google-quickdraw-dataset-with-sketchrnn-part-3/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;img src="http://tiao.io/notes/exploring-the-google-quickdraw-dataset-with-sketchrnn-part-3/sketchrnn/aaron_sheep_tsne.svg" alt="t-SNE Visualization of Sheep Sketches" title="t-SNE Visualization of Sheep Sketches"&gt;&lt;/p&gt;
&lt;p&gt;This is the third part in a series of notes on my exploration of the recently released &lt;a href="https://quickdraw.withgoogle.com/data"&gt;Google QuickDraw dataset&lt;/a&gt; &lt;sup class="footnote-ref" id="fnref-1"&gt;&lt;a href="http://tiao.io/notes/exploring-the-google-quickdraw-dataset-with-sketchrnn-part-3/#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;, using the concurrently released &lt;a href="http://arxiv.org/abs/1704.03477" title="D. Ha and D. Eck, 'A Neural Representation of Sketch Drawings,' Apr. 2017."&gt;SketchRNN model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The QuickDraw dataset is curated from the millions of drawings contributed by over 15 million people around the world who participated in the &lt;a href="https://aiexperiments.withgoogle.com/quick-draw"&gt;"Quick, Draw!" A.I. Experiment&lt;/a&gt;, in which they were given the challenge of drawing objects belonging to a particular class (such as "cat") in under 20 seconds.&lt;/p&gt;
&lt;p&gt;SketchRNN is an impressive generative model that was trained to produce vector drawings using this dataset. It was of particular interest to me because it cleverly assembles many of the latest tools and techniques recently developed in machine learning, such as &lt;a href="https://arxiv.org/abs/1312.6114" title="D. P. Kingma and M. Welling, 'Auto-Encoding Variational Bayes,' Dec. 2013."&gt;Variational Autoencoders&lt;/a&gt;, HyperLSTMs (a &lt;a href="https://arxiv.org/abs/1609.09106" title="D. Ha, A. Dai, and Q. V. Le, 'HyperNetworks,' Sep. 2016."&gt;HyperNetwork&lt;/a&gt; for LSTM), &lt;a href="https://arxiv.org/abs/1703.03664" title="S. Reed et al., 'Parallel Multiscale Autoregressive Density Estimation,' Mar. 2017."&gt;Autoregressive models&lt;/a&gt;, &lt;a href="https://arxiv.org/abs/1607.06450" title="J. L. Ba, J. R. Kiros, and G. E. Hinton, 'Layer Normalization,' Jul. 2016."&gt;Layer Normalization&lt;/a&gt;, &lt;a href="https://arxiv.org/abs/1603.05118" title="S. Semeniuta, A. Severyn, and E. Barth, 'Recurrent Dropout without Memory Loss,' Mar. 2016."&gt;Recurrent Dropout&lt;/a&gt;, the &lt;a href="https://arxiv.org/abs/1412.6980" title="D. P. Kingma and J. Ba, 'Adam: A Method for Stochastic Optimization,' Dec. 2014."&gt;Adam optimizer&lt;/a&gt;, among others.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tiao.io/notes/exploring-the-google-quickdraw-dataset-with-sketchrnn-part-3/"&gt;Read moreâ¦&lt;/a&gt; (12 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>deep learning</category><category>dimensionality reduction</category><category>machine learning</category><category>pca</category><category>python</category><category>t-sne</category><category>tensorflow</category><category>visualization</category><guid>http://tiao.io/notes/exploring-the-google-quickdraw-dataset-with-sketchrnn-part-3/</guid><pubDate>Sun, 28 May 2017 11:07:23 GMT</pubDate></item><item><title>A Better Approach For Initializing New Nikola Themes (since v7.7.5)</title><link>http://tiao.io/posts/a-better-approach-for-initializing-new-nikola-themes-since-v775/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;A few months ago, I wrote a post on &lt;a class="reference external" href="http://tiao.io/posts/creating-a-nikola-theme-with-sass-compiled-bootstrap/"&gt;Creating a Nikola theme with Sass-compiled Bootstrap&lt;/a&gt;.
Since then, &lt;a class="reference external" href="https://getnikola.com/changes.html#new-in-v7-7-5"&gt;Nikola 7.7.5&lt;/a&gt; has added several new features which makes it less
tedious to get started with your custom theme.&lt;/p&gt;
&lt;div class="section" id="initializing-the-theme"&gt;
&lt;h2&gt;Initializing the Theme&lt;/h2&gt;
&lt;p&gt;First, I initialize a theme named &lt;tt class="docutils literal"&gt;tiao&lt;/tt&gt;, which automatically creates the
necessary directories and files for me.&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_c0d3f4543e8b4825894ef3ebf78506d5-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; nikola theme --new&lt;span class="o"&gt;=&lt;/span&gt;tiao --engine&lt;span class="o"&gt;=&lt;/span&gt;jinja --parent&lt;span class="o"&gt;=&lt;/span&gt;bootstrap3-jinja
&lt;a name="rest_code_c0d3f4543e8b4825894ef3ebf78506d5-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;[2016-05-18T02:29:49Z] INFO: theme: Creating theme tiao with parent bootstrap3-jinja and engine jinja in themes/tiao&lt;/span&gt;
&lt;a name="rest_code_c0d3f4543e8b4825894ef3ebf78506d5-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;[2016-05-18T02:29:49Z] INFO: theme: Created directory themes/tiao&lt;/span&gt;
&lt;a name="rest_code_c0d3f4543e8b4825894ef3ebf78506d5-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;[2016-05-18T02:29:49Z] INFO: theme: Created file themes/tiao/parent&lt;/span&gt;
&lt;a name="rest_code_c0d3f4543e8b4825894ef3ebf78506d5-5"&gt;&lt;/a&gt;&lt;span class="go"&gt;[2016-05-18T02:29:49Z] INFO: theme: Created file themes/tiao/engine&lt;/span&gt;
&lt;a name="rest_code_c0d3f4543e8b4825894ef3ebf78506d5-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;[2016-05-18T02:29:49Z] INFO: theme: Theme themes/tiao created successfully.&lt;/span&gt;
&lt;a name="rest_code_c0d3f4543e8b4825894ef3ebf78506d5-7"&gt;&lt;/a&gt;&lt;span class="go"&gt;[2016-05-18T02:29:49Z] NOTICE: theme: Remember to set THEME="tiao" in conf.py to use this theme.&lt;/span&gt;
&lt;a name="rest_code_c0d3f4543e8b4825894ef3ebf78506d5-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_c0d3f4543e8b4825894ef3ebf78506d5-9"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; tree themes/tiao
&lt;a name="rest_code_c0d3f4543e8b4825894ef3ebf78506d5-10"&gt;&lt;/a&gt;&lt;span class="go"&gt;themes/tiao&lt;/span&gt;
&lt;a name="rest_code_c0d3f4543e8b4825894ef3ebf78506d5-11"&gt;&lt;/a&gt;&lt;span class="go"&gt;âââ engine&lt;/span&gt;
&lt;a name="rest_code_c0d3f4543e8b4825894ef3ebf78506d5-12"&gt;&lt;/a&gt;&lt;span class="go"&gt;âââ parent&lt;/span&gt;
&lt;a name="rest_code_c0d3f4543e8b4825894ef3ebf78506d5-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_c0d3f4543e8b4825894ef3ebf78506d5-14"&gt;&lt;/a&gt;&lt;span class="go"&gt;0 directories, 2 files&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a href="http://tiao.io/posts/a-better-approach-for-initializing-new-nikola-themes-since-v775/"&gt;Read moreâ¦&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>nikola</category><category>python</category><guid>http://tiao.io/posts/a-better-approach-for-initializing-new-nikola-themes-since-v775/</guid><pubDate>Wed, 18 May 2016 02:20:24 GMT</pubDate></item><item><title>Setting up a IPython Parallel Cluster on Amazon EC2 with StarCluster</title><link>http://tiao.io/posts/setting-up-a-ipython-parallel-cluster-on-amazon-ec2-with-starcluster/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="http://star.mit.edu/cluster/"&gt;StarCluster&lt;/a&gt; is an open source cluster-computing toolkit for Amazonâs Elastic
Compute Cloud (EC2) that is designed to automate and simplify the process of
building, configuring, and managing clusters of virtual machines on Amazonâs
EC2 cloud. StarCluster makes it easy to create a cluster computing environment
in the cloud for distributed and parallel computing applications.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tiao.io/posts/setting-up-a-ipython-parallel-cluster-on-amazon-ec2-with-starcluster/"&gt;Read moreâ¦&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>amazon aws</category><category>amazon ec2</category><category>distributed computing</category><category>ipython</category><category>pip</category><category>python</category><category>starcluster</category><category>virtualenv</category><guid>http://tiao.io/posts/setting-up-a-ipython-parallel-cluster-on-amazon-ec2-with-starcluster/</guid><pubDate>Tue, 03 May 2016 12:55:55 GMT</pubDate></item><item><title>Workflow for keeping Nikola config file updated</title><link>http://tiao.io/posts/workflow-for-keeping-nikola-config-file-updated/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;For most, keeping Nikola up-to-date is usually a simple matter of running
something like:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_f938ea7189e54bdfb70b3014d07653dd-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install --upgrade nikola
&lt;/pre&gt;&lt;p&gt;The same goes for its dependencies. However, one important thing that can get
overlooked is the Nikola configuration file for your site (the &lt;tt class="docutils literal"&gt;conf.py&lt;/tt&gt; file
sitting at the root of your Nikola site directory), which is almost always
updated with each major Nikola release.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tiao.io/posts/workflow-for-keeping-nikola-config-file-updated/"&gt;Read moreâ¦&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>meld</category><category>nikola</category><category>pip</category><category>python</category><guid>http://tiao.io/posts/workflow-for-keeping-nikola-config-file-updated/</guid><pubDate>Tue, 29 Mar 2016 00:13:12 GMT</pubDate></item></channel></rss>