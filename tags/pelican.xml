<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Louis Tiao (pelican)</title><link>http://ltiao.github.io/</link><description></description><atom:link href="http://ltiao.github.io/tags/pelican.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Tue, 29 Sep 2015 04:02:30 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Pelican's USE_FOLDER_AS_CATEGORY setting and behaviour</title><link>http://ltiao.github.io/posts/pelicans-use_folder_as_category-setting-and-behaviour.html</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;Pelican's &lt;a class="reference external" href="http://docs.getpelican.com/en/3.5.0/settings.html#basic-settings"&gt;USE_FOLDER_AS_CATEGORY&lt;/a&gt; setting is set to &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; by default.
If you place an article within a subfolder of the content folder, and don't
specify a category in your article metadata, then the name of the subfolder
will be the category of your article. However, the documentation does not
specify Pelican's behavior under all possible situations. E.g. What happens
if an article is within a subfolder, and its category is specified but different
the name of the subfolder?&lt;/p&gt;
&lt;p&gt;We summarize Pelican's behavior under all possible circumstances here.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="23%"&gt;
&lt;col width="30%"&gt;
&lt;col width="21%"&gt;
&lt;col width="26%"&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;tt class="docutils literal"&gt;USE_FOLDER_AS_CATEGORY&lt;/tt&gt;&lt;/th&gt;
&lt;th class="head"&gt;Category &lt;em&gt;c&lt;/em&gt; specified in metadata&lt;/th&gt;
&lt;th class="head"&gt;Article in subfolder &lt;em&gt;d&lt;/em&gt;&lt;/th&gt;
&lt;th class="head"&gt;Article's Category&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;True&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;True&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;True&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;c&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;True&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;True&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;False&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;c&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;True&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;False&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;True&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;d&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;True&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;False&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;False&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;DEFAULT_CATEGORY&lt;/tt&gt; (&lt;em&gt;Misc&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;False&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;True&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;True&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;c&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;False&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;True&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;False&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;c&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;False&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;False&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;True&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;DEFAULT_CATEGORY&lt;/tt&gt; (&lt;em&gt;Misc&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;False&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;False&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;False&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;DEFAULT_CATEGORY&lt;/tt&gt; (&lt;em&gt;Misc&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</description><category>pelican</category><category>python</category><category>synopsis</category><guid>http://ltiao.github.io/posts/pelicans-use_folder_as_category-setting-and-behaviour.html</guid><pubDate>Wed, 01 Apr 2015 13:40:03 GMT</pubDate></item><item><title>Generating PDFs from Pelican Articles</title><link>http://ltiao.github.io/posts/generating-pdfs-from-pelican-articles.html</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;As of mid-2013, Pelican still advertised PDF generation of articles/pages
as one of its &lt;a class="reference external" href="https://github.com/getpelican/pelican/blob/8be7c0dbae5bd094379d74fd47acb41a56f18afd/docs/index.rst#features"&gt;features&lt;/a&gt;. However, the &lt;a class="reference external" href="http://docs.getpelican.com/en/3.5.0/changelog.html#id3"&gt;change log&lt;/a&gt; indicates that this
is no longer a core feature and has since become a Pelican plugin as of
version 3.3.0 (2013-09-24), see &lt;a class="reference external" href="https://github.com/getpelican/pelican/issues/1009"&gt;issue&lt;/a&gt; for further discussion. Therefore, it was
rather confounding to find the setting &lt;tt class="docutils literal"&gt;PDF_GENERATOR&lt;/tt&gt; to be listed in the
&lt;a class="reference external" href="http://docs.getpelican.com/en/3.5.0/settings.html#example-settings"&gt;examples settings&lt;/a&gt; of version 3.5.0, and of course, to no one's surprise,
adding the setting &lt;tt class="docutils literal"&gt;PDF_GENERATOR=True&lt;/tt&gt; isn't going to do anything.&lt;/p&gt;
&lt;p&gt;If you have used &lt;a class="reference external" href="http://docs.getpelican.com/en/3.5.0/plugins.html"&gt;Pelican plugins&lt;/a&gt; before, then the solution should be obvious.
Simply install the &lt;tt class="docutils literal"&gt;pdf&lt;/tt&gt; plugin from &lt;a class="reference external" href="http://docs.getpelican.com/en/3.5.0/plugins.html"&gt;Pelican plugins&lt;/a&gt;. I personally
prefer to keep all plugins (and themes) in the &lt;tt class="docutils literal"&gt;&amp;lt;pelican_site_root&amp;gt;&lt;/tt&gt; directory,
on the same level as the &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; settings file:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_a803ef9d88ff4a8c80541b7fd6453dcc-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;pelican_site_root&amp;gt;
&lt;a name="rest_code_a803ef9d88ff4a8c80541b7fd6453dcc-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir plugins
&lt;a name="rest_code_a803ef9d88ff4a8c80541b7fd6453dcc-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git clone https://github.com/getpelican/pelican-plugins.git plugins
&lt;/pre&gt;&lt;p&gt;Optionally, you can also add the repository as a submodule:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_38eaedf77f4e4a83a9549787228553f6-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git submodule add https://github.com/getpelican/pelican-plugins.git plugins
&lt;/pre&gt;&lt;p&gt;or clone it anywhere else you like for that matter.&lt;/p&gt;
&lt;p&gt;Lastly, you simply need to add &lt;tt class="docutils literal"&gt;plugins&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;PLUGIN_PATHS&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pdf&lt;/tt&gt;
to &lt;tt class="docutils literal"&gt;PLUGINS&lt;/tt&gt;. The former will temporarily add &lt;tt class="docutils literal"&gt;PLUGIN_PATHS&lt;/tt&gt; to your
system path so that the latter is importable:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_cef115ab51704e90b9c8a5d15a76f4a5-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'plugins'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_cef115ab51704e90b9c8a5d15a76f4a5-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'pdf'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;When you run &lt;tt class="docutils literal"&gt;pelican&lt;/tt&gt; (or &lt;tt class="docutils literal"&gt;make html&lt;/tt&gt;), the generated PDFs of your articles
will appear in the &lt;tt class="docutils literal"&gt;pdf&lt;/tt&gt; directory of the output directory, named according
to the article slug with the &lt;tt class="docutils literal"&gt;.pdf&lt;/tt&gt; extension.&lt;/p&gt;
&lt;p&gt;In my opinion, the generated PDFs aren't exactly terrific, and the plugin could
do with a little bit more work.&lt;/p&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;If you happen to be using the &lt;tt class="docutils literal"&gt;notmyidea&lt;/tt&gt; theme, a link &lt;em&gt;get the pdf&lt;/em&gt;
will appear by simply adding &lt;tt class="docutils literal"&gt;PDF_PROCESSOR=True&lt;/tt&gt; to your settings
(as of &lt;a class="reference external" href="https://github.com/getpelican/pelican/blob/a7ca52dee05819be269b95556da01f965d107a50/pelican/themes/notmyidea/templates/taglist.html"&gt;commit a7ca52&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>pdf</category><category>pelican</category><category>python</category><category>synopsis</category><guid>http://ltiao.github.io/posts/generating-pdfs-from-pelican-articles.html</guid><pubDate>Wed, 01 Apr 2015 13:37:26 GMT</pubDate></item></channel></rss>