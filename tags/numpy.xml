<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Louis Tiao (numpy)</title><link>http://louistiao.me/</link><description></description><atom:link rel="self" type="application/rss+xml" href="http://louistiao.me/tags/numpy.xml"></atom:link><language>en</language><lastBuildDate>Thu, 04 Aug 2016 06:03:33 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Save Matplotlib Animations as GIFs</title><link>http://louistiao.me/posts/notebooks/save-matplotlib-animations-as-gifs/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;I a &lt;a href="http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-notebooks"&gt;previous post&lt;/a&gt;, I outlined how to embed a Matplotlib Animation directly in the Jupyter Notebook as a HTML5 video. In this notebook, we take the same Animation and save it as a GIF using Imagemagick. First, let us reproduce the &lt;code&gt;FuncAnimation&lt;/code&gt; object from the notebook.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/notebooks/save-matplotlib-animations-as-gifs/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>animation</category><category>ipython</category><category>jupyter</category><category>matplotlib</category><category>numpy</category><category>visualization</category><guid>http://louistiao.me/posts/notebooks/save-matplotlib-animations-as-gifs/</guid><pubDate>Thu, 04 Aug 2016 05:17:13 GMT</pubDate></item><item><title>Visualizing and Animating Optimization Algorithms with Matplotlib</title><link>http://louistiao.me/posts/notebooks/visualizing-and-animating-optimization-algorithms-with-matplotlib/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In this series of notebooks, we demonstrate some useful patterns and recipes for visualizing animating optimization algorithms using Matplotlib.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;autograd.numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mpl_toolkits.mplot3d&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Axes3D&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.colors&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LogNorm&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;animation&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autograd&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;elementwise_grad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value_and_grad&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.optimize&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;minimize&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;zip_longest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We shall restrict our attention to 3-dimensional problems for right now (i.e. optimizing over only 2 parameters), though what follows can be extended to higher dimensions by plotting all pairs of parameters against each other, effectively projecting the problem to 3-dimensions.&lt;/p&gt;
&lt;p&gt;The Wikipedia article on &lt;a href="https://en.wikipedia.org/wiki/Test_functions_for_optimization"&gt;Test functions for optimization&lt;/a&gt; has a few functions that are useful for evaluating optimization algorithms. In particular, we shall look at &lt;strong&gt;Beale's function&lt;/strong&gt;:&lt;/p&gt;
$$
f(x, y) = (1.5 - x + xy)^2 + (2.25 - x + xy^2)^2 + (2.625 - x + xy^3)^2
$$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.25&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.625&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/notebooks/visualizing-and-animating-optimization-algorithms-with-matplotlib/"&gt;Read more…&lt;/a&gt; (12 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>autograd</category><category>ipython</category><category>jupyter</category><category>matplotlib</category><category>numpy</category><category>optimization</category><category>scipy</category><category>visualization</category><guid>http://louistiao.me/posts/notebooks/visualizing-and-animating-optimization-algorithms-with-matplotlib/</guid><pubDate>Tue, 26 Apr 2016 12:13:17 GMT</pubDate></item><item><title>Installing Cartopy on Mac OSX (10.11)</title><link>http://louistiao.me/posts/installing-cartopy-on-mac-osx-1011/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;So you develop on Mac OS X (10.11) and have installed the external
dependencies (&lt;a class="reference external" href="https://trac.osgeo.org/geos/"&gt;geos&lt;/a&gt; 3.5.0, &lt;a class="reference external" href="https://trac.osgeo.org/proj/"&gt;proj&lt;/a&gt; 4.9.2) of &lt;a class="reference external" href="http://scitools.org.uk/cartopy/"&gt;Cartopy&lt;/a&gt; with &lt;a class="reference external" href="http://brew.sh/"&gt;Homebrew&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_77cee92c35a049ccaecd30b5f29dedaa-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; brew install geos
&lt;a name="rest_code_77cee92c35a049ccaecd30b5f29dedaa-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; brew install proj
&lt;/pre&gt;&lt;p&gt;Moreover, you have created a &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; and installed the Python
dependencies (Cython, NumPy):&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_8dcf7809e38b409a80e80979a670406b-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkvirtualenv cartopy_venv
&lt;a name="rest_code_8dcf7809e38b409a80e80979a670406b-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;(cartopy_venv)$&lt;/span&gt; pip install cython
&lt;a name="rest_code_8dcf7809e38b409a80e80979a670406b-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;(cartopy_venv)$&lt;/span&gt; pip install numpy
&lt;/pre&gt;&lt;p&gt;Yet, when you finally go install Cartopy, you still encounter the following
seemingly inexplicable error:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_1fb99b8052924ed09cd17c002f446261-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;(cartopy_venv)$&lt;/span&gt; pip install cartopy
&lt;a name="rest_code_1fb99b8052924ed09cd17c002f446261-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;[...]&lt;/span&gt;
&lt;a name="rest_code_1fb99b8052924ed09cd17c002f446261-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;clang -fno-strict-aliasing -fno-common -dynamic -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/Tk.framework/Versions/8.5/Headers -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/include -I./lib/cartopy -I-I/usr/local/Cellar/proj/4.9.2/include -I/usr/local/Cellar/geos/3.5.0/include -I/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c lib/cartopy/trace.cpp -o build/temp.macosx-10.11-x86_64-2.7/lib/cartopy/trace.o&lt;/span&gt;
&lt;a name="rest_code_1fb99b8052924ed09cd17c002f446261-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;lib/cartopy/trace.cpp:249:10: fatal error: 'proj_api.h' file not found&lt;/span&gt;
&lt;a name="rest_code_1fb99b8052924ed09cd17c002f446261-5"&gt;&lt;/a&gt;&lt;span class="gp"&gt;#&lt;/span&gt;include &lt;span class="s2"&gt;"proj_api.h"&lt;/span&gt;
&lt;a name="rest_code_1fb99b8052924ed09cd17c002f446261-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;         ^&lt;/span&gt;
&lt;a name="rest_code_1fb99b8052924ed09cd17c002f446261-7"&gt;&lt;/a&gt;&lt;span class="go"&gt;1 error generated.&lt;/span&gt;
&lt;a name="rest_code_1fb99b8052924ed09cd17c002f446261-8"&gt;&lt;/a&gt;&lt;span class="go"&gt;error: command 'clang' failed with exit status 1&lt;/span&gt;
&lt;a name="rest_code_1fb99b8052924ed09cd17c002f446261-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_1fb99b8052924ed09cd17c002f446261-10"&gt;&lt;/a&gt;&lt;span class="go"&gt;----------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a href="http://louistiao.me/posts/installing-cartopy-on-mac-osx-1011/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cartopy</category><category>cython</category><category>geos</category><category>numpy</category><category>proj.4</category><guid>http://louistiao.me/posts/installing-cartopy-on-mac-osx-1011/</guid><pubDate>Thu, 31 Mar 2016 12:33:50 GMT</pubDate></item><item><title>NumPy mgrid vs. meshgrid</title><link>http://louistiao.me/posts/numpy-mgrid-vs-meshgrid/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;The &lt;a class="reference external" href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.meshgrid.html"&gt;meshgrid&lt;/a&gt; function is useful for creating coordinate arrays to
vectorize function evaluations over a grid. Experienced NumPy users will have
noticed some discrepancy between &lt;tt class="docutils literal"&gt;meshgrid&lt;/tt&gt; and the &lt;a class="reference external" href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.mgrid.html"&gt;mgrid&lt;/a&gt;, a function
that is used just as often, for exactly the same purpose. What is the
discrepancy, and why does a discrepancy even exist when &lt;em&gt;"there should be one
- and preferably only one - obvious way to do it."&lt;/em&gt; &lt;a class="footnote-reference" href="http://louistiao.me/posts/numpy-mgrid-vs-meshgrid/#id2" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First, recall that &lt;tt class="docutils literal"&gt;meshgrid&lt;/tt&gt; behaves as follows:&lt;/p&gt;
&lt;pre class="code pycon"&gt;&lt;a name="rest_code_5796556f48ed40c98c927b010ce130e7-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;a name="rest_code_5796556f48ed40c98c927b010ce130e7-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meshgrid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_5796556f48ed40c98c927b010ce130e7-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;
&lt;a name="rest_code_5796556f48ed40c98c927b010ce130e7-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;array([[1, 3, 5, 7, 9],&lt;/span&gt;
&lt;a name="rest_code_5796556f48ed40c98c927b010ce130e7-5"&gt;&lt;/a&gt;&lt;span class="go"&gt;       [1, 3, 5, 7, 9],&lt;/span&gt;
&lt;a name="rest_code_5796556f48ed40c98c927b010ce130e7-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;       [1, 3, 5, 7, 9]])&lt;/span&gt;
&lt;a name="rest_code_5796556f48ed40c98c927b010ce130e7-7"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;
&lt;a name="rest_code_5796556f48ed40c98c927b010ce130e7-8"&gt;&lt;/a&gt;&lt;span class="go"&gt;array([[-12, -12, -12, -12, -12],&lt;/span&gt;
&lt;a name="rest_code_5796556f48ed40c98c927b010ce130e7-9"&gt;&lt;/a&gt;&lt;span class="go"&gt;       [ -9,  -9,  -9,  -9,  -9],&lt;/span&gt;
&lt;a name="rest_code_5796556f48ed40c98c927b010ce130e7-10"&gt;&lt;/a&gt;&lt;span class="go"&gt;       [ -6,  -6,  -6,  -6,  -6]])&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a href="http://louistiao.me/posts/numpy-mgrid-vs-meshgrid/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>numpy</category><category>python</category><guid>http://louistiao.me/posts/numpy-mgrid-vs-meshgrid/</guid><pubDate>Fri, 30 Oct 2015 05:00:19 GMT</pubDate></item></channel></rss>