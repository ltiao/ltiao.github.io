<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Louis Tiao (ipython)</title><link>http://louistiao.me/</link><description></description><atom:link type="application/rss+xml" rel="self" href="http://louistiao.me/tags/ipython.xml"></atom:link><language>en</language><lastBuildDate>Fri, 15 Apr 2016 05:26:38 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Project Euler Problem 42: Coded triangle numbers</title><link>http://louistiao.me/posts/project-euler/problem-42-coded-triangle-numbers/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The nth term of the sequence of triangle numbers is given by, $T_n = \frac{n(n+1)}{2}$; so the first ten triangle numbers are:&lt;/p&gt;
&lt;p&gt;1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...&lt;/p&gt;
&lt;p&gt;By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = $T_{10}$. If the word value is a triangle number then we shall call the word a triangle word.&lt;/p&gt;
&lt;p&gt;Using &lt;a href="http://louistiao.me/posts/p042_words.txt"&gt;words.txt&lt;/a&gt; (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English words, how many are triangle words?&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [21]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'../../files/p042_words.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csvfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csvfile&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [22]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;words&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[22]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;['A',
 'ABILITY',
 'ABLE',
 'ABOUT',
 'ABOVE',
 'ABSENCE',
 'ABSOLUTELY',
 'ACADEMIC',
 'ACCEPT',
 'ACCESS',
 'ACCIDENT',
 'ACCOMPANY',
 'ACCORDING',
 'ACCOUNT',
 'ACHIEVE',
 'ACHIEVEMENT',
 'ACID',
 'ACQUIRE',
 'ACROSS',
 'ACT',
 'ACTION',
 'ACTIVE',
 'ACTIVITY',
 'ACTUAL',
 'ACTUALLY',
 'ADD',
 'ADDITION',
 'ADDITIONAL',
 'ADDRESS',
 'ADMINISTRATION',
 'ADMIT',
 'ADOPT',
 'ADULT',
 'ADVANCE',
 'ADVANTAGE',
 'ADVICE',
 'ADVISE',
 'AFFAIR',
 'AFFECT',
 'AFFORD',
 'AFRAID',
 'AFTER',
 'AFTERNOON',
 'AFTERWARDS',
 'AGAIN',
 'AGAINST',
 'AGE',
 'AGENCY',
 'AGENT',
 'AGO',
 'AGREE',
 'AGREEMENT',
 'AHEAD',
 'AID',
 'AIM',
 'AIR',
 'AIRCRAFT',
 'ALL',
 'ALLOW',
 'ALMOST',
 'ALONE',
 'ALONG',
 'ALREADY',
 'ALRIGHT',
 'ALSO',
 'ALTERNATIVE',
 'ALTHOUGH',
 'ALWAYS',
 'AMONG',
 'AMONGST',
 'AMOUNT',
 'AN',
 'ANALYSIS',
 'ANCIENT',
 'AND',
 'ANIMAL',
 'ANNOUNCE',
 'ANNUAL',
 'ANOTHER',
 'ANSWER',
 'ANY',
 'ANYBODY',
 'ANYONE',
 'ANYTHING',
 'ANYWAY',
 'APART',
 'APPARENT',
 'APPARENTLY',
 'APPEAL',
 'APPEAR',
 'APPEARANCE',
 'APPLICATION',
 'APPLY',
 'APPOINT',
 'APPOINTMENT',
 'APPROACH',
 'APPROPRIATE',
 'APPROVE',
 'AREA',
 'ARGUE',
 'ARGUMENT',
 'ARISE',
 'ARM',
 'ARMY',
 'AROUND',
 'ARRANGE',
 'ARRANGEMENT',
 'ARRIVE',
 'ART',
 'ARTICLE',
 'ARTIST',
 'AS',
 'ASK',
 'ASPECT',
 'ASSEMBLY',
 'ASSESS',
 'ASSESSMENT',
 'ASSET',
 'ASSOCIATE',
 'ASSOCIATION',
 'ASSUME',
 'ASSUMPTION',
 'AT',
 'ATMOSPHERE',
 'ATTACH',
 'ATTACK',
 'ATTEMPT',
 'ATTEND',
 'ATTENTION',
 'ATTITUDE',
 'ATTRACT',
 'ATTRACTIVE',
 'AUDIENCE',
 'AUTHOR',
 'AUTHORITY',
 'AVAILABLE',
 'AVERAGE',
 'AVOID',
 'AWARD',
 'AWARE',
 'AWAY',
 'AYE',
 'BABY',
 'BACK',
 'BACKGROUND',
 'BAD',
 'BAG',
 'BALANCE',
 'BALL',
 'BAND',
 'BANK',
 'BAR',
 'BASE',
 'BASIC',
 'BASIS',
 'BATTLE',
 'BE',
 'BEAR',
 'BEAT',
 'BEAUTIFUL',
 'BECAUSE',
 'BECOME',
 'BED',
 'BEDROOM',
 'BEFORE',
 'BEGIN',
 'BEGINNING',
 'BEHAVIOUR',
 'BEHIND',
 'BELIEF',
 'BELIEVE',
 'BELONG',
 'BELOW',
 'BENEATH',
 'BENEFIT',
 'BESIDE',
 'BEST',
 'BETTER',
 'BETWEEN',
 'BEYOND',
 'BIG',
 'BILL',
 'BIND',
 'BIRD',
 'BIRTH',
 'BIT',
 'BLACK',
 'BLOCK',
 'BLOOD',
 'BLOODY',
 'BLOW',
 'BLUE',
 'BOARD',
 'BOAT',
 'BODY',
 'BONE',
 'BOOK',
 'BORDER',
 'BOTH',
 'BOTTLE',
 'BOTTOM',
 'BOX',
 'BOY',
 'BRAIN',
 'BRANCH',
 'BREAK',
 'BREATH',
 'BRIDGE',
 'BRIEF',
 'BRIGHT',
 'BRING',
 'BROAD',
 'BROTHER',
 'BUDGET',
 'BUILD',
 'BUILDING',
 'BURN',
 'BUS',
 'BUSINESS',
 'BUSY',
 'BUT',
 'BUY',
 'BY',
 'CABINET',
 'CALL',
 'CAMPAIGN',
 'CAN',
 'CANDIDATE',
 'CAPABLE',
 'CAPACITY',
 'CAPITAL',
 'CAR',
 'CARD',
 'CARE',
 'CAREER',
 'CAREFUL',
 'CAREFULLY',
 'CARRY',
 'CASE',
 'CASH',
 'CAT',
 'CATCH',
 'CATEGORY',
 'CAUSE',
 'CELL',
 'CENTRAL',
 'CENTRE',
 'CENTURY',
 'CERTAIN',
 'CERTAINLY',
 'CHAIN',
 'CHAIR',
 'CHAIRMAN',
 'CHALLENGE',
 'CHANCE',
 'CHANGE',
 'CHANNEL',
 'CHAPTER',
 'CHARACTER',
 'CHARACTERISTIC',
 'CHARGE',
 'CHEAP',
 'CHECK',
 'CHEMICAL',
 'CHIEF',
 'CHILD',
 'CHOICE',
 'CHOOSE',
 'CHURCH',
 'CIRCLE',
 'CIRCUMSTANCE',
 'CITIZEN',
 'CITY',
 'CIVIL',
 'CLAIM',
 'CLASS',
 'CLEAN',
 'CLEAR',
 'CLEARLY',
 'CLIENT',
 'CLIMB',
 'CLOSE',
 'CLOSELY',
 'CLOTHES',
 'CLUB',
 'COAL',
 'CODE',
 'COFFEE',
 'COLD',
 'COLLEAGUE',
 'COLLECT',
 'COLLECTION',
 'COLLEGE',
 'COLOUR',
 'COMBINATION',
 'COMBINE',
 'COME',
 'COMMENT',
 'COMMERCIAL',
 'COMMISSION',
 'COMMIT',
 'COMMITMENT',
 'COMMITTEE',
 'COMMON',
 'COMMUNICATION',
 'COMMUNITY',
 'COMPANY',
 'COMPARE',
 'COMPARISON',
 'COMPETITION',
 'COMPLETE',
 'COMPLETELY',
 'COMPLEX',
 'COMPONENT',
 'COMPUTER',
 'CONCENTRATE',
 'CONCENTRATION',
 'CONCEPT',
 'CONCERN',
 'CONCERNED',
 'CONCLUDE',
 'CONCLUSION',
 'CONDITION',
 'CONDUCT',
 'CONFERENCE',
 'CONFIDENCE',
 'CONFIRM',
 'CONFLICT',
 'CONGRESS',
 'CONNECT',
 'CONNECTION',
 'CONSEQUENCE',
 'CONSERVATIVE',
 'CONSIDER',
 'CONSIDERABLE',
 'CONSIDERATION',
 'CONSIST',
 'CONSTANT',
 'CONSTRUCTION',
 'CONSUMER',
 'CONTACT',
 'CONTAIN',
 'CONTENT',
 'CONTEXT',
 'CONTINUE',
 'CONTRACT',
 'CONTRAST',
 'CONTRIBUTE',
 'CONTRIBUTION',
 'CONTROL',
 'CONVENTION',
 'CONVERSATION',
 'COPY',
 'CORNER',
 'CORPORATE',
 'CORRECT',
 'COS',
 'COST',
 'COULD',
 'COUNCIL',
 'COUNT',
 'COUNTRY',
 'COUNTY',
 'COUPLE',
 'COURSE',
 'COURT',
 'COVER',
 'CREATE',
 'CREATION',
 'CREDIT',
 'CRIME',
 'CRIMINAL',
 'CRISIS',
 'CRITERION',
 'CRITICAL',
 'CRITICISM',
 'CROSS',
 'CROWD',
 'CRY',
 'CULTURAL',
 'CULTURE',
 'CUP',
 'CURRENT',
 'CURRENTLY',
 'CURRICULUM',
 'CUSTOMER',
 'CUT',
 'DAMAGE',
 'DANGER',
 'DANGEROUS',
 'DARK',
 'DATA',
 'DATE',
 'DAUGHTER',
 'DAY',
 'DEAD',
 'DEAL',
 'DEATH',
 'DEBATE',
 'DEBT',
 'DECADE',
 'DECIDE',
 'DECISION',
 'DECLARE',
 'DEEP',
 'DEFENCE',
 'DEFENDANT',
 'DEFINE',
 'DEFINITION',
 'DEGREE',
 'DELIVER',
 'DEMAND',
 'DEMOCRATIC',
 'DEMONSTRATE',
 'DENY',
 'DEPARTMENT',
 'DEPEND',
 'DEPUTY',
 'DERIVE',
 'DESCRIBE',
 'DESCRIPTION',
 'DESIGN',
 'DESIRE',
 'DESK',
 'DESPITE',
 'DESTROY',
 'DETAIL',
 'DETAILED',
 'DETERMINE',
 'DEVELOP',
 'DEVELOPMENT',
 'DEVICE',
 'DIE',
 'DIFFERENCE',
 'DIFFERENT',
 'DIFFICULT',
 'DIFFICULTY',
 'DINNER',
 'DIRECT',
 'DIRECTION',
 'DIRECTLY',
 'DIRECTOR',
 'DISAPPEAR',
 'DISCIPLINE',
 'DISCOVER',
 'DISCUSS',
 'DISCUSSION',
 'DISEASE',
 'DISPLAY',
 'DISTANCE',
 'DISTINCTION',
 'DISTRIBUTION',
 'DISTRICT',
 'DIVIDE',
 'DIVISION',
 'DO',
 'DOCTOR',
 'DOCUMENT',
 'DOG',
 'DOMESTIC',
 'DOOR',
 'DOUBLE',
 'DOUBT',
 'DOWN',
 'DRAW',
 'DRAWING',
 'DREAM',
 'DRESS',
 'DRINK',
 'DRIVE',
 'DRIVER',
 'DROP',
 'DRUG',
 'DRY',
 'DUE',
 'DURING',
 'DUTY',
 'EACH',
 'EAR',
 'EARLY',
 'EARN',
 'EARTH',
 'EASILY',
 'EAST',
 'EASY',
 'EAT',
 'ECONOMIC',
 'ECONOMY',
 'EDGE',
 'EDITOR',
 'EDUCATION',
 'EDUCATIONAL',
 'EFFECT',
 'EFFECTIVE',
 'EFFECTIVELY',
 'EFFORT',
 'EGG',
 'EITHER',
 'ELDERLY',
 'ELECTION',
 'ELEMENT',
 'ELSE',
 'ELSEWHERE',
 'EMERGE',
 'EMPHASIS',
 'EMPLOY',
 'EMPLOYEE',
 'EMPLOYER',
 'EMPLOYMENT',
 'EMPTY',
 'ENABLE',
 'ENCOURAGE',
 'END',
 'ENEMY',
 'ENERGY',
 'ENGINE',
 'ENGINEERING',
 'ENJOY',
 'ENOUGH',
 'ENSURE',
 'ENTER',
 'ENTERPRISE',
 'ENTIRE',
 'ENTIRELY',
 'ENTITLE',
 'ENTRY',
 'ENVIRONMENT',
 'ENVIRONMENTAL',
 'EQUAL',
 'EQUALLY',
 'EQUIPMENT',
 'ERROR',
 'ESCAPE',
 'ESPECIALLY',
 'ESSENTIAL',
 'ESTABLISH',
 'ESTABLISHMENT',
 'ESTATE',
 'ESTIMATE',
 'EVEN',
 'EVENING',
 'EVENT',
 'EVENTUALLY',
 'EVER',
 'EVERY',
 'EVERYBODY',
 'EVERYONE',
 'EVERYTHING',
 'EVIDENCE',
 'EXACTLY',
 'EXAMINATION',
 'EXAMINE',
 'EXAMPLE',
 'EXCELLENT',
 'EXCEPT',
 'EXCHANGE',
 'EXECUTIVE',
 'EXERCISE',
 'EXHIBITION',
 'EXIST',
 'EXISTENCE',
 'EXISTING',
 'EXPECT',
 'EXPECTATION',
 'EXPENDITURE',
 'EXPENSE',
 'EXPENSIVE',
 'EXPERIENCE',
 'EXPERIMENT',
 'EXPERT',
 'EXPLAIN',
 'EXPLANATION',
 'EXPLORE',
 'EXPRESS',
 'EXPRESSION',
 'EXTEND',
 'EXTENT',
 'EXTERNAL',
 'EXTRA',
 'EXTREMELY',
 'EYE',
 'FACE',
 'FACILITY',
 'FACT',
 'FACTOR',
 'FACTORY',
 'FAIL',
 'FAILURE',
 'FAIR',
 'FAIRLY',
 'FAITH',
 'FALL',
 'FAMILIAR',
 'FAMILY',
 'FAMOUS',
 'FAR',
 'FARM',
 'FARMER',
 'FASHION',
 'FAST',
 'FATHER',
 'FAVOUR',
 'FEAR',
 'FEATURE',
 'FEE',
 'FEEL',
 'FEELING',
 'FEMALE',
 'FEW',
 'FIELD',
 'FIGHT',
 'FIGURE',
 'FILE',
 'FILL',
 'FILM',
 'FINAL',
 'FINALLY',
 'FINANCE',
 'FINANCIAL',
 'FIND',
 'FINDING',
 'FINE',
 'FINGER',
 'FINISH',
 'FIRE',
 'FIRM',
 'FIRST',
 'FISH',
 'FIT',
 'FIX',
 'FLAT',
 'FLIGHT',
 'FLOOR',
 'FLOW',
 'FLOWER',
 'FLY',
 'FOCUS',
 'FOLLOW',
 'FOLLOWING',
 'FOOD',
 'FOOT',
 'FOOTBALL',
 'FOR',
 'FORCE',
 'FOREIGN',
 'FOREST',
 'FORGET',
 'FORM',
 'FORMAL',
 'FORMER',
 'FORWARD',
 'FOUNDATION',
 'FREE',
 'FREEDOM',
 'FREQUENTLY',
 'FRESH',
 'FRIEND',
 'FROM',
 'FRONT',
 'FRUIT',
 'FUEL',
 'FULL',
 'FULLY',
 'FUNCTION',
 'FUND',
 'FUNNY',
 'FURTHER',
 'FUTURE',
 'GAIN',
 'GAME',
 'GARDEN',
 'GAS',
 'GATE',
 'GATHER',
 'GENERAL',
 'GENERALLY',
 'GENERATE',
 'GENERATION',
 'GENTLEMAN',
 'GET',
 'GIRL',
 'GIVE',
 'GLASS',
 'GO',
 'GOAL',
 'GOD',
 'GOLD',
 'GOOD',
 'GOVERNMENT',
 'GRANT',
 'GREAT',
 'GREEN',
 'GREY',
 'GROUND',
 'GROUP',
 'GROW',
 'GROWING',
 'GROWTH',
 'GUEST',
 'GUIDE',
 'GUN',
 'HAIR',
 'HALF',
 'HALL',
 'HAND',
 'HANDLE',
 'HANG',
 'HAPPEN',
 'HAPPY',
 'HARD',
 'HARDLY',
 'HATE',
 'HAVE',
 'HE',
 'HEAD',
 'HEALTH',
 'HEAR',
 'HEART',
 'HEAT',
 'HEAVY',
 'HELL',
 'HELP',
 'HENCE',
 'HER',
 'HERE',
 'HERSELF',
 'HIDE',
 'HIGH',
 'HIGHLY',
 'HILL',
 'HIM',
 'HIMSELF',
 'HIS',
 'HISTORICAL',
 'HISTORY',
 'HIT',
 'HOLD',
 'HOLE',
 'HOLIDAY',
 'HOME',
 'HOPE',
 'HORSE',
 'HOSPITAL',
 'HOT',
 'HOTEL',
 'HOUR',
 'HOUSE',
 'HOUSEHOLD',
 'HOUSING',
 'HOW',
 'HOWEVER',
 'HUGE',
 'HUMAN',
 'HURT',
 'HUSBAND',
 'I',
 'IDEA',
 'IDENTIFY',
 'IF',
 'IGNORE',
 'ILLUSTRATE',
 'IMAGE',
 'IMAGINE',
 'IMMEDIATE',
 'IMMEDIATELY',
 'IMPACT',
 'IMPLICATION',
 'IMPLY',
 'IMPORTANCE',
 'IMPORTANT',
 'IMPOSE',
 'IMPOSSIBLE',
 'IMPRESSION',
 'IMPROVE',
 'IMPROVEMENT',
 'IN',
 'INCIDENT',
 'INCLUDE',
 'INCLUDING',
 'INCOME',
 'INCREASE',
 'INCREASED',
 'INCREASINGLY',
 'INDEED',
 'INDEPENDENT',
 'INDEX',
 'INDICATE',
 'INDIVIDUAL',
 'INDUSTRIAL',
 'INDUSTRY',
 'INFLUENCE',
 'INFORM',
 'INFORMATION',
 'INITIAL',
 'INITIATIVE',
 'INJURY',
 'INSIDE',
 'INSIST',
 'INSTANCE',
 'INSTEAD',
 'INSTITUTE',
 'INSTITUTION',
 'INSTRUCTION',
 'INSTRUMENT',
 'INSURANCE',
 'INTEND',
 'INTENTION',
 'INTEREST',
 'INTERESTED',
 'INTERESTING',
 'INTERNAL',
 'INTERNATIONAL',
 'INTERPRETATION',
 'INTERVIEW',
 'INTO',
 'INTRODUCE',
 'INTRODUCTION',
 'INVESTIGATE',
 'INVESTIGATION',
 'INVESTMENT',
 'INVITE',
 'INVOLVE',
 'IRON',
 'IS',
 'ISLAND',
 'ISSUE',
 'IT',
 'ITEM',
 'ITS',
 'ITSELF',
 'JOB',
 'JOIN',
 'JOINT',
 'JOURNEY',
 'JUDGE',
 'JUMP',
 'JUST',
 'JUSTICE',
 'KEEP',
 'KEY',
 'KID',
 'KILL',
 'KIND',
 'KING',
 'KITCHEN',
 'KNEE',
 'KNOW',
 'KNOWLEDGE',
 'LABOUR',
 'LACK',
 'LADY',
 'LAND',
 'LANGUAGE',
 'LARGE',
 'LARGELY',
 'LAST',
 'LATE',
 'LATER',
 'LATTER',
 'LAUGH',
 'LAUNCH',
 'LAW',
 'LAWYER',
 'LAY',
 'LEAD',
 'LEADER',
 'LEADERSHIP',
 'LEADING',
 'LEAF',
 'LEAGUE',
 'LEAN',
 'LEARN',
 'LEAST',
 'LEAVE',
 'LEFT',
 'LEG',
 'LEGAL',
 'LEGISLATION',
 'LENGTH',
 'LESS',
 'LET',
 'LETTER',
 'LEVEL',
 'LIABILITY',
 'LIBERAL',
 'LIBRARY',
 'LIE',
 'LIFE',
 'LIFT',
 'LIGHT',
 'LIKE',
 'LIKELY',
 'LIMIT',
 'LIMITED',
 'LINE',
 'LINK',
 'LIP',
 'LIST',
 'LISTEN',
 'LITERATURE',
 'LITTLE',
 'LIVE',
 'LIVING',
 'LOAN',
 'LOCAL',
 'LOCATION',
 'LONG',
 'LOOK',
 'LORD',
 'LOSE',
 'LOSS',
 'LOT',
 'LOVE',
 'LOVELY',
 'LOW',
 'LUNCH',
 'MACHINE',
 'MAGAZINE',
 'MAIN',
 'MAINLY',
 'MAINTAIN',
 'MAJOR',
 'MAJORITY',
 'MAKE',
 'MALE',
 'MAN',
 'MANAGE',
 'MANAGEMENT',
 'MANAGER',
 'MANNER',
 'MANY',
 'MAP',
 'MARK',
 'MARKET',
 'MARRIAGE',
 'MARRIED',
 'MARRY',
 'MASS',
 'MASTER',
 'MATCH',
 'MATERIAL',
 'MATTER',
 'MAY',
 'MAYBE',
 'ME',
 'MEAL',
 'MEAN',
 'MEANING',
 'MEANS',
 'MEANWHILE',
 'MEASURE',
 'MECHANISM',
 'MEDIA',
 'MEDICAL',
 'MEET',
 'MEETING',
 'MEMBER',
 'MEMBERSHIP',
 'MEMORY',
 'MENTAL',
 'MENTION',
 'MERELY',
 'MESSAGE',
 'METAL',
 'METHOD',
 'MIDDLE',
 'MIGHT',
 'MILE',
 'MILITARY',
 'MILK',
 'MIND',
 'MINE',
 'MINISTER',
 'MINISTRY',
 'MINUTE',
 'MISS',
 'MISTAKE',
 'MODEL',
 'MODERN',
 'MODULE',
 'MOMENT',
 'MONEY',
 'MONTH',
 'MORE',
 'MORNING',
 'MOST',
 'MOTHER',
 'MOTION',
 'MOTOR',
 'MOUNTAIN',
 'MOUTH',
 'MOVE',
 'MOVEMENT',
 'MUCH',
 'MURDER',
 'MUSEUM',
 'MUSIC',
 'MUST',
 'MY',
 'MYSELF',
 ...]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h5 id="Alphabetical-Order-of-Character"&gt;Alphabetical Order of Character&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-42-coded-triangle-numbers/#Alphabetical-Order-of-Character"&gt;¶&lt;/a&gt;&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [36]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;alpha_ord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isupper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [37]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;alpha_ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[37]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;1&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [38]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;alpha_ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[38]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;1&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [39]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;alpha_ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[39]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;6&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [40]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;alpha_ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'z'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[40]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;26&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h5 id="Numerical-Value-of-String"&gt;Numerical Value of String&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-42-coded-triangle-numbers/#Numerical-Value-of-String"&gt;¶&lt;/a&gt;&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [41]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;str_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alpha_ord&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [42]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;str_val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'SKY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[42]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;55&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h5 id="Get-numerical-values-of-all-words"&gt;Get numerical values of all words&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-42-coded-triangle-numbers/#Get-numerical-values-of-all-words"&gt;¶&lt;/a&gt;&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [43]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[43]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[1,
 78,
 20,
 59,
 45,
 49,
 132,
 39,
 48,
 50,
 59,
 91,
 74,
 77,
 53,
 105,
 17,
 74,
 75,
 24,
 62,
 60,
 109,
 58,
 95,
 9,
 76,
 89,
 70,
 166,
 47,
 56,
 58,
 50,
 75,
 44,
 60,
 41,
 41,
 50,
 39,
 50,
 108,
 115,
 32,
 71,
 13,
 55,
 47,
 23,
 36,
 88,
 19,
 14,
 23,
 28,
 76,
 25,
 63,
 80,
 47,
 49,
 66,
 75,
 47,
 127,
 92,
 81,
 50,
 89,
 84,
 15,
 100,
 66,
 19,
 50,
 87,
 63,
 81,
 80,
 40,
 86,
 74,
 98,
 89,
 56,
 91,
 128,
 51,
 57,
 80,
 116,
 70,
 91,
 143,
 78,
 135,
 93,
 25,
 52,
 99,
 52,
 32,
 57,
 73,
 64,
 116,
 73,
 39,
 68,
 87,
 20,
 31,
 64,
 96,
 82,
 134,
 64,
 92,
 125,
 78,
 147,
 21,
 120,
 53,
 56,
 95,
 64,
 118,
 100,
 83,
 119,
 62,
 83,
 137,
 65,
 59,
 51,
 47,
 48,
 50,
 31,
 30,
 17,
 96,
 7,
 10,
 38,
 27,
 21,
 28,
 21,
 27,
 34,
 50,
 60,
 7,
 26,
 28,
 97,
 56,
 43,
 11,
 72,
 51,
 37,
 81,
 101,
 42,
 39,
 60,
 55,
 57,
 55,
 61,
 44,
 46,
 70,
 74,
 65,
 18,
 35,
 29,
 33,
 57,
 31,
 29,
 43,
 48,
 73,
 52,
 40,
 40,
 38,
 46,
 36,
 43,
 62,
 45,
 74,
 85,
 41,
 42,
 44,
 46,
 37,
 54,
 45,
 40,
 64,
 50,
 40,
 86,
 59,
 48,
 78,
 55,
 42,
 108,
 67,
 43,
 48,
 27,
 54,
 28,
 64,
 18,
 61,
 40,
 78,
 62,
 22,
 26,
 27,
 50,
 66,
 103,
 65,
 28,
 31,
 24,
 35,
 94,
 49,
 32,
 73,
 65,
 106,
 70,
 107,
 35,
 39,
 67,
 67,
 34,
 38,
 57,
 71,
 77,
 137,
 42,
 33,
 30,
 54,
 31,
 36,
 43,
 65,
 61,
 50,
 129,
 86,
 57,
 55,
 38,
 54,
 35,
 39,
 76,
 63,
 39,
 54,
 91,
 82,
 38,
 31,
 27,
 40,
 34,
 81,
 70,
 108,
 59,
 84,
 115,
 61,
 36,
 83,
 92,
 129,
 73,
 125,
 103,
 73,
 150,
 133,
 87,
 71,
 123,
 139,
 89,
 126,
 88,
 115,
 111,
 118,
 151,
 76,
 72,
 81,
 77,
 125,
 103,
 80,
 88,
 78,
 78,
 82,
 100,
 74,
 112,
 121,
 153,
 87,
 107,
 146,
 99,
 106,
 171,
 108,
 76,
 76,
 91,
 101,
 101,
 94,
 110,
 127,
 160,
 97,
 131,
 155,
 59,
 73,
 111,
 82,
 37,
 57,
 55,
 77,
 73,
 116,
 98,
 72,
 81,
 77,
 63,
 52,
 85,
 59,
 48,
 79,
 77,
 111,
 75,
 103,
 74,
 63,
 46,
 108,
 100,
 40,
 99,
 136,
 139,
 114,
 44,
 31,
 49,
 104,
 34,
 26,
 30,
 84,
 30,
 14,
 22,
 38,
 37,
 31,
 22,
 30,
 78,
 48,
 30,
 42,
 73,
 43,
 105,
 44,
 75,
 41,
 91,
 134,
 48,
 116,
 48,
 91,
 63,
 65,
 132,
 58,
 60,
 39,
 78,
 106,
 51,
 60,
 93,
 79,
 131,
 48,
 18,
 75,
 87,
 90,
 115,
 64,
 59,
 97,
 96,
 92,
 89,
 100,
 95,
 94,
 132,
 62,
 86,
 75,
 136,
 160,
 102,
 53,
 101,
 19,
 75,
 95,
 26,
 88,
 52,
 59,
 62,
 56,
 46,
 76,
 41,
 65,
 56,
 58,
 76,
 53,
 50,
 47,
 30,
 73,
 70,
 17,
 24,
 61,
 38,
 52,
 71,
 45,
 50,
 26,
 77,
 90,
 21,
 71,
 92,
 105,
 45,
 81,
 118,
 70,
 19,
 65,
 81,
 83,
 74,
 41,
 100,
 53,
 90,
 86,
 96,
 109,
 138,
 79,
 39,
 89,
 23,
 62,
 74,
 54,
 107,
 69,
 70,
 82,
 62,
 129,
 71,
 108,
 85,
 82,
 149,
 162,
 56,
 93,
 120,
 74,
 49,
 107,
 104,
 95,
 147,
 70,
 92,
 46,
 76,
 66,
 137,
 50,
 75,
 121,
 109,
 133,
 67,
 90,
 125,
 71,
 76,
 100,
 73,
 67,
 114,
 88,
 115,
 77,
 104,
 107,
 73,
 132,
 141,
 88,
 119,
 104,
 129,
 88,
 81,
 131,
 95,
 106,
 144,
 72,
 88,
 99,
 68,
 127,
 35,
 15,
 85,
 30,
 63,
 88,
 28,
 72,
 34,
 71,
 44,
 31,
 69,
 66,
 75,
 25,
 38,
 61,
 72,
 46,
 58,
 83,
 30,
 76,
 16,
 28,
 58,
 42,
 34,
 36,
 50,
 66,
 32,
 39,
 40,
 42,
 79,
 52,
 69,
 33,
 63,
 34,
 59,
 65,
 38,
 46,
 72,
 42,
 35,
 39,
 39,
 62,
 66,
 56,
 79,
 43,
 64,
 83,
 113,
 40,
 56,
 83,
 39,
 47,
 74,
 83,
 71,
 52,
 65,
 75,
 85,
 119,
 34,
 66,
 143,
 56,
 56,
 52,
 73,
 74,
 44,
 51,
 76,
 102,
 45,
 80,
 96,
 91,
 31,
 26,
 49,
 27,
 33,
 59,
 62,
 99,
 75,
 108,
 91,
 32,
 46,
 43,
 58,
 22,
 35,
 26,
 38,
 41,
 133,
 60,
 51,
 49,
 55,
 79,
 77,
 63,
 93,
 91,
 72,
 46,
 42,
 36,
 27,
 33,
 27,
 44,
 30,
 60,
 66,
 31,
 68,
 34,
 36,
 13,
 18,
 54,
 32,
 52,
 34,
 61,
 37,
 41,
 35,
 31,
 36,
 73,
 26,
 32,
 69,
 41,
 30,
 72,
 36,
 114,
 114,
 37,
 39,
 40,
 74,
 41,
 44,
 65,
 100,
 43,
 60,
 62,
 68,
 107,
 93,
 46,
 96,
 41,
 57,
 67,
 69,
 9,
 19,
 92,
 15,
 68,
 137,
 35,
 58,
 79,
 116,
 62,
 121,
 75,
 114,
 126,
 77,
 119,
 137,
 98,
 150,
 23,
 78,
 68,
 93,
 59,
 74,
 78,
 136,
 41,
 110,
 56,
 65,
 105,
 127,
 130,
 89,
 75,
 134,
 74,
 118,
 97,
 60,
 90,
 85,
 72,
 137,
 170,
 162,
 153,
 104,
 66,
 120,
 110,
 119,
 140,
 93,
 152,
 184,
 125,
 58,
 109,
 162,
 131,
 164,
 141,
 79,
 99,
 56,
 28,
 59,
 73,
 29,
 47,
 48,
 71,
 27,
 48,
 68,
 108,
 47,
 60,
 70,
 87,
 37,
 41,
 24,
 44,
 38,
 41,
 70,
 35,
 63,
 96,
 69,
 27,
 42,
 31,
 68,
 43,
 80,
 52,
 38,
 56,
 76,
 49,
 59,
 36,
 84,
 38,
 22,
 45,
 97,
 52,
 24,
 51,
 32,
 50,
 57,
 45,
 43,
 24,
 37,
 123,
 66,
 55,
 37,
 80,
 56,
 99,
 59,
 85,
 26,
 32,
 47,
 56,
 37,
 74,
 63,
 72,
 40,
 46,
 37,
 60,
 79,
 129,
 78,
 48,
 73,
 42,
 43,
 89,
 48,
 53,
 49,
 51,
 65,
 47,
 54,
 91,
 50,
 58,
 53,
 76,
 37,
 74,
 81,
 57,
 111,
 30,
 31,
 28,
 41,
 93,
 59,
 65,
 53,
 30,
 43,
 68,
 72,
 68,
 75,
 52,
 76,
 45,
 79,
 77,
 39,
 46,
 18,
 31,
 33,
 63,
 52,
 90,
 82,
 85,
 32,
 47,
 43,
 73,
 56,
 108,
 89,
 65,
 90,
 78,
 69,
 51,
 65,
 47,
 57,
 39,
 107,
 45,
 40,
 41,
 107,
 127,
 82,
 60,
 78,
 49,
 69,
 70,
 80,
 72,
 70,
 51,
 90,
 67,
 79,
 86,
 81,
 107,
 77,
 55,
 107,
 45,
 79,
 92,
 65,
 73,
 38,
 80,
 ...]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [59]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[59]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;{'AGO': 23,
 'LIFE': 32,
 'EVERYONE': 109,
 'APPEARANCE': 80,
 'AGE': 13,
 'LATER': 56,
 'ENVIRONMENT': 149,
 'LIFT': 47,
 'DEMAND': 41,
 'GROWING': 93,
 'EFFORT': 70,
 'AMONG': 50,
 'LAST': 52,
 'POWER': 77,
 'EMPLOYER': 109,
 'TINY': 68,
 'ENGINEERING': 107,
 'MUCH': 45,
 'REPRESENTATION': 179,
 'EXPLAIN': 81,
 'DISAPPEAR': 89,
 'NATURE': 79,
 'HANG': 30,
 'HAND': 27,
 'CURRENT': 99,
 'GO': 22,
 'ENTRY': 82,
 'APPEAR': 57,
 'MAP': 30,
 'MAY': 39,
 'MONEY': 72,
 'ANNUAL': 63,
 'PRIMARY': 100,
 'PERSON': 87,
 'NEAR': 38,
 'EXPERIMENT': 129,
 'PROPERTY': 133,
 'MAN': 28,
 'FAITH': 44,
 'NORMAL': 73,
 'BED': 11,
 'VOLUME': 88,
 'AROUND': 73,
 'BELONG': 55,
 'BEHAVIOUR': 101,
 'ASSUMPTION': 147,
 'COMMON': 73,
 'UNDERTAKE': 99,
 'PROPOSAL': 112,
 'DEMOCRATIC': 91,
 'CLEARLY': 76,
 'COUNT': 73,
 'TONE': 54,
 'SEQUENCE': 89,
 'UNDER': 62,
 'ACTIVE': 60,
 'NOD': 33,
 'EVENT': 66,
 'TRAFFIC': 63,
 'NOT': 49,
 'SENIOR': 80,
 'NOW': 52,
 'NOR': 47,
 'DETAILED': 60,
 'ATTEND': 64,
 'INTERESTING': 140,
 'QUIET': 72,
 'POPULAR': 99,
 'SMILE': 58,
 'REFUSE': 74,
 'TASK': 51,
 'DROP': 53,
 'AMONGST': 89,
 'MEMBER': 56,
 'TABLE': 40,
 'DOCUMENT': 95,
 'WHY': 56,
 'KITCHEN': 70,
 'DIFFERENT': 87,
 'PACKAGE': 44,
 'AVERAGE': 59,
 'PUBLISH': 87,
 'BLOODY': 73,
 'JUMP': 60,
 'EVEN': 46,
 'AIRCRAFT': 76,
 'EARLY': 61,
 'EXPENDITURE': 141,
 'WESTERN': 104,
 'BOTTLE': 74,
 'EVER': 50,
 'ELECTION': 83,
 'PRIME': 61,
 'NOTICE': 66,
 'FARM': 38,
 'COMPONENT': 115,
 'CURRENTLY': 136,
 'SINGLE': 66,
 'DESIRE': 60,
 'ORGANISATION': 142,
 'SUPPLY': 109,
 'COMPETITION': 139,
 'ONE': 34,
 'MAINTAIN': 81,
 'PANEL': 48,
 'A': 1,
 'HEAD': 18,
 'FORM': 52,
 'TERM': 56,
 'HEAT': 34,
 'HEAR': 32,
 'DEVICE': 48,
 'TOMORROW': 137,
 'US': 40,
 'BIND': 29,
 'CALL': 28,
 'ANIMAL': 50,
 'CONTRIBUTION': 160,
 'PEOPLE': 69,
 'LIMIT': 63,
 'ALTHOUGH': 92,
 'CONTAIN': 76,
 'SUFFER': 75,
 'TRUE': 64,
 'OUGHT': 71,
 'ECONOMY': 90,
 'HEAVY': 61,
 'RELY': 60,
 'INFORM': 75,
 'INFLUENCE': 89,
 'SOURCE': 81,
 'DINNER': 64,
 'CONDITION': 103,
 'APPOINT': 91,
 'SAMPLE': 66,
 'ISSUE': 73,
 'CLAIM': 38,
 'MYSELF': 80,
 'COMBINATION': 115,
 'DECISION': 78,
 'MONTH': 70,
 'STICK': 62,
 'ADDRESS': 70,
 'PROGRESS': 117,
 'ORDINARY': 104,
 'INJURY': 97,
 'APART': 56,
 'HORSE': 65,
 'INVITE': 79,
 'CONCERNED': 81,
 'REDUCE': 56,
 'DISCOVER': 95,
 'TELEPHONE': 100,
 'DEFENCE': 42,
 'PENSION': 92,
 'BEGIN': 37,
 'STRONG': 93,
 'PROFIT': 84,
 'SHARE': 51,
 'NEIGHBOUR': 99,
 'SOCIETY': 96,
 'VILLAGE': 68,
 'PHYSICAL': 93,
 'SPECIAL': 65,
 'UNLESS': 90,
 'MEDIA': 32,
 'MAINLY': 74,
 'POSSIBLE': 97,
 'ACCORDING': 74,
 'YOUTH': 89,
 'POSSIBLY': 117,
 'ANYTHING': 98,
 'GLASS': 58,
 'CONTINUE': 101,
 'ORGANISE': 88,
 'TIME': 47,
 'VIEW': 59,
 'EVERYBODY': 121,
 'WORKING': 97,
 'SECTION': 85,
 'CONDUCT': 80,
 'IMPROVEMENT': 150,
 'RULE': 56,
 'POLITICS': 103,
 'MIGHT': 57,
 'YOU': 61,
 'LAND': 31,
 'AREA': 25,
 'RECOGNIZE': 102,
 'TRADE': 48,
 'INDICATE': 65,
 'BELIEVE': 60,
 'ASSOCIATION': 125,
 'ONCE': 37,
 'DANGEROUS': 104,
 'SHAKE': 44,
 'PERCENT': 81,
 'WORLD': 72,
 'SURVIVE': 116,
 'CLIMB': 39,
 'PIECE': 38,
 'TRIP': 63,
 'CHANNEL': 57,
 'PREVIOUS': 125,
 'REPRESENT': 120,
 'HOUSEHOLD': 107,
 'BREAK': 37,
 'MAJORITY': 111,
 'REST': 62,
 'SPEED': 49,
 'IMPROVE': 98,
 'BRIDGE': 45,
 'INTERPRETATION': 184,
 'DEGREE': 44,
 'DETAIL': 51,
 'WEAPON': 74,
 'THROUGHOUT': 153,
 'CORPORATE': 111,
 'UNIVERSITY': 162,
 'NEVER': 64,
 'PRIVATE': 91,
 'SPIRIT': 91,
 'RACE': 27,
 'TEACHING': 67,
 'LEGAL': 37,
 'MILE': 39,
 'RELATION': 94,
 'SKIN': 53,
 'APPARENTLY': 128,
 'MILK': 45,
 'VAST': 62,
 'GROUND': 79,
 'EVENING': 76,
 'FACE': 15,
 'SLEEP': 57,
 'FACT': 30,
 'NICE': 31,
 'ENGINE': 54,
 'ATMOSPHERE': 120,
 'ENABLE': 39,
 'SOMEWHAT': 104,
 'PAY': 42,
 'OBJECT': 55,
 'ALRIGHT': 75,
 'SORRY': 95,
 'STEAL': 57,
 'COMMENT': 83,
 'INVOLVE': 99,
 'LIVE': 48,
 'DETERMINE': 93,
 'TEACH': 37,
 'CERTAINLY': 107,
 'BRIEF': 40,
 'SIGN': 49,
 'PRESSURE': 121,
 'CHIEF': 31,
 'WHERE': 59,
 'SECURITY': 120,
 'HUSBAND': 69,
 'OIL': 36,
 'REGION': 68,
 'SEND': 42,
 'BIRD': 33,
 'HARDLY': 68,
 'VARIETY': 100,
 'REQUIRE': 93,
 'LARGE': 43,
 'INTERVIEW': 125,
 'OPINION': 92,
 'BOAT': 38,
 'SEARCH': 54,
 'BUY': 48,
 'AUTHOR': 83,
 'BUS': 42,
 'RIDE': 36,
 'POSSIBILITY': 155,
 'HISTORICAL': 114,
 'MEET': 43,
 'PAINTING': 90,
 'FINISH': 65,
 'LOVE': 54,
 'THEME': 51,
 'SUPPOSE': 111,
 'EXTERNAL': 99,
 'HALF': 27,
 'HALL': 33,
 'PROVIDED': 93,
 'FINANCIAL': 69,
 'NECK': 33,
 'INTERESTED': 119,
 'FACTOR': 63,
 'ALONE': 47,
 'ALONG': 49,
 'STRONGLY': 130,
 'GIVE': 43,
 'COMMERCIAL': 92,
 'WRITING': 100,
 'FLIGHT': 62,
 'NETWORK': 106,
 'DAUGHTER': 84,
 'ABILITY': 78,
 'VISITOR': 112,
 'ARRIVE': 73,
 'EXTREMELY': 127,
 'EXERCISE': 88,
 'SORT': 72,
 'WAGE': 36,
 'ENCOURAGE': 89,
 'MAJOR': 57,
 'NAME': 33,
 'CERTAIN': 70,
 'DESPITE': 78,
 'APPEAL': 51,
 'PUBLIC': 63,
 'VARY': 66,
 'REALITY': 90,
 'CULTURAL': 108,
 'SPEAKER': 75,
 'LOW': 50,
 'LOT': 47,
 'LEARN': 50,
 'APPOINTMENT': 143,
 'CREATE': 52,
 'RECORD': 63,
 'SPEECH': 56,
 'ANOTHER': 81,
 'ASSESSMENT': 134,
 'EMERGE': 53,
 'DEFENDANT': 73,
 'EFFECT': 45,
 'NATION': 73,
 'BELOW': 57,
 'LEADERSHIP': 97,
 'FEMALE': 42,
 'ESTIMATE': 92,
 'CRISIS': 77,
 'FOCUS': 64,
 'ACCESS': 50,
 'COMMISSION': 129,
 'SIGNIFICANCE': 99,
 'TRUST': 98,
 'RECOGNITION': 129,
 'DRY': 47,
 'THAT': 49,
 'FAMILIAR': 69,
 'MOVE': 55,
 'PROPER': 88,
 'THAN': 43,
 'RESPOND': 91,
 'URBAN': 56,
 'FLOWER': 79,
 'KEEP': 37,
 'SPECIFIC': 70,
 'SETTLE': 81,
 'IRON': 56,
 'PRESIDENT': 110,
 'EXPENSIVE': 119,
 'WIDE': 41,
 'PROVIDE': 89,
 'WELFARE': 70,
 'REQUEST': 105,
 'FEATURE': 76,
 'INSIST': 90,
 'WHICH': 51,
 'BALANCE': 38,
 'LIVING': 73,
 'DERIVE': 63,
 'MEASURE': 82,
 'OUTPUT': 113,
 'PAYMENT': 94,
 'SURE': 63,
 'PAIN': 40,
 'SUPPORT': 125,
 'PRINCIPLE': 102,
 'PAIR': 44,
 'KNEE': 35,
 'HE': 13,
 'TERRIBLE': 89,
 'REGULATION': 122,
 'PRODUCTION': 135,
 'CONNECT': 74,
 'INFORMATION': 134,
 'REPEAT': 65,
 'CONFIRM': 78,
 'COURSE': 81,
 'SIZE': 59,
 'WARN': 56,
 'MAIN': 37,
 'THING': 58,
 'WOOD': 57,
 'SENSE': 62,
 'QUALITY': 105,
 'WHO': 46,
 'SERVICE': 81,
 'SUN': 54,
 'SUM': 53,
 'MECHANISM': 85,
 'TWICE': 60,
 'GAME': 26,
 'TROOP': 84,
 'PLENTY': 92,
 'REVEAL': 63,
 'EQUALLY': 93,
 'SLOW': 69,
 'TEA': 26,
 'SHAPE': 49,
 'CONCLUDE': 77,
 'WRITE': 75,
 'ADMIT': 47,
 'OUR': 54,
 'CONSEQUENCE': 121,
 'FRESH': 56,
 'PROBLEM': 81,
 'BORDER': 62,
 'SOLUTION': 125,
 'SAFETY': 76,
 'LEFT': 43,
 'DUTY': 70,
 'CANDIDATE': 61,
 'MEDICAL': 47,
 'CURRICULUM': 139,
 'CHARACTER': 77,
 'NUMBER': 73,
 'BACKGROUND': 96,
 'OFTEN': 60,
 'MEANING': 63,
 'ALSO': 47,
 'BLOCK': 43,
 'REASONABLE': 92,
 'PROFESSIONAL': 149,
 'EAR': 24,
 'EAT': 26,
 'SHOP': 58,
 'SHOT': 62,
 'SHOW': 65,
 'SUGGEST': 98,
 'METAL': 51,
 'VALUE': 61,
 'TRADITIONAL': 123,
 'HOW': 46,
 'HOT': 43,
 'POTENTIAL': 112,
 'NEARLY': 75,
 'QUARTER': 100,
 'DEBATE': 37,
 'DECADE': 22,
 'NEGOTIATION': 129,
 'POUND': 70,
 'WEST': 67,
 'FAVOUR': 83,
 'TOUR': 74,
 'MOUTH': 77,
 'DEVELOP': 79,
 'SIMPLE': 74,
 'TEXT': 69,
 'OBTAIN': 61,
 'SIMPLY': 94,
 'DIRECTION': 97,
 'ADDITIONAL': 89,
 'CROWD': 63,
 'ARTIST': 87,
 'DEPARTMENT': 116,
 'DEFINE': 43,
 'WEEK': 44,
 'FULL': 51,
 'FIT': 35,
 'SENTENCE': 85,
 'SOMEWHERE': 111,
 'FIX': 39,
 'INSTRUCTION': 162,
 'ANYWAY': 89,
 'LEAST': 57,
 'HIGHLY': 69,
 'VERSION': 102,
 'CRITERION': 111,
 'REALISE': 69,
 'FEELING': 58,
 'PLATE': 54,
 'PROCESS': 95,
 'REVIEW': 82,
 'WILL': 56,
 'TAPE': 42,
 'WILD': 48,
 'LAWYER': 84,
 'LARGELY': 80,
 'ADVICE': 44,
 'PLASTIC': 80,
 'AFTERWARDS': 115,
 'CHEMICAL': 54,
 'HIDE': 26,
 'ASSUME': 78,
 'COMPANY': 87,
 'WRONG': 77,
 'RELIEF': 55,
 'FORMAL': 65,
 'WEEKEND': 67,
 'FLAT': 39,
 'DOOR': 52,
 'WIDELY': 78,
 'UNION': 73,
 'CONTRIBUTE': 127,
 'INDIVIDUAL': 105,
 'RESULT': 95,
 'GENERATE': 75,
 'BLOW': 52,
 'RECALL': 51,
 'AGENCY': 55,
 'TEND': 43,
 'SOCIAL': 59,
 'MY': 38,
 'REAL': 36,
 'READ': 28,
 'DOG': 26,
 'HURT': 67,
 'MEMBERSHIP': 108,
 'COST': 57,
 'FOLLOW': 83,
 'DEFINITION': 105,
 'EXECUTIVE': 114,
 'CAR': 22,
 'PRESENCE': 85,
 'ACTIVITY': 109,
 'DOMESTIC': 88,
 'CONTENT': 91,
 'VARIOUS': 105,
 'REPLY': 76,
 'IMPLICATION': 121,
 'UPPER': 76,
 'JOIN': 48,
 'PERSONAL': 100,
 'MUSEUM': 92,
 'PLEASE': 58,
 'PUB': 39,
 'ENSURE': 82,
 'CHOOSE': 65,
 'PUT': 57,
 'IMMEDIATELY': 116,
 'SLIGHTLY': 112,
 'BAR': 21,
 'RELATIONSHIP': 146,
 'DANGER': 49,
 'IMPORTANCE': 114,
 'DESCRIBE': 65,
 'BAG': 10,
 'BAD': 7,
 'YOUR': 79,
 'FACILITY': 85,
 'TOGETHER': 98,
 'CELL': 32,
 'ACADEMIC': 39,
 'PRISON': 91,
 'SOFT': 60,
 'ALMOST': 80,
 'MARRIED': 68,
 'SOUTHERN': 120,
 'AGAINST': 71,
 'PLAYER': 77,
 'FINALLY': 79,
 'COMPUTER': 111,
 'LEAGUE': 51,
 'COMPARE': 71,
 'ALREADY': 66,
 'THEATRE': 77,
 'EDGE': 21,
 'HEALTH': 54,
 'LIE': 26,
 'ATTEMPT': 95,
 'LESS': 55,
 'ENTER': 62,
 'ROYAL': 71,
 'DIFFICULTY': 115,
 'LIP': 37,
 'FILE': 32,
 'SPEND': 58,
 'FILM': 40,
 'FILL': 39,
 'RARE': 42,
 'OFFER': 50,
 'COLOUR': 84,
 'EXCEPT': 73,
 'FAMILY': 66,
 'AVOID': 51,
 'TECHNIQUE': 102,
 'BASE': 27,
 'DEEP': 30,
 'NIGHT': 58,
 'HENCE': 35,
 'CAUSE': 49,
 'WISH': 59,
 'IMPOSE': 77,
 'REGULAR': 82,
 'EITHER': 65,
 'OCCUR': 60,
 'AFTER': 50,
 'CONSTANT': 106,
 'COUNTRY': 116,
 'SOMETIMES': 118,
 'AFFECT': 41,
 'COLD': 34,
 'FINAL': 42,
 'POPULATION': 139,
 'MOUNTAIN': 107,
 'WOULD': 75,
 'OBSERVE': 86,
 'FINGER': 59,
 'FUNCTION': 102,
 'FAIRLY': 71,
 'END': 23,
 'OBSERVATION': 140,
 'LEAF': 24,
 'LEAD': 22,
 'LEAN': 32,
 'AGREEMENT': 88,
 'MUSIC': 65,
 'REGIONAL': 81,
 'STUDIO': 88,
 'ENJOY': 69,
 'REQUIREMENT': 145,
 'SET': 44,
 'FINANCE': 52,
 'HOUR': 62,
 'AGENT': 47,
 'SEX': 48,
 'INCREASE': 74,
 'BRAIN': 44,
 'SEE': 29,
 'SEA': 25,
 'THREATEN': 91,
 'PRESENT': 97,
 'EDUCATIONAL': 105,
 'REVOLUTION': 151,
 'LETTER': 80,
 'CARD': 26,
 'CARE': 27,
 'LIST': 60,
 'BRANCH': 46,
 'DISCUSS': 94,
 'WORRY': 99,
 'DO': 19,
 'PARTICULARLY': 156,
 'BASIS': 50,
 'TOOTH': 78,
 'TRIAL': 60,
 'OUTSIDE': 93,
 'CONTACT': 76,
 'BASIC': 34,
 'BOTH': 45,
 'SOMEONE': 86,
 'QUESTION': 120,
 'ENVIRONMENTAL': 162,
 'ESTABLISH': 95,
 'ORIGINAL': 85,
 'SUCCESSFUL': 128,
 'GOD': 26,
 'INTO': 58,
 'ARGUMENT': 99,
 'POCKET': 70,
 'RECOMMEND': 90,
 'SERIOUS': 106,
 'COPY': 59,
 'SKILL': 63,
 'ROOM': 61,
 'CITY': 57,
 'CONCEPT': 76,
 'WHOSE': 70,
 'ADD': 9,
 'ADULT': 58,
 'PROSPECT': 112,
 'WE': 28,
 'EXTEND': 72,
 'THOUGHT': 99,
 'EXTENT': 88,
 'SOUTH': 83,
 'BUSY': 67,
 'HOWEVER': 96,
 'REMAIN': 60,
 'IMPORTANT': 126,
 'PRETTY': 104,
 'NORMALLY': 110,
 'SURELY': 100,
 'MOVEMENT': 107,
 'RISK': 57,
 'LEVEL': 56,
 'NATIONAL': 86,
 'RISE': 51,
 'MODULE': 70,
 'PAST': 56,
 'REPRESENTATIVE': 177,
 'PASS': 55,
 'OPERATE': 80,
 'TOWN': 72,
 'SCHOOL': 72,
 'ACTUAL': 58,
 'GATHER': 59,
 'CULTURE': 100,
 'PROPERLY': 125,
 'LINK': 46,
 'YES': 49,
 'YET': 50,
 'HELP': 41,
 'MARRY': 75,
 'EXISTING': 107,
 'FAMOUS': 75,
 'INCIDENT': 78,
 'COMPLEX': 88,
 'DESIGN': 58,
 'BOARD': 40,
 'HELL': 37,
 'AHEAD': 19,
 'ROOF': 54,
 'CLUB': 38,
 'CARRY': 65,
 'ADVISE': 60,
 'DIVIDE': 53,
 'FOR': 39,
 'FOOD': 40,
 'FUND': 45,
 'FOOT': 56,
 'WHOLE': 63,
 'TODAY': 65,
 'UNITED': 73,
 'SURFACE': 73,
 'PARTNER': 92,
 'TEACHER': 60,
 'WIND': 50,
 'WINE': 51,
 'COS': 37,
 'UNFORTUNATELY': 192,
 'THESE': 57,
 'FISH': 42,
 'HARD': 31,
 'PER': 39,
 'RECENT': 65,
 'CASE': 28,
 'JOB': 27,
 'BETTER': 70,
 'LUNCH': 58,
 'ATTRACTIVE': 119,
 'PLUS': 68,
 'CATEGORY': 94,
 'FAIR': 34,
 'MERELY': 78,
 'FACTORY': 88,
 'YOUNG': 82,
 'FIELD': 36,
 'ABSENCE': 49,
 'STUFF': 72,
 'WAY': 49,
 'FAIL': 28,
 'WALK': 47,
 'COME': 36,
 'GROW': 63,
 'DISCIPLINE': 100,
 'RUN': 53,
 'MINISTRY': 127,
 'SUBSTANTIAL': 138,
 'INSTITUTION': 170,
 'IGNORE': 68,
 'REJECT': 61,
 'OWNER': 75,
 'HERSELF': 73,
 'TELL': 49,
 'FEEL': 28,
 'DIE': 18,
 'CRIME': 48,
 'AIM': 23,
 'PARTICULAR': 119,
 'AID': 14,
 'WONDER': 79,
 'CONTROL': 97,
 'POLICE': 60,
 'MEANS': 52,
 'INTRODUCE': 109,
 'INCREASINGLY': 136,
 'FRUIT': 74,
 'ARISE': 52,
 'POLICY': 80,
 'MEAL': 31,
 'CONFLICT': 82,
 'MEAN': 33,
 'I': 9,
 'MAYBE': 46,
 'IS': 28,
 'IT': 29,
 'CAPITAL': 62,
 'IF': 15,
 'HIGH': 32,
 'WING': 53,
 'PROMISE': 95,
 'WITHDRAW': 106,
 'BOX': 41,
 'BOY': 42,
 'THOUGH': 79,
 'WORKS': 86,
 'EXPLORE': 95,
 'OVER': 60,
 'WITHIN': 83,
 'PARK': 46,
 'BACK': 17,
 'INVESTIGATE': 131,
 'PART': 55,
 'TREAT': 64,
 'GIRL': 46,
 'TO': 35,
 'RELIGION': 89,
 'ONTO': 64,
 'GRANT': 60,
 'SAFE': 31,
 'OBVIOUS': 103,
 'BENEATH': 55,
 'TREATY': 89,
 'CREDIT': 59,
 'CHAIRMAN': 67,
 'SUGGESTION': 136,
 'RESPECT': 86,
 'ALTERNATIVE': 127,
 'FLY': 43,
 'STONE': 73,
 'RELATE': 61,
 'BURN': 55,
 'STAND': 58,
 'FINE': 34,
 'FIND': 33,
 'RESEARCH': 77,
 'TROUBLE': 93,
 'SHEET': 57,
 'JUST': 70,
 'ARRANGEMENT': 116,
 'TRY': 63,
 'PLACE': 37,
 'READING': 58,
 'MISS': 60,
 'USUAL': 74,
 'REVENUE': 90,
 'WEAK': 40,
 'SERIOUSLY': 143,
 'EFFECTIVELY': 118,
 'RECOVER': 86,
 'SHOE': 47,
 'ROUTE': 79,
 'CASH': 31,
 'BRIGHT': 64,
 'PROGRAM': 88,
 'DIRECTLY': 96,
 'SEXUAL': 82,
 'DISPLAY': 86,
 'NO': 29,
 'COMMUNITY': 133,
 'EMPHASIS': 90,
 'UNABLE': 55,
 'MASTER': 76,
 'SONG': 55,
 'ODD': 23,
 'ORIGIN': 72,
 'BUILDING': 78,
 'DRAW': 46,
 'RAPIDLY': 85,
 'CONSIDERATION': 146,
 'CONSTRUCTION': 171,
 'QUICKLY': 98,
 'ELSEWHERE': 100,
 'LEG': 24,
 'PROPORTION': 156,
 'SHOULD': 79,
 'LET': 37,
 'LAUGH': 49,
 'SECTOR': 80,
 'COFFEE': 40,
 'WHETHER': 87,
 'POLITICAL': 97,
 'PRISONER': 114,
 'COMPLETELY': 126,
 'MINISTER': 107,
 'ASPECT': 64,
 'SEEM': 42,
 'ARGUE': 52,
 'SEEK': 40,
 'EXCHANGE': 67,
 'WHEN': 50,
 'FIRM': 46,
 'FIRE': 38,
 'THERE': 56,
 'DISEASE': 62,
 'COMMITMENT': 125,
 'START': 78,
 'IMPOSSIBLE': 119,
 'HISTORY': 114,
 'OFFENCE': 54,
 'PRICE': 51,
 'SECOND': 60,
 'BRING': 50,
 'CHILD': 36,
 'JUSTICE': 87,
 'SIR': 46,
 'USEFUL': 84,
 'KNOWLEDGE': 96,
 'SIT': 48,
 'STRANGE': 84,
 'GAIN': 31,
 'VOICE': 54,
 'CUSTOMER': 114,
 'WOMAN': 66,
 'FORCE': 47,
 'TAX': 45,
 'WAR': 42,
 'ACTION': 62,
 'EXHIBITION': 115,
 'BODY': 46,
 'CRITICISM': 103,
 'FIGURE': 66,
 'ASSESS': 82,
 'ARTICLE': 68,
 'SIMILAR': 81,
 'BEAUTIFUL': 97,
 'LOOK': 53,
 'HOUSE': 68,
 'EXPRESS': 106,
 'INSTANCE': 85,
 'CHARGE': 42,
 'COLLEGE': 59,
 'RICH': 38,
 'CONSUMER': 108,
 'CONCERN': 72,
 'GREAT': 51,
 'USED': 49,
 'CAMPAIGN': 64,
 'PREFER': 68,
 'GUN': 42,
 'USER': 63,
 'DRAWING': 76,
 'MARKET': 68,
 'PREVENT': 100,
 'CONTRACT': 94,
 'CONSERVATIVE': 153,
 'BESIDE': 44,
 'CAREFULLY': 103,
 'POSITION': 117,
 'SPORT': 88,
 'TOTALLY': 105,
 'THANK': 54,
 'INDUSTRIAL': 127,
 'THREAT': 72,
 'CAPABLE': 40,
 'GENERATION': 108,
 'LOAN': 42,
 'DRIVER': 76,
 'SISTER': 90,
 'PROTECTION': 135,
 'VEHICLE': 64,
 'BABY': 30,
 'DESTROY': 106,
 'AGREE': 36,
 'SATISFY': 99,
 'TYPE': 66,
 'DELIVER': 75,
 'REMIND': 63,
 'SAY': 45,
 'PARTLY': 92,
 'STATION': 98,
 'RED': 27,
 'TRAINING': 92,
 'CAPACITY': 78,
 'WEATHER': 80,
 'CRY': 46,
 'COMMITTEE': 103,
 'ORGANIZATION': 149,
 'FRIEND': 56,
 'OUT': 56,
 'AFFORD': 50,
 'HAPPEN': 60,
 'AIR': 28,
 'STAGE': 52,
 'ACHIEVE': 53,
 'ADVANTAGE': 75,
 'DRESS': 65,
 'IMPLY': 75,
 'SO': 34,
 'UNEMPLOYMENT': 173,
 'PATTERN': 94,
 'CAT': 24,
 'STEP': 60,
 'UNDERSTAND': 120,
 'CAN': 18,
 'DATE': 30,
 'DATA': 26,
 'CORRECT': 82,
 'DRINK': 56,
 'EMPLOY': 86,
 'COAL': 31,
 'AMOUNT': 84,
 'RESPONSIBILITY': 192,
 'BLOOD': 48,
 'FURTHER': 96,
 'SECRETARY': 114,
 'SOMEBODY': 98,
 'STUDY': 89,
 'RAIN': 42,
 'PERIOD': 67,
 'INTENTION': 120,
 'OTHER': 66,
 ...}&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-1"&gt;Version 1&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-42-coded-triangle-numbers/#Version-1"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [78]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [81]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;triangle_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;triangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;triangle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;triangle_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;triangle_set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [82]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;count&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[82]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;162&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [85]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count_polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;polygonal_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;polygonal_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;polygonal_set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [89]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;count_polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[89]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;162&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [88]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;count_polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[88]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;92&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-2---Terse-but-less-efficient-/-readable"&gt;Version 2 - Terse but less efficient / readable&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-42-coded-triangle-numbers/#Version-2---Terse-but-less-efficient-/-readable"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [65]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;word_vals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [68]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;max_word_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_vals&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;max_word_val&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[68]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;192&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [69]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;takewhile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [72]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;triangle_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;takewhile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;max_word_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt; &lt;span class="n"&gt;triangle_set&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[72]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;{1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190}&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [75]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;triangle_set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word_vals&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[75]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;162&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [90]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;count_polygonal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wd&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;takewhile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;max_word_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [91]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;count_polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[91]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;92&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-3---Reduce-Triangle-number-test-to-Square-number-test"&gt;Version 3 - Reduce Triangle number test to Square number test&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-42-coded-triangle-numbers/#Version-3---Reduce-Triangle-number-test-to-Square-number-test"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>ipython</category><category>project-euler</category><category>python</category><guid>http://louistiao.me/posts/project-euler/problem-42-coded-triangle-numbers/</guid><pubDate>Fri, 17 Apr 2015 14:31:37 GMT</pubDate></item><item><title>Project Euler Problem 43: Sub-string divisibility</title><link>http://louistiao.me/posts/project-euler/problem-43-sub-string-divisibility/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.&lt;/p&gt;
&lt;p&gt;Let $d_1$ be the 1st digit, $d_2$ be the 2nd digit, and so on. In this way, we note the following:&lt;/p&gt;
&lt;p&gt;$d_2d_3d_4=406$ is divisible by 2&lt;/p&gt;
&lt;p&gt;$d_3d_4d_5=063$ is divisible by 3&lt;/p&gt;
&lt;p&gt;$d_4d_5d_6=635$ is divisible by 5&lt;/p&gt;
&lt;p&gt;$d_5d_6d_7=357$ is divisible by 7&lt;/p&gt;
&lt;p&gt;$d_6d_7d_8=572$ is divisible by 11&lt;/p&gt;
&lt;p&gt;$d_7d_8d_9=728$ is divisible by 13&lt;/p&gt;
&lt;p&gt;$d_8d_9d_{10}=289$ is divisible by 17&lt;/p&gt;
&lt;p&gt;Find the sum of all 0 to 9 pandigital numbers with this property.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-1:-Brute-Force"&gt;Version 1: Brute-Force&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-43-sub-string-divisibility/#Version-1:-Brute-Force"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;izip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[2]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
 (0, 1, 2, 3, 4, 5, 6, 7, 9, 8),
 (0, 1, 2, 3, 4, 5, 6, 8, 7, 9),
 (0, 1, 2, 3, 4, 5, 6, 8, 9, 7),
 (0, 1, 2, 3, 4, 5, 6, 9, 7, 8),
 (0, 1, 2, 3, 4, 5, 6, 9, 8, 7),
 (0, 1, 2, 3, 4, 5, 7, 6, 8, 9),
 (0, 1, 2, 3, 4, 5, 7, 6, 9, 8),
 (0, 1, 2, 3, 4, 5, 7, 8, 6, 9),
 (0, 1, 2, 3, 4, 5, 7, 8, 9, 6),
 (0, 1, 2, 3, 4, 5, 7, 9, 6, 8),
 (0, 1, 2, 3, 4, 5, 7, 9, 8, 6),
 (0, 1, 2, 3, 4, 5, 8, 6, 7, 9),
 (0, 1, 2, 3, 4, 5, 8, 6, 9, 7),
 (0, 1, 2, 3, 4, 5, 8, 7, 6, 9),
 (0, 1, 2, 3, 4, 5, 8, 7, 9, 6),
 (0, 1, 2, 3, 4, 5, 8, 9, 6, 7),
 (0, 1, 2, 3, 4, 5, 8, 9, 7, 6),
 (0, 1, 2, 3, 4, 5, 9, 6, 7, 8),
 (0, 1, 2, 3, 4, 5, 9, 6, 8, 7)]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;iters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;izip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;iters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;iterable_to_int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [15]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pandigital_substring_divisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;substring_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;divisors&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Given n unique digits and specified substring &lt;/span&gt;
&lt;span class="sd"&gt;    size of m, a list of n-m+1 divisors are expected&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;subs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable_to_int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;substring_size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;m&lt;/span&gt;, subs, divisors)):
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [13]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pandigital_substring_divisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[13]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;(1, 4, 0, 6, 3, 5, 7, 2, 8, 9)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [11]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;pandigital_nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pandigital_substring_divisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt; &lt;span class="n"&gt;pandigital_nums&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[11]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[(1, 4, 0, 6, 3, 5, 7, 2, 8, 9),
 (1, 4, 3, 0, 9, 5, 2, 8, 6, 7),
 (1, 4, 6, 0, 3, 5, 7, 2, 8, 9),
 (4, 1, 0, 6, 3, 5, 7, 2, 8, 9),
 (4, 1, 3, 0, 9, 5, 2, 8, 6, 7),
 (4, 1, 6, 0, 3, 5, 7, 2, 8, 9)]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [12]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable_to_int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pandigital_nums&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[12]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;16695334890&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-2:-Search-space-pruning-with-divisibility-tests"&gt;Version 2: Search space pruning with divisibility tests&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-43-sub-string-divisibility/#Version-2:-Search-space-pruning-with-divisibility-tests"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Coming Soon&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>ipython</category><category>project-euler</category><category>python</category><guid>http://louistiao.me/posts/project-euler/problem-43-sub-string-divisibility/</guid><pubDate>Fri, 17 Apr 2015 12:52:15 GMT</pubDate></item><item><title>Project Euler Problem 44: Pentagon numbers</title><link>http://louistiao.me/posts/project-euler/problem-44-pentagon-numbers/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Pentagonal numbers are generated by the formula, $P_n=\frac{n(3n−1)}{2}$. The first ten pentagonal numbers are:&lt;/p&gt;
&lt;p&gt;1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...&lt;/p&gt;
&lt;p&gt;It can be seen that $P_4 + P_7 = 22 + 70 = 92 = P_8$. However, their difference, $70 − 22 = 48$, is not pentagonal.&lt;/p&gt;
&lt;p&gt;Find the pair of pentagonal numbers, $P_j$ and $P_k$, for which their sum and difference are pentagonal and $D = |P_k − P_j|$ is minimised; what is the value of $D$?&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum_diff_polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
            &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
            &lt;span class="c1"&gt;# we already know `p+q=i` is s-gonal &lt;/span&gt;
            &lt;span class="c1"&gt;# since `i` must be; just need to check &lt;/span&gt;
            &lt;span class="c1"&gt;# that `p` and `p-q` are as well&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;    
        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum_diff_polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[4]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;(7042750, 1560090)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [13]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum_diff_polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;  
        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [14]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum_diff_polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [15]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[15]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;(7042750, 1560090)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [16]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum_diff_polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [17]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[17]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;(21, 15)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [18]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[18]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;(171, 105)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [19]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [25]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[25]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[1,
 3,
 6,
 10,
 15,
 21,
 28,
 36,
 45,
 55,
 66,
 78,
 91,
 105,
 120,
 136,
 153,
 171,
 190,
 210,
 231,
 253,
 276,
 300,
 325]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="TODO:-Prove-minimality-of-$|-P_k---P_j-|$"&gt;TODO: Prove minimality of $| P_k - P_j |$&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-44-pentagon-numbers/#TODO:-Prove-minimality-of-%24%7C-P_k---P_j-%7C%24"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;If we have $k$ such that $P_k$ is triangular and there is only one $j 

&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>ipython</category><category>project-euler</category><category>python</category><guid>http://louistiao.me/posts/project-euler/problem-44-pentagon-numbers/</guid><pubDate>Wed, 08 Apr 2015 03:54:47 GMT</pubDate></item><item><title>Project Euler Problem 45: Triangular, pentagonal, and hexagonal</title><link>http://louistiao.me/posts/project-euler/problem-45-triangular-pentagonal-and-hexagonal/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:&lt;/p&gt;
&lt;p&gt;Triangle&lt;/p&gt;
$$T_n = \frac{n(n+1)}{2} \\ 1, 3, 6, 10, 15, \dotsc$$&lt;p&gt;Pentagonal&lt;/p&gt;
$$P_n = \frac{n(3n−1)}{2} \\ 1, 5, 12, 22, 35, \dotsc$$&lt;p&gt;Hexagonal&lt;/p&gt;
$$H_n = n(2n−1) \\ 1, 6, 15, 28, 45, \dotsc$$&lt;p&gt;It can be verified that $T_{285} = P_{165} = H_{143} = 40755$.&lt;/p&gt;
&lt;p&gt;Find the next triangle number that is also pentagonal and hexagonal.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-1:-Brute-force"&gt;Version 1: Brute force&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-45-triangular-pentagonal-and-hexagonal/#Version-1:-Brute-force"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;argmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;argmin_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;argmin_&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;argmin_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;argmin_&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[3]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[67, 1, 15, 23, 62, 30, 60, 11, 33, 66, 77, 21, 4, 25, 27]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;argmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[4]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;1&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[7]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[8]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[1, 3, 6, 10, 15, 21, 28, 36, 45, 55]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [9]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[9]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [10]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [11]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;polygonal_iters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [12]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[12]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[1, 7, 18, 34, 55, 81, 112, 148, 189, 235]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [13]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;polygonal_iters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [14]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;polygonal_iters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [15]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygonal_iters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;argmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[15]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;3&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;all_equals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [17]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;polygonal_combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s_lst&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;iters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygonal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s_lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;all_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;amin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;amin&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;amin&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [31]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygonal_combinations&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[31]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[1, 40755, 1533776805, 57722156241751]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [21]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;polygonal_combinations&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;124&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [22]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[22]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;1&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The number 1225 is hecticositetragonal ($s=124$), hexacontagonal ($s=60$), icosienneagonal ($s=29$), hexagonal, square, and triangular.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [9]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [18]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;polygonal_combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s_lst&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s_lst&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;increm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s_lst&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;all_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;amin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;increm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;amin&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;s_lst&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;amin&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;amin&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;increm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;amin&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [19]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;polygonal_combinations&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [20]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[20]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;1&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [21]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[21]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;40755&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [22]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[22]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;1533776805&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>ipython</category><category>project-euler</category><category>python</category><guid>http://louistiao.me/posts/project-euler/problem-45-triangular-pentagonal-and-hexagonal/</guid><pubDate>Sun, 05 Apr 2015 14:53:16 GMT</pubDate></item><item><title>Project Euler Problem 46: Goldbach's other conjecture</title><link>http://louistiao.me/posts/project-euler/problem-46-goldbachs-other-conjecture/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.&lt;/p&gt;
$$
9 = 7 + 2×1^2 \\
15 = 7 + 2×2^2 \\
21 = 3 + 2×3^2 \\
25 = 7 + 2×3^2 \\
27 = 19 + 2×2^2 \\
33 = 31 + 2×1^2
$$&lt;p&gt;It turns out that the conjecture was false.&lt;/p&gt;
&lt;p&gt;What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-1:-Brute-force"&gt;Version 1: Brute force&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-46-goldbachs-other-conjecture/#Version-1:-Brute-force"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Formally stated, Goldbach's Other Conjecture says that for all odd composite numbers $n$ can be expressed as&lt;/p&gt;
$$
n = 2k^2 + p
$$&lt;p&gt;for some integer $k$ and prime number $p$. Let&lt;/p&gt;
$$
S_n = \{ n - 2k^2 : k = 1, 2, \dotsc, \lfloor \sqrt{\frac{n}{2}} \rfloor \}
$$&lt;p&gt;If any element $n - 2k^2$ of $S_n$ is prime, then we call $k$ a &lt;em&gt;witness&lt;/em&gt; to Goldbach's Other Conjecture. Let&lt;/p&gt;
&lt;p&gt;Then our algorithm searches for the smallest $n$ such that $P_n \cap S_n = \emptyset$, providing a counterexample to Goldbach's Other Conjecture.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/project-euler/problem-46-goldbachs-other-conjecture/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>ipython</category><category>project-euler</category><category>python</category><guid>http://louistiao.me/posts/project-euler/problem-46-goldbachs-other-conjecture/</guid><pubDate>Sun, 05 Apr 2015 10:56:26 GMT</pubDate></item><item><title>Project Euler Problem 47: Distinct primes factors</title><link>http://louistiao.me/posts/project-euler/problem-47-distinct-primes-factors/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The first two consecutive numbers to have two distinct prime factors are:&lt;/p&gt;
$$
14 = 2 × 7 \\
15 = 3 × 5
$$&lt;p&gt;The first three consecutive numbers to have three distinct prime factors are:&lt;/p&gt;
$$
644 = 2² × 7 × 23 \\
645 = 3 × 5 × 43 \\
646 = 2 × 17 × 19.
$$&lt;p&gt;Find the first four consecutive integers to have four distinct prime factors. What is the first of these numbers?&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-1:-Fun-times-with-Itertools"&gt;Version 1: Fun times with Itertools&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-47-distinct-primes-factors/#Version-1:-Fun-times-with-Itertools"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;First let's load up the prime factorization function we implemented earlier. Recall that this function returns a &lt;code&gt;Counter&lt;/code&gt; with the prime factor as the key, and its exponent as the value.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;load_ext&lt;/span&gt; autoreload
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;autoreload&lt;/span&gt; 2
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;The autoreload extension is already loaded. To reload it, use:
  %reload_ext autoreload
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [37]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;common.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prime_factors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [38]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;izip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Define an $n$-wise iterator over an iterator, inspired by the implementation of &lt;code&gt;pairwise&lt;/code&gt; in the &lt;a href="https://docs.python.org/2/library/itertools.html#recipes"&gt;Itertools recipes&lt;/a&gt;. It get $n$ iterators for the iterable, advances the $i$th iterator by $i$, and zips them back together.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [40]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;iters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;izip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;iters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;See some example calls below.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [41]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[41]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[(0, 1, 2, 3, 4, 5, 6, 7, 8), (1, 2, 3, 4, 5, 6, 7, 8, 9)]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [42]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[42]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[(0, 1, 2, 3),
 (1, 2, 3, 4),
 (2, 3, 4, 5),
 (3, 4, 5, 6),
 (4, 5, 6, 7),
 (5, 6, 7, 8),
 (6, 7, 8, 9)]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now we can define our function, which (lazily) evaluates the prime factors of all integers greater than 1 and iterates over them $n$-wise (can be thought of as a sliding window of size $n$.) We use &lt;code&gt;len&lt;/code&gt; to count the number of distinct factors (since the factors are returned as a &lt;code&gt;Counter&lt;/code&gt;) and return the window if the numer of distinct prime factors of all numbers in the window is equal to $m$.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [63]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consecutive_distinct_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    The first consecutive n numbers &lt;/span&gt;
&lt;span class="sd"&gt;    to have m distinct prime factors&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prime_factors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [102]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;consecutive_distinct_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[102]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;(Counter({2: 1, 7: 1}), Counter({3: 1, 5: 1}))&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We could modify the loop in the method to return the first number from the window, rather than the prime factors of all the numbers in the window, but this makes our implementation unecessarily long and messy. Also, the prime factorizations actually yield more information, and while we could return both, we can also just uniquely determine the multiple from the prime factors.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [103]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# recall Python's built-in pow function&lt;/span&gt;
&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[103]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;27&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [90]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prime_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[90]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;Counter({2: 3, 3: 1})&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [104]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# recall that map can be applied &lt;/span&gt;
&lt;span class="c1"&gt;# to a variable number of lists, &lt;/span&gt;
&lt;span class="c1"&gt;# i.e. map(func, (a0, a1, ...), (b0, b1, ...)) -&amp;gt; [func(a0, b0), func(a1, b1), ...]&lt;/span&gt;
&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[104]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[8, 3]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Define the &lt;code&gt;prod&lt;/code&gt; function, which is analogous to Python's built-in &lt;code&gt;sum&lt;/code&gt; function.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [106]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;prod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;By convention, $x^0 = 1$ for all $x$ and $0! = 1$&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [107]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[107]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;1&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [108]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# calculate 6!&lt;/span&gt;
&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[108]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;720&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [109]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[109]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;24&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [110]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Evaluate $2^3 \cdot 3$&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [113]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[113]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;24&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now we can get the actual number, rather than the prime factorization.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [99]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consecutive_distinct_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[99]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[14, 15]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [100]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consecutive_distinct_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[100]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[644, 645, 646]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [101]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consecutive_distinct_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[101]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[134043, 134044, 134045, 134046]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The answer is 134043&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>ipython</category><category>project-euler</category><category>python</category><guid>http://louistiao.me/posts/project-euler/problem-47-distinct-primes-factors/</guid><pubDate>Sun, 05 Apr 2015 07:25:33 GMT</pubDate></item><item><title>Project Euler Problem 48: Self powers</title><link>http://louistiao.me/posts/project-euler/problem-48-self-powers/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Project-Euler---Problem-48"&gt;Project Euler - Problem 48&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-48-self-powers/#Project-Euler---Problem-48"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The series, $1^1 + 2^2 + 3^3 + ... + 10^{10} = 10405071317$.&lt;/p&gt;
&lt;p&gt;Find the last ten digits of the series, $1^1 + 2^2 + 3^3 + ... + 1000^{1000}$.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-1:-The-obvious-way"&gt;Version 1: The obvious way&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-48-self-powers/#Version-1:-The-obvious-way"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [31]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[31]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;9110846700L&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This leaves much to be desired since we have to compute a integer with at least $10^{3000}$ digits only to truncate off $10^{3000} - 10^{10} = 10^{10} (10^{2990} - 1)$ digits. Note that in most other languages such as Java, we would have had to resort to some library like &lt;code&gt;BigInteger&lt;/code&gt; to perform this computation. In Python, all numbers are represented by a (theoretically) infinite number of bits:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Integers (int)&lt;/p&gt;
&lt;p&gt;These represent numbers in an unlimited range, subject to available (virtual) memory only. For the purpose of shift and mask operations, a binary representation is assumed, and negative numbers are represented in a variant of 2’s complement which gives the illusion of an infinite string of sign bits extending to the left.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/reference/datamodel.html"&gt;https://docs.python.org/3/reference/datamodel.html&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-2:-Some-simple-modulo-arithmetic"&gt;Version 2: Some simple modulo arithmetic&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-48-self-powers/#Version-2:-Some-simple-modulo-arithmetic"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We're asked to find $1^1 + 2^2 + 3^3 + ... + 1000^{1000} \mod 10^{10}$. Note that
$$a + b \mod n = (a \mod n) + (b \mod n)$$
and that
$$a \cdot b \mod n = (a \mod n) \cdot (b \mod n)$$
so we can implement modulo &lt;code&gt;sum&lt;/code&gt; and &lt;code&gt;prod&lt;/code&gt; functions.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [21]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prod_mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;"Multiply all nums modulo m"&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;m&lt;/span&gt;, map(lambda n: n%m, nums))  
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [22]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt;

&lt;span class="n"&gt;pow_mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;prod_mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [23]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="n"&gt;pow_mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[23]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;3&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [27]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="n"&gt;sum_mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;m&lt;/span&gt;, map(lambda n: n%m, nums))
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [28]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="n"&gt;sum_mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pow_mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[28]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;9110846700&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This way, we never let the result of any intermediate addition or multiplication exceed $10^{10}-1$.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>ipython</category><category>project-euler</category><category>python</category><guid>http://louistiao.me/posts/project-euler/problem-48-self-powers/</guid><pubDate>Fri, 03 Apr 2015 03:36:17 GMT</pubDate></item><item><title>Project Euler Problem 9: Special Pythagorean triplet</title><link>http://louistiao.me/posts/project-euler/problem-9-special-pythagorean-triplet/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Project-Euler---Problem-9"&gt;Project Euler - Problem 9&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-9-special-pythagorean-triplet/#Project-Euler---Problem-9"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;A Pythagorean triplet is a set of three natural numbers, $a 

&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
\begin{equation}
a^2 + b^2 = c^2
\end{equation}
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;For example, $3^2 + 4^2 = 9 + 16 = 25 = 5^2$.&lt;/p&gt;
&lt;p&gt;There exists exactly one Pythagorean triplet for which $a + b + c = 1000$.
Find the product $abc$.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Remark"&gt;Remark&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-9-special-pythagorean-triplet/#Remark"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is a fairly straighforward constraint satisfaction problem (CSP) and is perhaps most easily solved in a CSP modelling language such as MiniZinc. However, to employ such tools would be to defeat the very purpose of the exercise, which is to give us practice with implementation.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-1:-The-Obvious"&gt;Version 1: The Obvious&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-9-special-pythagorean-triplet/#Version-1:-The-Obvious"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [43]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;pair_sum_eq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [45]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pair_sum_eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[45]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[(5, 16), (6, 15), (7, 14), (8, 13), (9, 12), (10, 11)]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Note that $3a pair_sum_eq. Within the innermost loop, the $a, b, c$ now satisfy the constraints $a 

&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [66]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pythagorean_triplet_sum_eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pair_sum_eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [68]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pythagorean_triplet_sum_eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[68]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[(200, 375, 425)]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [52]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;prod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [53]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pythagorean_triplet_sum_eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[53]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;31875000&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-2:-Euclid's-Formula"&gt;Version 2: Euclid's Formula&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-9-special-pythagorean-triplet/#Version-2:-Euclid's-Formula"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;em&gt;Coming Soon&lt;/em&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>ipython</category><category>project-euler</category><category>python</category><guid>http://louistiao.me/posts/project-euler/problem-9-special-pythagorean-triplet/</guid><pubDate>Fri, 03 Apr 2015 03:35:54 GMT</pubDate></item><item><title>Project Euler Problem 12: Highly divisible triangular number</title><link>http://louistiao.me/posts/project-euler/problem-12-highly-divisible-triangular-number/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Project-Euler---Problem-12"&gt;Project Euler - Problem 12&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-12-highly-divisible-triangular-number/#Project-Euler---Problem-12"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:&lt;/p&gt;
&lt;p&gt;1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...&lt;/p&gt;
&lt;p&gt;Let us list the factors of the first seven triangle numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that 28 is the first triangle number to have over five divisors.&lt;/p&gt;
&lt;p&gt;What is the value of the first triangle number to have over five hundred divisors?&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-1:-Brute-force"&gt;Version 1: Brute force&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-12-highly-divisible-triangular-number/#Version-1:-Brute-force"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;"The nth triangle number"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[2]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;28&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[3]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[1, 3, 6, 10, 15, 21, 28, 36, 45, 55]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We already implemented a function that finds all prime factors of a number which may be useful if we are required to optimize. For now, let's use something simple like this. After all,&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Premature optimization is the root of all evil&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Donald Knuth&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[5]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;{1: [1],
 3: [1, 3],
 6: [1, 2, 3, 6],
 10: [1, 2, 5, 10],
 15: [1, 3, 5, 15],
 21: [1, 3, 7, 21],
 28: [1, 2, 4, 7, 14, 28]}&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Function composition is going to be useful for this problem. Of course, Python is not a functional programming language, but we can nonetheless hack together something that closely resembles it.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;compose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Here is a "semi-quine" to test our function composition.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="s1"&gt;'should be 169'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[7]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;169&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[8]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[[1],
 [1, 3],
 [1, 2, 3, 6],
 [1, 2, 5, 10],
 [1, 3, 5, 15],
 [1, 3, 7, 21],
 [1, 2, 4, 7, 14, 28],
 [1, 2, 3, 4, 6, 9, 12, 18, 36],
 [1, 3, 5, 9, 15, 45],
 [1, 5, 11, 55]]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now we're ready to go&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [9]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [10]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;First, a quick composition with the generator version of &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt;/&lt;code&gt;islice&lt;/code&gt; instead of the usual &lt;code&gt;range&lt;/code&gt;, since we're going to apply the higher-order function &lt;code&gt;first&lt;/code&gt; later, instead of &lt;code&gt;islice&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [11]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[11]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[1, 2, 4, 4, 4, 4, 6, 9, 6, 4]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We can see that the first triangle number to have over 5 divisors has 6 divisors, but we don't know what the trianble number is. We need to do a bit more work to retain that information in our function composition pipeline.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [12]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[12]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;6&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Excellent. Now we have a pair of the triangle number, and its number of factors.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [13]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[13]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[(1, 1),
 (3, 2),
 (6, 4),
 (10, 4),
 (15, 4),
 (21, 4),
 (28, 6),
 (36, 9),
 (45, 6),
 (55, 4)]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Instead of using &lt;code&gt;islice&lt;/code&gt;, we just need to use our higher-order function &lt;code&gt;first&lt;/code&gt; with a predicate. What does this function do? The name speaks for itself, return the first item in an iterable that satisfies the predicate.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [14]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[14]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;(28, 6)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Hold on to your hats...&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [15]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# (lambda l: l[1] &amp;gt;= 5*10**2, imap(compose(lambda n: (n, compose(len, factors)(n)), triangle_num), count(1)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-2:-The-Fundamental-Theorem-of-Arithmetic"&gt;Version 2: The Fundamental Theorem of Arithmetic&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-12-highly-divisible-triangular-number/#Version-2:-The-Fundamental-Theorem-of-Arithmetic"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;By the &lt;a href="http://en.wikipedia.org/wiki/Fundamental_theorem_of_arithmetic"&gt;fundamental theorem of arithmetic&lt;/a&gt;, every integer $n$ has a unique prime factorization, say, $n = \prod_{i} p_i^{e_i}$ and it follows that $n$ has $\prod_{i} (e_i+1)$ factors. To see this, observe that each prime factor $p_i$ of $n$ can be used 0 to $e_i$ times to form a factor of $n$. This is where our &lt;code&gt;prime_factors&lt;/code&gt; function comes in handy.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [16]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;load_ext&lt;/span&gt; autoreload
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;autoreload&lt;/span&gt; 2
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [17]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;common.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prime_factors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [18]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;prime_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[18]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;Counter({2: 2, 7: 1})&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;First, let's implement &lt;code&gt;prod&lt;/code&gt;, which is the multiplication analog to &lt;code&gt;sum&lt;/code&gt;, with the help of the built-in &lt;code&gt;reduce&lt;/code&gt; function.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [19]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;prod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [20]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[20]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;1&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now, we need a way to add 1 to each item of the &lt;code&gt;Counter&lt;/code&gt; which represents an integer's prime factors. We could do this for example&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [21]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[21]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;Counter({2: 3, 7: 2})&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;But that's not very Pythonic, nor 
does it utilize the power of Counter
very well. Let's do it right - by 
making use of the fact that Counter
objects supports addition.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [22]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[22]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;Counter({2: 1, 7: 1})&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [23]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[23]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;Counter({2: 3, 7: 2})&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now we're ready to implement &lt;code&gt;count_factors&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [24]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prime_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [25]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;count_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[25]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;25&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [26]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[26]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;(28, 6)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [27]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[27]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;(25200, 90)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [28]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[28]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;(76576500, 576)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-3:-Pretty-basic-number-theory"&gt;Version 3: Pretty basic number theory&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-12-highly-divisible-triangular-number/#Version-3:-Pretty-basic-number-theory"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Denote the $n$th triangle by $T_n$ and recall that $T_n = \frac{n(n+1)}{2}$.&lt;/p&gt;
&lt;p&gt;Observe that $n$ and $n+1$ are coprime. That is, $\gcd{(n, n+1)} = 1$. Note that one of $n, n+1$ must be even and that in general $\gcd{(a, 2b)} = 1 \Rightarrow \gcd{(a, b)} = 1$ for integers $a, b$.&lt;/p&gt;
&lt;p&gt;Say $n = 2k$. Then $T_n = \frac{n(n+1)}{2} = k(2k+1)$. Then, $\gcd{(n, n+1)} = 1 \Rightarrow \gcd{(\frac{n}{2}, n+1)} = \gcd{(k, 2k+1)} = 1$ - the only common positive factor of $k$ and $2k+1$ is $1$, so we need only find their respective factors and combine them together.&lt;/p&gt;
&lt;p&gt;The same goes for the case where $n = 2k+1$. We have $T_n = \frac{n(n+1)}{2} =(k+1)(2k+1)$ and $\gcd{(n, n+1)} = 1\Rightarrow \gcd{(n, \frac{n+1}{2})} = \gcd{(2k+1, k+1)}=1$, so we factorize $2k+1$ and $k+1$.&lt;/p&gt;
&lt;p&gt;Now that we have decomposed the problem to factorizing 2 integers, we essentially have the overlapping subproblem of factorizing $2k+1$. So we can even use dynamic programming to further optimize this solution.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [35]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;T_n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;T_n_factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;count_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;T_n_factors&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;T_n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T_n_factors&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;76576500 576
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [32]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count_factors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n_even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n_odd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;triangle_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;n_even&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;n_odd&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;76576500
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>ipython</category><category>project-euler</category><category>python</category><guid>http://louistiao.me/posts/project-euler/problem-12-highly-divisible-triangular-number/</guid><pubDate>Fri, 03 Apr 2015 03:35:54 GMT</pubDate></item><item><title>Project Euler Problem 8: Largest product in a series</title><link>http://louistiao.me/posts/project-euler/problem-8-largest-product-in-a-series/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Project-Euler---Problem-8"&gt;Project Euler - Problem 8&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-8-largest-product-in-a-series/#Project-Euler---Problem-8"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Version-1---Sliding-Window"&gt;Version 1 - Sliding Window&lt;a class="anchor-link" href="http://louistiao.me/posts/project-euler/problem-8-largest-product-in-a-series/#Version-1---Sliding-Window"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Let's first set a variable to the number&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [42]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
&lt;span class="mi"&gt;73167176531330624919225119674426574742355349194934&lt;/span&gt;\
&lt;span class="mi"&gt;96983520312774506326239578318016984801869478851843&lt;/span&gt;\
&lt;span class="mi"&gt;85861560789112949495459501737958331952853208805511&lt;/span&gt;\
&lt;span class="mi"&gt;12540698747158523863050715693290963295227443043557&lt;/span&gt;\
&lt;span class="mi"&gt;66896648950445244523161731856403098711121722383113&lt;/span&gt;\
&lt;span class="mi"&gt;62229893423380308135336276614282806444486645238749&lt;/span&gt;\
&lt;span class="mi"&gt;30358907296290491560440772390713810515859307960866&lt;/span&gt;\
&lt;span class="mi"&gt;70172427121883998797908792274921901699720888093776&lt;/span&gt;\
&lt;span class="mi"&gt;65727333001053367881220235421809751254540594752243&lt;/span&gt;\
&lt;span class="mi"&gt;52584907711670556013604839586446706324415722155397&lt;/span&gt;\
&lt;span class="mi"&gt;53697817977846174064955149290862569321978468622482&lt;/span&gt;\
&lt;span class="mi"&gt;83972241375657056057490261407972968652414535100474&lt;/span&gt;\
&lt;span class="mi"&gt;82166370484403199890008895243450658541227588666881&lt;/span&gt;\
&lt;span class="mi"&gt;16427171479924442928230863465674813919123162824586&lt;/span&gt;\
&lt;span class="mi"&gt;17866458359124566529476545682848912883142607690042&lt;/span&gt;\
&lt;span class="mi"&gt;24219022671055626321111109370544217506941658960408&lt;/span&gt;\
&lt;span class="mo"&gt;071&lt;/span&gt;&lt;span class="mi"&gt;98403850962455444362981230987879927244284909188&lt;/span&gt;\
&lt;span class="mi"&gt;84580156166097919133875499200524063689912560717606&lt;/span&gt;\
&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="mi"&gt;886116467109405077541002256983155200055935729725&lt;/span&gt;\
&lt;span class="mi"&gt;71636269561882670428252483600823257530420752963450&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [43]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[43]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450L&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now let's form an array with elements representing the digits of the number.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [40]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;num_to_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This solution is kind of hacky and relies on specific characteristics of these Python built-in functions. Ideally, we'd build an array from the integer itself without all this type casting. But this will do for now.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [18]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;num_to_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[18]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[7,
 3,
 1,
 6,
 7,
 1,
 7,
 6,
 5,
 3,
 1,
 3,
 3,
 0,
 6,
 2,
 4,
 9,
 1,
 9,
 2,
 2,
 5,
 1,
 1,
 9,
 6,
 7,
 4,
 4,
 2,
 6,
 5,
 7,
 4,
 7,
 4,
 2,
 3,
 5,
 5,
 3,
 4,
 9,
 1,
 9,
 4,
 9,
 3,
 4,
 9,
 6,
 9,
 8,
 3,
 5,
 2,
 0,
 3,
 1,
 2,
 7,
 7,
 4,
 5,
 0,
 6,
 3,
 2,
 6,
 2,
 3,
 9,
 5,
 7,
 8,
 3,
 1,
 8,
 0,
 1,
 6,
 9,
 8,
 4,
 8,
 0,
 1,
 8,
 6,
 9,
 4,
 7,
 8,
 8,
 5,
 1,
 8,
 4,
 3,
 8,
 5,
 8,
 6,
 1,
 5,
 6,
 0,
 7,
 8,
 9,
 1,
 1,
 2,
 9,
 4,
 9,
 4,
 9,
 5,
 4,
 5,
 9,
 5,
 0,
 1,
 7,
 3,
 7,
 9,
 5,
 8,
 3,
 3,
 1,
 9,
 5,
 2,
 8,
 5,
 3,
 2,
 0,
 8,
 8,
 0,
 5,
 5,
 1,
 1,
 1,
 2,
 5,
 4,
 0,
 6,
 9,
 8,
 7,
 4,
 7,
 1,
 5,
 8,
 5,
 2,
 3,
 8,
 6,
 3,
 0,
 5,
 0,
 7,
 1,
 5,
 6,
 9,
 3,
 2,
 9,
 0,
 9,
 6,
 3,
 2,
 9,
 5,
 2,
 2,
 7,
 4,
 4,
 3,
 0,
 4,
 3,
 5,
 5,
 7,
 6,
 6,
 8,
 9,
 6,
 6,
 4,
 8,
 9,
 5,
 0,
 4,
 4,
 5,
 2,
 4,
 4,
 5,
 2,
 3,
 1,
 6,
 1,
 7,
 3,
 1,
 8,
 5,
 6,
 4,
 0,
 3,
 0,
 9,
 8,
 7,
 1,
 1,
 1,
 2,
 1,
 7,
 2,
 2,
 3,
 8,
 3,
 1,
 1,
 3,
 6,
 2,
 2,
 2,
 9,
 8,
 9,
 3,
 4,
 2,
 3,
 3,
 8,
 0,
 3,
 0,
 8,
 1,
 3,
 5,
 3,
 3,
 6,
 2,
 7,
 6,
 6,
 1,
 4,
 2,
 8,
 2,
 8,
 0,
 6,
 4,
 4,
 4,
 4,
 8,
 6,
 6,
 4,
 5,
 2,
 3,
 8,
 7,
 4,
 9,
 3,
 0,
 3,
 5,
 8,
 9,
 0,
 7,
 2,
 9,
 6,
 2,
 9,
 0,
 4,
 9,
 1,
 5,
 6,
 0,
 4,
 4,
 0,
 7,
 7,
 2,
 3,
 9,
 0,
 7,
 1,
 3,
 8,
 1,
 0,
 5,
 1,
 5,
 8,
 5,
 9,
 3,
 0,
 7,
 9,
 6,
 0,
 8,
 6,
 6,
 7,
 0,
 1,
 7,
 2,
 4,
 2,
 7,
 1,
 2,
 1,
 8,
 8,
 3,
 9,
 9,
 8,
 7,
 9,
 7,
 9,
 0,
 8,
 7,
 9,
 2,
 2,
 7,
 4,
 9,
 2,
 1,
 9,
 0,
 1,
 6,
 9,
 9,
 7,
 2,
 0,
 8,
 8,
 8,
 0,
 9,
 3,
 7,
 7,
 6,
 6,
 5,
 7,
 2,
 7,
 3,
 3,
 3,
 0,
 0,
 1,
 0,
 5,
 3,
 3,
 6,
 7,
 8,
 8,
 1,
 2,
 2,
 0,
 2,
 3,
 5,
 4,
 2,
 1,
 8,
 0,
 9,
 7,
 5,
 1,
 2,
 5,
 4,
 5,
 4,
 0,
 5,
 9,
 4,
 7,
 5,
 2,
 2,
 4,
 3,
 5,
 2,
 5,
 8,
 4,
 9,
 0,
 7,
 7,
 1,
 1,
 6,
 7,
 0,
 5,
 5,
 6,
 0,
 1,
 3,
 6,
 0,
 4,
 8,
 3,
 9,
 5,
 8,
 6,
 4,
 4,
 6,
 7,
 0,
 6,
 3,
 2,
 4,
 4,
 1,
 5,
 7,
 2,
 2,
 1,
 5,
 5,
 3,
 9,
 7,
 5,
 3,
 6,
 9,
 7,
 8,
 1,
 7,
 9,
 7,
 7,
 8,
 4,
 6,
 1,
 7,
 4,
 0,
 6,
 4,
 9,
 5,
 5,
 1,
 4,
 9,
 2,
 9,
 0,
 8,
 6,
 2,
 5,
 6,
 9,
 3,
 2,
 1,
 9,
 7,
 8,
 4,
 6,
 8,
 6,
 2,
 2,
 4,
 8,
 2,
 8,
 3,
 9,
 7,
 2,
 2,
 4,
 1,
 3,
 7,
 5,
 6,
 5,
 7,
 0,
 5,
 6,
 0,
 5,
 7,
 4,
 9,
 0,
 2,
 6,
 1,
 4,
 0,
 7,
 9,
 7,
 2,
 9,
 6,
 8,
 6,
 5,
 2,
 4,
 1,
 4,
 5,
 3,
 5,
 1,
 0,
 0,
 4,
 7,
 4,
 8,
 2,
 1,
 6,
 6,
 3,
 7,
 0,
 4,
 8,
 4,
 4,
 0,
 3,
 1,
 9,
 9,
 8,
 9,
 0,
 0,
 0,
 8,
 8,
 9,
 5,
 2,
 4,
 3,
 4,
 5,
 0,
 6,
 5,
 8,
 5,
 4,
 1,
 2,
 2,
 7,
 5,
 8,
 8,
 6,
 6,
 6,
 8,
 8,
 1,
 1,
 6,
 4,
 2,
 7,
 1,
 7,
 1,
 4,
 7,
 9,
 9,
 2,
 4,
 4,
 4,
 2,
 9,
 2,
 8,
 2,
 3,
 0,
 8,
 6,
 3,
 4,
 6,
 5,
 6,
 7,
 4,
 8,
 1,
 3,
 9,
 1,
 9,
 1,
 2,
 3,
 1,
 6,
 2,
 8,
 2,
 4,
 5,
 8,
 6,
 1,
 7,
 8,
 6,
 6,
 4,
 5,
 8,
 3,
 5,
 9,
 1,
 2,
 4,
 5,
 6,
 6,
 5,
 2,
 9,
 4,
 7,
 6,
 5,
 4,
 5,
 6,
 8,
 2,
 8,
 4,
 8,
 9,
 1,
 2,
 8,
 8,
 3,
 1,
 4,
 2,
 6,
 0,
 7,
 6,
 9,
 0,
 0,
 4,
 2,
 2,
 4,
 2,
 1,
 9,
 0,
 2,
 2,
 6,
 7,
 1,
 0,
 5,
 5,
 6,
 2,
 6,
 3,
 2,
 1,
 1,
 1,
 1,
 1,
 0,
 9,
 3,
 7,
 0,
 5,
 4,
 4,
 2,
 1,
 7,
 5,
 0,
 6,
 9,
 4,
 1,
 6,
 5,
 8,
 9,
 6,
 0,
 4,
 0,
 8,
 0,
 7,
 1,
 9,
 8,
 4,
 0,
 3,
 8,
 5,
 0,
 9,
 6,
 2,
 4,
 5,
 5,
 4,
 4,
 4,
 3,
 6,
 2,
 9,
 8,
 1,
 2,
 3,
 0,
 9,
 8,
 7,
 8,
 7,
 9,
 9,
 2,
 7,
 2,
 4,
 4,
 2,
 8,
 4,
 9,
 0,
 9,
 1,
 8,
 8,
 8,
 4,
 5,
 8,
 0,
 1,
 5,
 6,
 1,
 6,
 6,
 0,
 9,
 7,
 9,
 1,
 9,
 1,
 3,
 3,
 8,
 7,
 5,
 4,
 9,
 9,
 2,
 0,
 0,
 5,
 2,
 4,
 0,
 6,
 3,
 6,
 8,
 9,
 9,
 1,
 2,
 5,
 6,
 0,
 7,
 1,
 7,
 6,
 0,
 6,
 0,
 5,
 8,
 8,
 6,
 1,
 1,
 6,
 4,
 6,
 7,
 1,
 0,
 9,
 4,
 0,
 5,
 0,
 7,
 7,
 5,
 4,
 1,
 0,
 0,
 2,
 2,
 5,
 6,
 9,
 8,
 3,
 1,
 5,
 5,
 2,
 0,
 0,
 0,
 5,
 5,
 9,
 3,
 5,
 7,
 2,
 9,
 7,
 2,
 5,
 7,
 1,
 6,
 3,
 6,
 2,
 6,
 9,
 5,
 6,
 1,
 8,
 8,
 2,
 6,
 7,
 0,
 4,
 2,
 8,
 2,
 5,
 2,
 4,
 8,
 3,
 6,
 0,
 0,
 8,
 2,
 3,
 2,
 5,
 7,
 5,
 3,
 0,
 4,
 2,
 0,
 7,
 5,
 2,
 9,
 6,
 3,
 4,
 5,
 0]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now we need to iterate over this array with some kind of sliding "window" of length $L=13$.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [38]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Example: Partial function application and creating a list of odd numbers&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [45]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;pairwise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pairwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [44]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_to_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[44]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[[7, 3, 1, 6, 7, 1, 7, 6, 5, 3, 1, 3, 3],
 [3, 1, 6, 7, 1, 7, 6, 5, 3, 1, 3, 3, 0],
 [1, 6, 7, 1, 7, 6, 5, 3, 1, 3, 3, 0, 6],
 [6, 7, 1, 7, 6, 5, 3, 1, 3, 3, 0, 6, 2],
 [7, 1, 7, 6, 5, 3, 1, 3, 3, 0, 6, 2, 4],
 [1, 7, 6, 5, 3, 1, 3, 3, 0, 6, 2, 4, 9],
 [7, 6, 5, 3, 1, 3, 3, 0, 6, 2, 4, 9, 1],
 [6, 5, 3, 1, 3, 3, 0, 6, 2, 4, 9, 1, 9],
 [5, 3, 1, 3, 3, 0, 6, 2, 4, 9, 1, 9, 2],
 [3, 1, 3, 3, 0, 6, 2, 4, 9, 1, 9, 2, 2],
 [1, 3, 3, 0, 6, 2, 4, 9, 1, 9, 2, 2, 5],
 [3, 3, 0, 6, 2, 4, 9, 1, 9, 2, 2, 5, 1],
 [3, 0, 6, 2, 4, 9, 1, 9, 2, 2, 5, 1, 1],
 [0, 6, 2, 4, 9, 1, 9, 2, 2, 5, 1, 1, 9],
 [6, 2, 4, 9, 1, 9, 2, 2, 5, 1, 1, 9, 6],
 [2, 4, 9, 1, 9, 2, 2, 5, 1, 1, 9, 6, 7],
 [4, 9, 1, 9, 2, 2, 5, 1, 1, 9, 6, 7, 4],
 [9, 1, 9, 2, 2, 5, 1, 1, 9, 6, 7, 4, 4],
 [1, 9, 2, 2, 5, 1, 1, 9, 6, 7, 4, 4, 2],
 [9, 2, 2, 5, 1, 1, 9, 6, 7, 4, 4, 2, 6],
 [2, 2, 5, 1, 1, 9, 6, 7, 4, 4, 2, 6, 5],
 [2, 5, 1, 1, 9, 6, 7, 4, 4, 2, 6, 5, 7],
 [5, 1, 1, 9, 6, 7, 4, 4, 2, 6, 5, 7, 4],
 [1, 1, 9, 6, 7, 4, 4, 2, 6, 5, 7, 4, 7],
 [1, 9, 6, 7, 4, 4, 2, 6, 5, 7, 4, 7, 4],
 [9, 6, 7, 4, 4, 2, 6, 5, 7, 4, 7, 4, 2],
 [6, 7, 4, 4, 2, 6, 5, 7, 4, 7, 4, 2, 3],
 [7, 4, 4, 2, 6, 5, 7, 4, 7, 4, 2, 3, 5],
 [4, 4, 2, 6, 5, 7, 4, 7, 4, 2, 3, 5, 5],
 [4, 2, 6, 5, 7, 4, 7, 4, 2, 3, 5, 5, 3],
 [2, 6, 5, 7, 4, 7, 4, 2, 3, 5, 5, 3, 4],
 [6, 5, 7, 4, 7, 4, 2, 3, 5, 5, 3, 4, 9],
 [5, 7, 4, 7, 4, 2, 3, 5, 5, 3, 4, 9, 1],
 [7, 4, 7, 4, 2, 3, 5, 5, 3, 4, 9, 1, 9],
 [4, 7, 4, 2, 3, 5, 5, 3, 4, 9, 1, 9, 4],
 [7, 4, 2, 3, 5, 5, 3, 4, 9, 1, 9, 4, 9],
 [4, 2, 3, 5, 5, 3, 4, 9, 1, 9, 4, 9, 3],
 [2, 3, 5, 5, 3, 4, 9, 1, 9, 4, 9, 3, 4],
 [3, 5, 5, 3, 4, 9, 1, 9, 4, 9, 3, 4, 9],
 [5, 5, 3, 4, 9, 1, 9, 4, 9, 3, 4, 9, 6],
 [5, 3, 4, 9, 1, 9, 4, 9, 3, 4, 9, 6, 9],
 [3, 4, 9, 1, 9, 4, 9, 3, 4, 9, 6, 9, 8],
 [4, 9, 1, 9, 4, 9, 3, 4, 9, 6, 9, 8, 3],
 [9, 1, 9, 4, 9, 3, 4, 9, 6, 9, 8, 3, 5],
 [1, 9, 4, 9, 3, 4, 9, 6, 9, 8, 3, 5, 2],
 [9, 4, 9, 3, 4, 9, 6, 9, 8, 3, 5, 2, 0],
 [4, 9, 3, 4, 9, 6, 9, 8, 3, 5, 2, 0, 3],
 [9, 3, 4, 9, 6, 9, 8, 3, 5, 2, 0, 3, 1],
 [3, 4, 9, 6, 9, 8, 3, 5, 2, 0, 3, 1, 2],
 [4, 9, 6, 9, 8, 3, 5, 2, 0, 3, 1, 2, 7],
 [9, 6, 9, 8, 3, 5, 2, 0, 3, 1, 2, 7, 7],
 [6, 9, 8, 3, 5, 2, 0, 3, 1, 2, 7, 7, 4],
 [9, 8, 3, 5, 2, 0, 3, 1, 2, 7, 7, 4, 5],
 [8, 3, 5, 2, 0, 3, 1, 2, 7, 7, 4, 5, 0],
 [3, 5, 2, 0, 3, 1, 2, 7, 7, 4, 5, 0, 6],
 [5, 2, 0, 3, 1, 2, 7, 7, 4, 5, 0, 6, 3],
 [2, 0, 3, 1, 2, 7, 7, 4, 5, 0, 6, 3, 2],
 [0, 3, 1, 2, 7, 7, 4, 5, 0, 6, 3, 2, 6],
 [3, 1, 2, 7, 7, 4, 5, 0, 6, 3, 2, 6, 2],
 [1, 2, 7, 7, 4, 5, 0, 6, 3, 2, 6, 2, 3],
 [2, 7, 7, 4, 5, 0, 6, 3, 2, 6, 2, 3, 9],
 [7, 7, 4, 5, 0, 6, 3, 2, 6, 2, 3, 9, 5],
 [7, 4, 5, 0, 6, 3, 2, 6, 2, 3, 9, 5, 7],
 [4, 5, 0, 6, 3, 2, 6, 2, 3, 9, 5, 7, 8],
 [5, 0, 6, 3, 2, 6, 2, 3, 9, 5, 7, 8, 3],
 [0, 6, 3, 2, 6, 2, 3, 9, 5, 7, 8, 3, 1],
 [6, 3, 2, 6, 2, 3, 9, 5, 7, 8, 3, 1, 8],
 [3, 2, 6, 2, 3, 9, 5, 7, 8, 3, 1, 8, 0],
 [2, 6, 2, 3, 9, 5, 7, 8, 3, 1, 8, 0, 1],
 [6, 2, 3, 9, 5, 7, 8, 3, 1, 8, 0, 1, 6],
 [2, 3, 9, 5, 7, 8, 3, 1, 8, 0, 1, 6, 9],
 [3, 9, 5, 7, 8, 3, 1, 8, 0, 1, 6, 9, 8],
 [9, 5, 7, 8, 3, 1, 8, 0, 1, 6, 9, 8, 4],
 [5, 7, 8, 3, 1, 8, 0, 1, 6, 9, 8, 4, 8],
 [7, 8, 3, 1, 8, 0, 1, 6, 9, 8, 4, 8, 0],
 [8, 3, 1, 8, 0, 1, 6, 9, 8, 4, 8, 0, 1],
 [3, 1, 8, 0, 1, 6, 9, 8, 4, 8, 0, 1, 8],
 [1, 8, 0, 1, 6, 9, 8, 4, 8, 0, 1, 8, 6],
 [8, 0, 1, 6, 9, 8, 4, 8, 0, 1, 8, 6, 9],
 [0, 1, 6, 9, 8, 4, 8, 0, 1, 8, 6, 9, 4],
 [1, 6, 9, 8, 4, 8, 0, 1, 8, 6, 9, 4, 7],
 [6, 9, 8, 4, 8, 0, 1, 8, 6, 9, 4, 7, 8],
 [9, 8, 4, 8, 0, 1, 8, 6, 9, 4, 7, 8, 8],
 [8, 4, 8, 0, 1, 8, 6, 9, 4, 7, 8, 8, 5],
 [4, 8, 0, 1, 8, 6, 9, 4, 7, 8, 8, 5, 1],
 [8, 0, 1, 8, 6, 9, 4, 7, 8, 8, 5, 1, 8],
 [0, 1, 8, 6, 9, 4, 7, 8, 8, 5, 1, 8, 4],
 [1, 8, 6, 9, 4, 7, 8, 8, 5, 1, 8, 4, 3],
 [8, 6, 9, 4, 7, 8, 8, 5, 1, 8, 4, 3, 8],
 [6, 9, 4, 7, 8, 8, 5, 1, 8, 4, 3, 8, 5],
 [9, 4, 7, 8, 8, 5, 1, 8, 4, 3, 8, 5, 8],
 [4, 7, 8, 8, 5, 1, 8, 4, 3, 8, 5, 8, 6],
 [7, 8, 8, 5, 1, 8, 4, 3, 8, 5, 8, 6, 1],
 [8, 8, 5, 1, 8, 4, 3, 8, 5, 8, 6, 1, 5],
 [8, 5, 1, 8, 4, 3, 8, 5, 8, 6, 1, 5, 6],
 [5, 1, 8, 4, 3, 8, 5, 8, 6, 1, 5, 6, 0],
 [1, 8, 4, 3, 8, 5, 8, 6, 1, 5, 6, 0, 7],
 [8, 4, 3, 8, 5, 8, 6, 1, 5, 6, 0, 7, 8],
 [4, 3, 8, 5, 8, 6, 1, 5, 6, 0, 7, 8, 9],
 [3, 8, 5, 8, 6, 1, 5, 6, 0, 7, 8, 9, 1],
 [8, 5, 8, 6, 1, 5, 6, 0, 7, 8, 9, 1, 1],
 [5, 8, 6, 1, 5, 6, 0, 7, 8, 9, 1, 1, 2],
 [8, 6, 1, 5, 6, 0, 7, 8, 9, 1, 1, 2, 9],
 [6, 1, 5, 6, 0, 7, 8, 9, 1, 1, 2, 9, 4],
 [1, 5, 6, 0, 7, 8, 9, 1, 1, 2, 9, 4, 9],
 [5, 6, 0, 7, 8, 9, 1, 1, 2, 9, 4, 9, 4],
 [6, 0, 7, 8, 9, 1, 1, 2, 9, 4, 9, 4, 9],
 [0, 7, 8, 9, 1, 1, 2, 9, 4, 9, 4, 9, 5],
 [7, 8, 9, 1, 1, 2, 9, 4, 9, 4, 9, 5, 4],
 [8, 9, 1, 1, 2, 9, 4, 9, 4, 9, 5, 4, 5],
 [9, 1, 1, 2, 9, 4, 9, 4, 9, 5, 4, 5, 9],
 [1, 1, 2, 9, 4, 9, 4, 9, 5, 4, 5, 9, 5],
 [1, 2, 9, 4, 9, 4, 9, 5, 4, 5, 9, 5, 0],
 [2, 9, 4, 9, 4, 9, 5, 4, 5, 9, 5, 0, 1],
 [9, 4, 9, 4, 9, 5, 4, 5, 9, 5, 0, 1, 7],
 [4, 9, 4, 9, 5, 4, 5, 9, 5, 0, 1, 7, 3],
 [9, 4, 9, 5, 4, 5, 9, 5, 0, 1, 7, 3, 7],
 [4, 9, 5, 4, 5, 9, 5, 0, 1, 7, 3, 7, 9],
 [9, 5, 4, 5, 9, 5, 0, 1, 7, 3, 7, 9, 5],
 [5, 4, 5, 9, 5, 0, 1, 7, 3, 7, 9, 5, 8],
 [4, 5, 9, 5, 0, 1, 7, 3, 7, 9, 5, 8, 3],
 [5, 9, 5, 0, 1, 7, 3, 7, 9, 5, 8, 3, 3],
 [9, 5, 0, 1, 7, 3, 7, 9, 5, 8, 3, 3, 1],
 [5, 0, 1, 7, 3, 7, 9, 5, 8, 3, 3, 1, 9],
 [0, 1, 7, 3, 7, 9, 5, 8, 3, 3, 1, 9, 5],
 [1, 7, 3, 7, 9, 5, 8, 3, 3, 1, 9, 5, 2],
 [7, 3, 7, 9, 5, 8, 3, 3, 1, 9, 5, 2, 8],
 [3, 7, 9, 5, 8, 3, 3, 1, 9, 5, 2, 8, 5],
 [7, 9, 5, 8, 3, 3, 1, 9, 5, 2, 8, 5, 3],
 [9, 5, 8, 3, 3, 1, 9, 5, 2, 8, 5, 3, 2],
 [5, 8, 3, 3, 1, 9, 5, 2, 8, 5, 3, 2, 0],
 [8, 3, 3, 1, 9, 5, 2, 8, 5, 3, 2, 0, 8],
 [3, 3, 1, 9, 5, 2, 8, 5, 3, 2, 0, 8, 8],
 [3, 1, 9, 5, 2, 8, 5, 3, 2, 0, 8, 8, 0],
 [1, 9, 5, 2, 8, 5, 3, 2, 0, 8, 8, 0, 5],
 [9, 5, 2, 8, 5, 3, 2, 0, 8, 8, 0, 5, 5],
 [5, 2, 8, 5, 3, 2, 0, 8, 8, 0, 5, 5, 1],
 [2, 8, 5, 3, 2, 0, 8, 8, 0, 5, 5, 1, 1],
 [8, 5, 3, 2, 0, 8, 8, 0, 5, 5, 1, 1, 1],
 [5, 3, 2, 0, 8, 8, 0, 5, 5, 1, 1, 1, 2],
 [3, 2, 0, 8, 8, 0, 5, 5, 1, 1, 1, 2, 5],
 [2, 0, 8, 8, 0, 5, 5, 1, 1, 1, 2, 5, 4],
 [0, 8, 8, 0, 5, 5, 1, 1, 1, 2, 5, 4, 0],
 [8, 8, 0, 5, 5, 1, 1, 1, 2, 5, 4, 0, 6],
 [8, 0, 5, 5, 1, 1, 1, 2, 5, 4, 0, 6, 9],
 [0, 5, 5, 1, 1, 1, 2, 5, 4, 0, 6, 9, 8],
 [5, 5, 1, 1, 1, 2, 5, 4, 0, 6, 9, 8, 7],
 [5, 1, 1, 1, 2, 5, 4, 0, 6, 9, 8, 7, 4],
 [1, 1, 1, 2, 5, 4, 0, 6, 9, 8, 7, 4, 7],
 [1, 1, 2, 5, 4, 0, 6, 9, 8, 7, 4, 7, 1],
 [1, 2, 5, 4, 0, 6, 9, 8, 7, 4, 7, 1, 5],
 [2, 5, 4, 0, 6, 9, 8, 7, 4, 7, 1, 5, 8],
 [5, 4, 0, 6, 9, 8, 7, 4, 7, 1, 5, 8, 5],
 [4, 0, 6, 9, 8, 7, 4, 7, 1, 5, 8, 5, 2],
 [0, 6, 9, 8, 7, 4, 7, 1, 5, 8, 5, 2, 3],
 [6, 9, 8, 7, 4, 7, 1, 5, 8, 5, 2, 3, 8],
 [9, 8, 7, 4, 7, 1, 5, 8, 5, 2, 3, 8, 6],
 [8, 7, 4, 7, 1, 5, 8, 5, 2, 3, 8, 6, 3],
 [7, 4, 7, 1, 5, 8, 5, 2, 3, 8, 6, 3, 0],
 [4, 7, 1, 5, 8, 5, 2, 3, 8, 6, 3, 0, 5],
 [7, 1, 5, 8, 5, 2, 3, 8, 6, 3, 0, 5, 0],
 [1, 5, 8, 5, 2, 3, 8, 6, 3, 0, 5, 0, 7],
 [5, 8, 5, 2, 3, 8, 6, 3, 0, 5, 0, 7, 1],
 [8, 5, 2, 3, 8, 6, 3, 0, 5, 0, 7, 1, 5],
 [5, 2, 3, 8, 6, 3, 0, 5, 0, 7, 1, 5, 6],
 [2, 3, 8, 6, 3, 0, 5, 0, 7, 1, 5, 6, 9],
 [3, 8, 6, 3, 0, 5, 0, 7, 1, 5, 6, 9, 3],
 [8, 6, 3, 0, 5, 0, 7, 1, 5, 6, 9, 3, 2],
 [6, 3, 0, 5, 0, 7, 1, 5, 6, 9, 3, 2, 9],
 [3, 0, 5, 0, 7, 1, 5, 6, 9, 3, 2, 9, 0],
 [0, 5, 0, 7, 1, 5, 6, 9, 3, 2, 9, 0, 9],
 [5, 0, 7, 1, 5, 6, 9, 3, 2, 9, 0, 9, 6],
 [0, 7, 1, 5, 6, 9, 3, 2, 9, 0, 9, 6, 3],
 [7, 1, 5, 6, 9, 3, 2, 9, 0, 9, 6, 3, 2],
 [1, 5, 6, 9, 3, 2, 9, 0, 9, 6, 3, 2, 9],
 [5, 6, 9, 3, 2, 9, 0, 9, 6, 3, 2, 9, 5],
 [6, 9, 3, 2, 9, 0, 9, 6, 3, 2, 9, 5, 2],
 [9, 3, 2, 9, 0, 9, 6, 3, 2, 9, 5, 2, 2],
 [3, 2, 9, 0, 9, 6, 3, 2, 9, 5, 2, 2, 7],
 [2, 9, 0, 9, 6, 3, 2, 9, 5, 2, 2, 7, 4],
 [9, 0, 9, 6, 3, 2, 9, 5, 2, 2, 7, 4, 4],
 [0, 9, 6, 3, 2, 9, 5, 2, 2, 7, 4, 4, 3],
 [9, 6, 3, 2, 9, 5, 2, 2, 7, 4, 4, 3, 0],
 [6, 3, 2, 9, 5, 2, 2, 7, 4, 4, 3, 0, 4],
 [3, 2, 9, 5, 2, 2, 7, 4, 4, 3, 0, 4, 3],
 [2, 9, 5, 2, 2, 7, 4, 4, 3, 0, 4, 3, 5],
 [9, 5, 2, 2, 7, 4, 4, 3, 0, 4, 3, 5, 5],
 [5, 2, 2, 7, 4, 4, 3, 0, 4, 3, 5, 5, 7],
 [2, 2, 7, 4, 4, 3, 0, 4, 3, 5, 5, 7, 6],
 [2, 7, 4, 4, 3, 0, 4, 3, 5, 5, 7, 6, 6],
 [7, 4, 4, 3, 0, 4, 3, 5, 5, 7, 6, 6, 8],
 [4, 4, 3, 0, 4, 3, 5, 5, 7, 6, 6, 8, 9],
 [4, 3, 0, 4, 3, 5, 5, 7, 6, 6, 8, 9, 6],
 [3, 0, 4, 3, 5, 5, 7, 6, 6, 8, 9, 6, 6],
 [0, 4, 3, 5, 5, 7, 6, 6, 8, 9, 6, 6, 4],
 [4, 3, 5, 5, 7, 6, 6, 8, 9, 6, 6, 4, 8],
 [3, 5, 5, 7, 6, 6, 8, 9, 6, 6, 4, 8, 9],
 [5, 5, 7, 6, 6, 8, 9, 6, 6, 4, 8, 9, 5],
 [5, 7, 6, 6, 8, 9, 6, 6, 4, 8, 9, 5, 0],
 [7, 6, 6, 8, 9, 6, 6, 4, 8, 9, 5, 0, 4],
 [6, 6, 8, 9, 6, 6, 4, 8, 9, 5, 0, 4, 4],
 [6, 8, 9, 6, 6, 4, 8, 9, 5, 0, 4, 4, 5],
 [8, 9, 6, 6, 4, 8, 9, 5, 0, 4, 4, 5, 2],
 [9, 6, 6, 4, 8, 9, 5, 0, 4, 4, 5, 2, 4],
 [6, 6, 4, 8, 9, 5, 0, 4, 4, 5, 2, 4, 4],
 [6, 4, 8, 9, 5, 0, 4, 4, 5, 2, 4, 4, 5],
 [4, 8, 9, 5, 0, 4, 4, 5, 2, 4, 4, 5, 2],
 [8, 9, 5, 0, 4, 4, 5, 2, 4, 4, 5, 2, 3],
 [9, 5, 0, 4, 4, 5, 2, 4, 4, 5, 2, 3, 1],
 [5, 0, 4, 4, 5, 2, 4, 4, 5, 2, 3, 1, 6],
 [0, 4, 4, 5, 2, 4, 4, 5, 2, 3, 1, 6, 1],
 [4, 4, 5, 2, 4, 4, 5, 2, 3, 1, 6, 1, 7],
 [4, 5, 2, 4, 4, 5, 2, 3, 1, 6, 1, 7, 3],
 [5, 2, 4, 4, 5, 2, 3, 1, 6, 1, 7, 3, 1],
 [2, 4, 4, 5, 2, 3, 1, 6, 1, 7, 3, 1, 8],
 [4, 4, 5, 2, 3, 1, 6, 1, 7, 3, 1, 8, 5],
 [4, 5, 2, 3, 1, 6, 1, 7, 3, 1, 8, 5, 6],
 [5, 2, 3, 1, 6, 1, 7, 3, 1, 8, 5, 6, 4],
 [2, 3, 1, 6, 1, 7, 3, 1, 8, 5, 6, 4, 0],
 [3, 1, 6, 1, 7, 3, 1, 8, 5, 6, 4, 0, 3],
 [1, 6, 1, 7, 3, 1, 8, 5, 6, 4, 0, 3, 0],
 [6, 1, 7, 3, 1, 8, 5, 6, 4, 0, 3, 0, 9],
 [1, 7, 3, 1, 8, 5, 6, 4, 0, 3, 0, 9, 8],
 [7, 3, 1, 8, 5, 6, 4, 0, 3, 0, 9, 8, 7],
 [3, 1, 8, 5, 6, 4, 0, 3, 0, 9, 8, 7, 1],
 [1, 8, 5, 6, 4, 0, 3, 0, 9, 8, 7, 1, 1],
 [8, 5, 6, 4, 0, 3, 0, 9, 8, 7, 1, 1, 1],
 [5, 6, 4, 0, 3, 0, 9, 8, 7, 1, 1, 1, 2],
 [6, 4, 0, 3, 0, 9, 8, 7, 1, 1, 1, 2, 1],
 [4, 0, 3, 0, 9, 8, 7, 1, 1, 1, 2, 1, 7],
 [0, 3, 0, 9, 8, 7, 1, 1, 1, 2, 1, 7, 2],
 [3, 0, 9, 8, 7, 1, 1, 1, 2, 1, 7, 2, 2],
 [0, 9, 8, 7, 1, 1, 1, 2, 1, 7, 2, 2, 3],
 [9, 8, 7, 1, 1, 1, 2, 1, 7, 2, 2, 3, 8],
 [8, 7, 1, 1, 1, 2, 1, 7, 2, 2, 3, 8, 3],
 [7, 1, 1, 1, 2, 1, 7, 2, 2, 3, 8, 3, 1],
 [1, 1, 1, 2, 1, 7, 2, 2, 3, 8, 3, 1, 1],
 [1, 1, 2, 1, 7, 2, 2, 3, 8, 3, 1, 1, 3],
 [1, 2, 1, 7, 2, 2, 3, 8, 3, 1, 1, 3, 6],
 [2, 1, 7, 2, 2, 3, 8, 3, 1, 1, 3, 6, 2],
 [1, 7, 2, 2, 3, 8, 3, 1, 1, 3, 6, 2, 2],
 [7, 2, 2, 3, 8, 3, 1, 1, 3, 6, 2, 2, 2],
 [2, 2, 3, 8, 3, 1, 1, 3, 6, 2, 2, 2, 9],
 [2, 3, 8, 3, 1, 1, 3, 6, 2, 2, 2, 9, 8],
 [3, 8, 3, 1, 1, 3, 6, 2, 2, 2, 9, 8, 9],
 [8, 3, 1, 1, 3, 6, 2, 2, 2, 9, 8, 9, 3],
 [3, 1, 1, 3, 6, 2, 2, 2, 9, 8, 9, 3, 4],
 [1, 1, 3, 6, 2, 2, 2, 9, 8, 9, 3, 4, 2],
 [1, 3, 6, 2, 2, 2, 9, 8, 9, 3, 4, 2, 3],
 [3, 6, 2, 2, 2, 9, 8, 9, 3, 4, 2, 3, 3],
 [6, 2, 2, 2, 9, 8, 9, 3, 4, 2, 3, 3, 8],
 [2, 2, 2, 9, 8, 9, 3, 4, 2, 3, 3, 8, 0],
 [2, 2, 9, 8, 9, 3, 4, 2, 3, 3, 8, 0, 3],
 [2, 9, 8, 9, 3, 4, 2, 3, 3, 8, 0, 3, 0],
 [9, 8, 9, 3, 4, 2, 3, 3, 8, 0, 3, 0, 8],
 [8, 9, 3, 4, 2, 3, 3, 8, 0, 3, 0, 8, 1],
 [9, 3, 4, 2, 3, 3, 8, 0, 3, 0, 8, 1, 3],
 [3, 4, 2, 3, 3, 8, 0, 3, 0, 8, 1, 3, 5],
 [4, 2, 3, 3, 8, 0, 3, 0, 8, 1, 3, 5, 3],
 [2, 3, 3, 8, 0, 3, 0, 8, 1, 3, 5, 3, 3],
 [3, 3, 8, 0, 3, 0, 8, 1, 3, 5, 3, 3, 6],
 [3, 8, 0, 3, 0, 8, 1, 3, 5, 3, 3, 6, 2],
 [8, 0, 3, 0, 8, 1, 3, 5, 3, 3, 6, 2, 7],
 [0, 3, 0, 8, 1, 3, 5, 3, 3, 6, 2, 7, 6],
 [3, 0, 8, 1, 3, 5, 3, 3, 6, 2, 7, 6, 6],
 [0, 8, 1, 3, 5, 3, 3, 6, 2, 7, 6, 6, 1],
 [8, 1, 3, 5, 3, 3, 6, 2, 7, 6, 6, 1, 4],
 [1, 3, 5, 3, 3, 6, 2, 7, 6, 6, 1, 4, 2],
 [3, 5, 3, 3, 6, 2, 7, 6, 6, 1, 4, 2, 8],
 [5, 3, 3, 6, 2, 7, 6, 6, 1, 4, 2, 8, 2],
 [3, 3, 6, 2, 7, 6, 6, 1, 4, 2, 8, 2, 8],
 [3, 6, 2, 7, 6, 6, 1, 4, 2, 8, 2, 8, 0],
 [6, 2, 7, 6, 6, 1, 4, 2, 8, 2, 8, 0, 6],
 [2, 7, 6, 6, 1, 4, 2, 8, 2, 8, 0, 6, 4],
 [7, 6, 6, 1, 4, 2, 8, 2, 8, 0, 6, 4, 4],
 [6, 6, 1, 4, 2, 8, 2, 8, 0, 6, 4, 4, 4],
 [6, 1, 4, 2, 8, 2, 8, 0, 6, 4, 4, 4, 4],
 [1, 4, 2, 8, 2, 8, 0, 6, 4, 4, 4, 4, 8],
 [4, 2, 8, 2, 8, 0, 6, 4, 4, 4, 4, 8, 6],
 [2, 8, 2, 8, 0, 6, 4, 4, 4, 4, 8, 6, 6],
 [8, 2, 8, 0, 6, 4, 4, 4, 4, 8, 6, 6, 4],
 [2, 8, 0, 6, 4, 4, 4, 4, 8, 6, 6, 4, 5],
 [8, 0, 6, 4, 4, 4, 4, 8, 6, 6, 4, 5, 2],
 [0, 6, 4, 4, 4, 4, 8, 6, 6, 4, 5, 2, 3],
 [6, 4, 4, 4, 4, 8, 6, 6, 4, 5, 2, 3, 8],
 [4, 4, 4, 4, 8, 6, 6, 4, 5, 2, 3, 8, 7],
 [4, 4, 4, 8, 6, 6, 4, 5, 2, 3, 8, 7, 4],
 [4, 4, 8, 6, 6, 4, 5, 2, 3, 8, 7, 4, 9],
 [4, 8, 6, 6, 4, 5, 2, 3, 8, 7, 4, 9, 3],
 [8, 6, 6, 4, 5, 2, 3, 8, 7, 4, 9, 3, 0],
 [6, 6, 4, 5, 2, 3, 8, 7, 4, 9, 3, 0, 3],
 [6, 4, 5, 2, 3, 8, 7, 4, 9, 3, 0, 3, 5],
 [4, 5, 2, 3, 8, 7, 4, 9, 3, 0, 3, 5, 8],
 [5, 2, 3, 8, 7, 4, 9, 3, 0, 3, 5, 8, 9],
 [2, 3, 8, 7, 4, 9, 3, 0, 3, 5, 8, 9, 0],
 [3, 8, 7, 4, 9, 3, 0, 3, 5, 8, 9, 0, 7],
 [8, 7, 4, 9, 3, 0, 3, 5, 8, 9, 0, 7, 2],
 [7, 4, 9, 3, 0, 3, 5, 8, 9, 0, 7, 2, 9],
 [4, 9, 3, 0, 3, 5, 8, 9, 0, 7, 2, 9, 6],
 [9, 3, 0, 3, 5, 8, 9, 0, 7, 2, 9, 6, 2],
 [3, 0, 3, 5, 8, 9, 0, 7, 2, 9, 6, 2, 9],
 [0, 3, 5, 8, 9, 0, 7, 2, 9, 6, 2, 9, 0],
 [3, 5, 8, 9, 0, 7, 2, 9, 6, 2, 9, 0, 4],
 [5, 8, 9, 0, 7, 2, 9, 6, 2, 9, 0, 4, 9],
 [8, 9, 0, 7, 2, 9, 6, 2, 9, 0, 4, 9, 1],
 [9, 0, 7, 2, 9, 6, 2, 9, 0, 4, 9, 1, 5],
 [0, 7, 2, 9, 6, 2, 9, 0, 4, 9, 1, 5, 6],
 [7, 2, 9, 6, 2, 9, 0, 4, 9, 1, 5, 6, 0],
 [2, 9, 6, 2, 9, 0, 4, 9, 1, 5, 6, 0, 4],
 [9, 6, 2, 9, 0, 4, 9, 1, 5, 6, 0, 4, 4],
 [6, 2, 9, 0, 4, 9, 1, 5, 6, 0, 4, 4, 0],
 [2, 9, 0, 4, 9, 1, 5, 6, 0, 4, 4, 0, 7],
 [9, 0, 4, 9, 1, 5, 6, 0, 4, 4, 0, 7, 7],
 [0, 4, 9, 1, 5, 6, 0, 4, 4, 0, 7, 7, 2],
 [4, 9, 1, 5, 6, 0, 4, 4, 0, 7, 7, 2, 3],
 [9, 1, 5, 6, 0, 4, 4, 0, 7, 7, 2, 3, 9],
 [1, 5, 6, 0, 4, 4, 0, 7, 7, 2, 3, 9, 0],
 [5, 6, 0, 4, 4, 0, 7, 7, 2, 3, 9, 0, 7],
 [6, 0, 4, 4, 0, 7, 7, 2, 3, 9, 0, 7, 1],
 [0, 4, 4, 0, 7, 7, 2, 3, 9, 0, 7, 1, 3],
 [4, 4, 0, 7, 7, 2, 3, 9, 0, 7, 1, 3, 8],
 [4, 0, 7, 7, 2, 3, 9, 0, 7, 1, 3, 8, 1],
 [0, 7, 7, 2, 3, 9, 0, 7, 1, 3, 8, 1, 0],
 [7, 7, 2, 3, 9, 0, 7, 1, 3, 8, 1, 0, 5],
 [7, 2, 3, 9, 0, 7, 1, 3, 8, 1, 0, 5, 1],
 [2, 3, 9, 0, 7, 1, 3, 8, 1, 0, 5, 1, 5],
 [3, 9, 0, 7, 1, 3, 8, 1, 0, 5, 1, 5, 8],
 [9, 0, 7, 1, 3, 8, 1, 0, 5, 1, 5, 8, 5],
 [0, 7, 1, 3, 8, 1, 0, 5, 1, 5, 8, 5, 9],
 [7, 1, 3, 8, 1, 0, 5, 1, 5, 8, 5, 9, 3],
 [1, 3, 8, 1, 0, 5, 1, 5, 8, 5, 9, 3, 0],
 [3, 8, 1, 0, 5, 1, 5, 8, 5, 9, 3, 0, 7],
 [8, 1, 0, 5, 1, 5, 8, 5, 9, 3, 0, 7, 9],
 [1, 0, 5, 1, 5, 8, 5, 9, 3, 0, 7, 9, 6],
 [0, 5, 1, 5, 8, 5, 9, 3, 0, 7, 9, 6, 0],
 [5, 1, 5, 8, 5, 9, 3, 0, 7, 9, 6, 0, 8],
 [1, 5, 8, 5, 9, 3, 0, 7, 9, 6, 0, 8, 6],
 [5, 8, 5, 9, 3, 0, 7, 9, 6, 0, 8, 6, 6],
 [8, 5, 9, 3, 0, 7, 9, 6, 0, 8, 6, 6, 7],
 [5, 9, 3, 0, 7, 9, 6, 0, 8, 6, 6, 7, 0],
 [9, 3, 0, 7, 9, 6, 0, 8, 6, 6, 7, 0, 1],
 [3, 0, 7, 9, 6, 0, 8, 6, 6, 7, 0, 1, 7],
 [0, 7, 9, 6, 0, 8, 6, 6, 7, 0, 1, 7, 2],
 [7, 9, 6, 0, 8, 6, 6, 7, 0, 1, 7, 2, 4],
 [9, 6, 0, 8, 6, 6, 7, 0, 1, 7, 2, 4, 2],
 [6, 0, 8, 6, 6, 7, 0, 1, 7, 2, 4, 2, 7],
 [0, 8, 6, 6, 7, 0, 1, 7, 2, 4, 2, 7, 1],
 [8, 6, 6, 7, 0, 1, 7, 2, 4, 2, 7, 1, 2],
 [6, 6, 7, 0, 1, 7, 2, 4, 2, 7, 1, 2, 1],
 [6, 7, 0, 1, 7, 2, 4, 2, 7, 1, 2, 1, 8],
 [7, 0, 1, 7, 2, 4, 2, 7, 1, 2, 1, 8, 8],
 [0, 1, 7, 2, 4, 2, 7, 1, 2, 1, 8, 8, 3],
 [1, 7, 2, 4, 2, 7, 1, 2, 1, 8, 8, 3, 9],
 [7, 2, 4, 2, 7, 1, 2, 1, 8, 8, 3, 9, 9],
 [2, 4, 2, 7, 1, 2, 1, 8, 8, 3, 9, 9, 8],
 [4, 2, 7, 1, 2, 1, 8, 8, 3, 9, 9, 8, 7],
 [2, 7, 1, 2, 1, 8, 8, 3, 9, 9, 8, 7, 9],
 [7, 1, 2, 1, 8, 8, 3, 9, 9, 8, 7, 9, 7],
 [1, 2, 1, 8, 8, 3, 9, 9, 8, 7, 9, 7, 9],
 [2, 1, 8, 8, 3, 9, 9, 8, 7, 9, 7, 9, 0],
 [1, 8, 8, 3, 9, 9, 8, 7, 9, 7, 9, 0, 8],
 [8, 8, 3, 9, 9, 8, 7, 9, 7, 9, 0, 8, 7],
 [8, 3, 9, 9, 8, 7, 9, 7, 9, 0, 8, 7, 9],
 [3, 9, 9, 8, 7, 9, 7, 9, 0, 8, 7, 9, 2],
 [9, 9, 8, 7, 9, 7, 9, 0, 8, 7, 9, 2, 2],
 [9, 8, 7, 9, 7, 9, 0, 8, 7, 9, 2, 2, 7],
 [8, 7, 9, 7, 9, 0, 8, 7, 9, 2, 2, 7, 4],
 [7, 9, 7, 9, 0, 8, 7, 9, 2, 2, 7, 4, 9],
 [9, 7, 9, 0, 8, 7, 9, 2, 2, 7, 4, 9, 2],
 [7, 9, 0, 8, 7, 9, 2, 2, 7, 4, 9, 2, 1],
 [9, 0, 8, 7, 9, 2, 2, 7, 4, 9, 2, 1, 9],
 [0, 8, 7, 9, 2, 2, 7, 4, 9, 2, 1, 9, 0],
 [8, 7, 9, 2, 2, 7, 4, 9, 2, 1, 9, 0, 1],
 [7, 9, 2, 2, 7, 4, 9, 2, 1, 9, 0, 1, 6],
 [9, 2, 2, 7, 4, 9, 2, 1, 9, 0, 1, 6, 9],
 [2, 2, 7, 4, 9, 2, 1, 9, 0, 1, 6, 9, 9],
 [2, 7, 4, 9, 2, 1, 9, 0, 1, 6, 9, 9, 7],
 [7, 4, 9, 2, 1, 9, 0, 1, 6, 9, 9, 7, 2],
 [4, 9, 2, 1, 9, 0, 1, 6, 9, 9, 7, 2, 0],
 [9, 2, 1, 9, 0, 1, 6, 9, 9, 7, 2, 0, 8],
 [2, 1, 9, 0, 1, 6, 9, 9, 7, 2, 0, 8, 8],
 [1, 9, 0, 1, 6, 9, 9, 7, 2, 0, 8, 8, 8],
 [9, 0, 1, 6, 9, 9, 7, 2, 0, 8, 8, 8, 0],
 [0, 1, 6, 9, 9, 7, 2, 0, 8, 8, 8, 0, 9],
 [1, 6, 9, 9, 7, 2, 0, 8, 8, 8, 0, 9, 3],
 [6, 9, 9, 7, 2, 0, 8, 8, 8, 0, 9, 3, 7],
 [9, 9, 7, 2, 0, 8, 8, 8, 0, 9, 3, 7, 7],
 [9, 7, 2, 0, 8, 8, 8, 0, 9, 3, 7, 7, 6],
 [7, 2, 0, 8, 8, 8, 0, 9, 3, 7, 7, 6, 6],
 [2, 0, 8, 8, 8, 0, 9, 3, 7, 7, 6, 6, 5],
 [0, 8, 8, 8, 0, 9, 3, 7, 7, 6, 6, 5, 7],
 [8, 8, 8, 0, 9, 3, 7, 7, 6, 6, 5, 7, 2],
 [8, 8, 0, 9, 3, 7, 7, 6, 6, 5, 7, 2, 7],
 [8, 0, 9, 3, 7, 7, 6, 6, 5, 7, 2, 7, 3],
 [0, 9, 3, 7, 7, 6, 6, 5, 7, 2, 7, 3, 3],
 [9, 3, 7, 7, 6, 6, 5, 7, 2, 7, 3, 3, 3],
 [3, 7, 7, 6, 6, 5, 7, 2, 7, 3, 3, 3, 0],
 [7, 7, 6, 6, 5, 7, 2, 7, 3, 3, 3, 0, 0],
 [7, 6, 6, 5, 7, 2, 7, 3, 3, 3, 0, 0, 1],
 [6, 6, 5, 7, 2, 7, 3, 3, 3, 0, 0, 1, 0],
 [6, 5, 7, 2, 7, 3, 3, 3, 0, 0, 1, 0, 5],
 [5, 7, 2, 7, 3, 3, 3, 0, 0, 1, 0, 5, 3],
 [7, 2, 7, 3, 3, 3, 0, 0, 1, 0, 5, 3, 3],
 [2, 7, 3, 3, 3, 0, 0, 1, 0, 5, 3, 3, 6],
 [7, 3, 3, 3, 0, 0, 1, 0, 5, 3, 3, 6, 7],
 [3, 3, 3, 0, 0, 1, 0, 5, 3, 3, 6, 7, 8],
 [3, 3, 0, 0, 1, 0, 5, 3, 3, 6, 7, 8, 8],
 [3, 0, 0, 1, 0, 5, 3, 3, 6, 7, 8, 8, 1],
 [0, 0, 1, 0, 5, 3, 3, 6, 7, 8, 8, 1, 2],
 [0, 1, 0, 5, 3, 3, 6, 7, 8, 8, 1, 2, 2],
 [1, 0, 5, 3, 3, 6, 7, 8, 8, 1, 2, 2, 0],
 [0, 5, 3, 3, 6, 7, 8, 8, 1, 2, 2, 0, 2],
 [5, 3, 3, 6, 7, 8, 8, 1, 2, 2, 0, 2, 3],
 [3, 3, 6, 7, 8, 8, 1, 2, 2, 0, 2, 3, 5],
 [3, 6, 7, 8, 8, 1, 2, 2, 0, 2, 3, 5, 4],
 [6, 7, 8, 8, 1, 2, 2, 0, 2, 3, 5, 4, 2],
 [7, 8, 8, 1, 2, 2, 0, 2, 3, 5, 4, 2, 1],
 [8, 8, 1, 2, 2, 0, 2, 3, 5, 4, 2, 1, 8],
 [8, 1, 2, 2, 0, 2, 3, 5, 4, 2, 1, 8, 0],
 [1, 2, 2, 0, 2, 3, 5, 4, 2, 1, 8, 0, 9],
 [2, 2, 0, 2, 3, 5, 4, 2, 1, 8, 0, 9, 7],
 [2, 0, 2, 3, 5, 4, 2, 1, 8, 0, 9, 7, 5],
 [0, 2, 3, 5, 4, 2, 1, 8, 0, 9, 7, 5, 1],
 [2, 3, 5, 4, 2, 1, 8, 0, 9, 7, 5, 1, 2],
 [3, 5, 4, 2, 1, 8, 0, 9, 7, 5, 1, 2, 5],
 [5, 4, 2, 1, 8, 0, 9, 7, 5, 1, 2, 5, 4],
 [4, 2, 1, 8, 0, 9, 7, 5, 1, 2, 5, 4, 5],
 [2, 1, 8, 0, 9, 7, 5, 1, 2, 5, 4, 5, 4],
 [1, 8, 0, 9, 7, 5, 1, 2, 5, 4, 5, 4, 0],
 [8, 0, 9, 7, 5, 1, 2, 5, 4, 5, 4, 0, 5],
 [0, 9, 7, 5, 1, 2, 5, 4, 5, 4, 0, 5, 9],
 [9, 7, 5, 1, 2, 5, 4, 5, 4, 0, 5, 9, 4],
 [7, 5, 1, 2, 5, 4, 5, 4, 0, 5, 9, 4, 7],
 [5, 1, 2, 5, 4, 5, 4, 0, 5, 9, 4, 7, 5],
 [1, 2, 5, 4, 5, 4, 0, 5, 9, 4, 7, 5, 2],
 [2, 5, 4, 5, 4, 0, 5, 9, 4, 7, 5, 2, 2],
 [5, 4, 5, 4, 0, 5, 9, 4, 7, 5, 2, 2, 4],
 [4, 5, 4, 0, 5, 9, 4, 7, 5, 2, 2, 4, 3],
 [5, 4, 0, 5, 9, 4, 7, 5, 2, 2, 4, 3, 5],
 [4, 0, 5, 9, 4, 7, 5, 2, 2, 4, 3, 5, 2],
 [0, 5, 9, 4, 7, 5, 2, 2, 4, 3, 5, 2, 5],
 [5, 9, 4, 7, 5, 2, 2, 4, 3, 5, 2, 5, 8],
 [9, 4, 7, 5, 2, 2, 4, 3, 5, 2, 5, 8, 4],
 [4, 7, 5, 2, 2, 4, 3, 5, 2, 5, 8, 4, 9],
 [7, 5, 2, 2, 4, 3, 5, 2, 5, 8, 4, 9, 0],
 [5, 2, 2, 4, 3, 5, 2, 5, 8, 4, 9, 0, 7],
 [2, 2, 4, 3, 5, 2, 5, 8, 4, 9, 0, 7, 7],
 [2, 4, 3, 5, 2, 5, 8, 4, 9, 0, 7, 7, 1],
 [4, 3, 5, 2, 5, 8, 4, 9, 0, 7, 7, 1, 1],
 [3, 5, 2, 5, 8, 4, 9, 0, 7, 7, 1, 1, 6],
 [5, 2, 5, 8, 4, 9, 0, 7, 7, 1, 1, 6, 7],
 [2, 5, 8, 4, 9, 0, 7, 7, 1, 1, 6, 7, 0],
 [5, 8, 4, 9, 0, 7, 7, 1, 1, 6, 7, 0, 5],
 [8, 4, 9, 0, 7, 7, 1, 1, 6, 7, 0, 5, 5],
 [4, 9, 0, 7, 7, 1, 1, 6, 7, 0, 5, 5, 6],
 [9, 0, 7, 7, 1, 1, 6, 7, 0, 5, 5, 6, 0],
 [0, 7, 7, 1, 1, 6, 7, 0, 5, 5, 6, 0, 1],
 [7, 7, 1, 1, 6, 7, 0, 5, 5, 6, 0, 1, 3],
 [7, 1, 1, 6, 7, 0, 5, 5, 6, 0, 1, 3, 6],
 [1, 1, 6, 7, 0, 5, 5, 6, 0, 1, 3, 6, 0],
 [1, 6, 7, 0, 5, 5, 6, 0, 1, 3, 6, 0, 4],
 [6, 7, 0, 5, 5, 6, 0, 1, 3, 6, 0, 4, 8],
 [7, 0, 5, 5, 6, 0, 1, 3, 6, 0, 4, 8, 3],
 [0, 5, 5, 6, 0, 1, 3, 6, 0, 4, 8, 3, 9],
 [5, 5, 6, 0, 1, 3, 6, 0, 4, 8, 3, 9, 5],
 [5, 6, 0, 1, 3, 6, 0, 4, 8, 3, 9, 5, 8],
 [6, 0, 1, 3, 6, 0, 4, 8, 3, 9, 5, 8, 6],
 [0, 1, 3, 6, 0, 4, 8, 3, 9, 5, 8, 6, 4],
 [1, 3, 6, 0, 4, 8, 3, 9, 5, 8, 6, 4, 4],
 [3, 6, 0, 4, 8, 3, 9, 5, 8, 6, 4, 4, 6],
 [6, 0, 4, 8, 3, 9, 5, 8, 6, 4, 4, 6, 7],
 [0, 4, 8, 3, 9, 5, 8, 6, 4, 4, 6, 7, 0],
 [4, 8, 3, 9, 5, 8, 6, 4, 4, 6, 7, 0, 6],
 [8, 3, 9, 5, 8, 6, 4, 4, 6, 7, 0, 6, 3],
 [3, 9, 5, 8, 6, 4, 4, 6, 7, 0, 6, 3, 2],
 [9, 5, 8, 6, 4, 4, 6, 7, 0, 6, 3, 2, 4],
 [5, 8, 6, 4, 4, 6, 7, 0, 6, 3, 2, 4, 4],
 [8, 6, 4, 4, 6, 7, 0, 6, 3, 2, 4, 4, 1],
 [6, 4, 4, 6, 7, 0, 6, 3, 2, 4, 4, 1, 5],
 [4, 4, 6, 7, 0, 6, 3, 2, 4, 4, 1, 5, 7],
 [4, 6, 7, 0, 6, 3, 2, 4, 4, 1, 5, 7, 2],
 [6, 7, 0, 6, 3, 2, 4, 4, 1, 5, 7, 2, 2],
 [7, 0, 6, 3, 2, 4, 4, 1, 5, 7, 2, 2, 1],
 [0, 6, 3, 2, 4, 4, 1, 5, 7, 2, 2, 1, 5],
 [6, 3, 2, 4, 4, 1, 5, 7, 2, 2, 1, 5, 5],
 [3, 2, 4, 4, 1, 5, 7, 2, 2, 1, 5, 5, 3],
 [2, 4, 4, 1, 5, 7, 2, 2, 1, 5, 5, 3, 9],
 [4, 4, 1, 5, 7, 2, 2, 1, 5, 5, 3, 9, 7],
 [4, 1, 5, 7, 2, 2, 1, 5, 5, 3, 9, 7, 5],
 [1, 5, 7, 2, 2, 1, 5, 5, 3, 9, 7, 5, 3],
 [5, 7, 2, 2, 1, 5, 5, 3, 9, 7, 5, 3, 6],
 [7, 2, 2, 1, 5, 5, 3, 9, 7, 5, 3, 6, 9],
 [2, 2, 1, 5, 5, 3, 9, 7, 5, 3, 6, 9, 7],
 [2, 1, 5, 5, 3, 9, 7, 5, 3, 6, 9, 7, 8],
 [1, 5, 5, 3, 9, 7, 5, 3, 6, 9, 7, 8, 1],
 [5, 5, 3, 9, 7, 5, 3, 6, 9, 7, 8, 1, 7],
 [5, 3, 9, 7, 5, 3, 6, 9, 7, 8, 1, 7, 9],
 [3, 9, 7, 5, 3, 6, 9, 7, 8, 1, 7, 9, 7],
 [9, 7, 5, 3, 6, 9, 7, 8, 1, 7, 9, 7, 7],
 [7, 5, 3, 6, 9, 7, 8, 1, 7, 9, 7, 7, 8],
 [5, 3, 6, 9, 7, 8, 1, 7, 9, 7, 7, 8, 4],
 [3, 6, 9, 7, 8, 1, 7, 9, 7, 7, 8, 4, 6],
 [6, 9, 7, 8, 1, 7, 9, 7, 7, 8, 4, 6, 1],
 [9, 7, 8, 1, 7, 9, 7, 7, 8, 4, 6, 1, 7],
 [7, 8, 1, 7, 9, 7, 7, 8, 4, 6, 1, 7, 4],
 [8, 1, 7, 9, 7, 7, 8, 4, 6, 1, 7, 4, 0],
 [1, 7, 9, 7, 7, 8, 4, 6, 1, 7, 4, 0, 6],
 [7, 9, 7, 7, 8, 4, 6, 1, 7, 4, 0, 6, 4],
 [9, 7, 7, 8, 4, 6, 1, 7, 4, 0, 6, 4, 9],
 [7, 7, 8, 4, 6, 1, 7, 4, 0, 6, 4, 9, 5],
 [7, 8, 4, 6, 1, 7, 4, 0, 6, 4, 9, 5, 5],
 [8, 4, 6, 1, 7, 4, 0, 6, 4, 9, 5, 5, 1],
 [4, 6, 1, 7, 4, 0, 6, 4, 9, 5, 5, 1, 4],
 [6, 1, 7, 4, 0, 6, 4, 9, 5, 5, 1, 4, 9],
 [1, 7, 4, 0, 6, 4, 9, 5, 5, 1, 4, 9, 2],
 [7, 4, 0, 6, 4, 9, 5, 5, 1, 4, 9, 2, 9],
 [4, 0, 6, 4, 9, 5, 5, 1, 4, 9, 2, 9, 0],
 [0, 6, 4, 9, 5, 5, 1, 4, 9, 2, 9, 0, 8],
 [6, 4, 9, 5, 5, 1, 4, 9, 2, 9, 0, 8, 6],
 [4, 9, 5, 5, 1, 4, 9, 2, 9, 0, 8, 6, 2],
 [9, 5, 5, 1, 4, 9, 2, 9, 0, 8, 6, 2, 5],
 [5, 5, 1, 4, 9, 2, 9, 0, 8, 6, 2, 5, 6],
 [5, 1, 4, 9, 2, 9, 0, 8, 6, 2, 5, 6, 9],
 [1, 4, 9, 2, 9, 0, 8, 6, 2, 5, 6, 9, 3],
 [4, 9, 2, 9, 0, 8, 6, 2, 5, 6, 9, 3, 2],
 [9, 2, 9, 0, 8, 6, 2, 5, 6, 9, 3, 2, 1],
 [2, 9, 0, 8, 6, 2, 5, 6, 9, 3, 2, 1, 9],
 [9, 0, 8, 6, 2, 5, 6, 9, 3, 2, 1, 9, 7],
 [0, 8, 6, 2, 5, 6, 9, 3, 2, 1, 9, 7, 8],
 [8, 6, 2, 5, 6, 9, 3, 2, 1, 9, 7, 8, 4],
 [6, 2, 5, 6, 9, 3, 2, 1, 9, 7, 8, 4, 6],
 [2, 5, 6, 9, 3, 2, 1, 9, 7, 8, 4, 6, 8],
 [5, 6, 9, 3, 2, 1, 9, 7, 8, 4, 6, 8, 6],
 [6, 9, 3, 2, 1, 9, 7, 8, 4, 6, 8, 6, 2],
 [9, 3, 2, 1, 9, 7, 8, 4, 6, 8, 6, 2, 2],
 [3, 2, 1, 9, 7, 8, 4, 6, 8, 6, 2, 2, 4],
 [2, 1, 9, 7, 8, 4, 6, 8, 6, 2, 2, 4, 8],
 [1, 9, 7, 8, 4, 6, 8, 6, 2, 2, 4, 8, 2],
 [9, 7, 8, 4, 6, 8, 6, 2, 2, 4, 8, 2, 8],
 [7, 8, 4, 6, 8, 6, 2, 2, 4, 8, 2, 8, 3],
 [8, 4, 6, 8, 6, 2, 2, 4, 8, 2, 8, 3, 9],
 [4, 6, 8, 6, 2, 2, 4, 8, 2, 8, 3, 9, 7],
 [6, 8, 6, 2, 2, 4, 8, 2, 8, 3, 9, 7, 2],
 [8, 6, 2, 2, 4, 8, 2, 8, 3, 9, 7, 2, 2],
 [6, 2, 2, 4, 8, 2, 8, 3, 9, 7, 2, 2, 4],
 [2, 2, 4, 8, 2, 8, 3, 9, 7, 2, 2, 4, 1],
 [2, 4, 8, 2, 8, 3, 9, 7, 2, 2, 4, 1, 3],
 [4, 8, 2, 8, 3, 9, 7, 2, 2, 4, 1, 3, 7],
 [8, 2, 8, 3, 9, 7, 2, 2, 4, 1, 3, 7, 5],
 [2, 8, 3, 9, 7, 2, 2, 4, 1, 3, 7, 5, 6],
 [8, 3, 9, 7, 2, 2, 4, 1, 3, 7, 5, 6, 5],
 [3, 9, 7, 2, 2, 4, 1, 3, 7, 5, 6, 5, 7],
 [9, 7, 2, 2, 4, 1, 3, 7, 5, 6, 5, 7, 0],
 [7, 2, 2, 4, 1, 3, 7, 5, 6, 5, 7, 0, 5],
 [2, 2, 4, 1, 3, 7, 5, 6, 5, 7, 0, 5, 6],
 [2, 4, 1, 3, 7, 5, 6, 5, 7, 0, 5, 6, 0],
 [4, 1, 3, 7, 5, 6, 5, 7, 0, 5, 6, 0, 5],
 [1, 3, 7, 5, 6, 5, 7, 0, 5, 6, 0, 5, 7],
 [3, 7, 5, 6, 5, 7, 0, 5, 6, 0, 5, 7, 4],
 [7, 5, 6, 5, 7, 0, 5, 6, 0, 5, 7, 4, 9],
 [5, 6, 5, 7, 0, 5, 6, 0, 5, 7, 4, 9, 0],
 [6, 5, 7, 0, 5, 6, 0, 5, 7, 4, 9, 0, 2],
 [5, 7, 0, 5, 6, 0, 5, 7, 4, 9, 0, 2, 6],
 [7, 0, 5, 6, 0, 5, 7, 4, 9, 0, 2, 6, 1],
 [0, 5, 6, 0, 5, 7, 4, 9, 0, 2, 6, 1, 4],
 [5, 6, 0, 5, 7, 4, 9, 0, 2, 6, 1, 4, 0],
 [6, 0, 5, 7, 4, 9, 0, 2, 6, 1, 4, 0, 7],
 [0, 5, 7, 4, 9, 0, 2, 6, 1, 4, 0, 7, 9],
 [5, 7, 4, 9, 0, 2, 6, 1, 4, 0, 7, 9, 7],
 [7, 4, 9, 0, 2, 6, 1, 4, 0, 7, 9, 7, 2],
 [4, 9, 0, 2, 6, 1, 4, 0, 7, 9, 7, 2, 9],
 [9, 0, 2, 6, 1, 4, 0, 7, 9, 7, 2, 9, 6],
 [0, 2, 6, 1, 4, 0, 7, 9, 7, 2, 9, 6, 8],
 [2, 6, 1, 4, 0, 7, 9, 7, 2, 9, 6, 8, 6],
 [6, 1, 4, 0, 7, 9, 7, 2, 9, 6, 8, 6, 5],
 [1, 4, 0, 7, 9, 7, 2, 9, 6, 8, 6, 5, 2],
 [4, 0, 7, 9, 7, 2, 9, 6, 8, 6, 5, 2, 4],
 [0, 7, 9, 7, 2, 9, 6, 8, 6, 5, 2, 4, 1],
 [7, 9, 7, 2, 9, 6, 8, 6, 5, 2, 4, 1, 4],
 [9, 7, 2, 9, 6, 8, 6, 5, 2, 4, 1, 4, 5],
 [7, 2, 9, 6, 8, 6, 5, 2, 4, 1, 4, 5, 3],
 [2, 9, 6, 8, 6, 5, 2, 4, 1, 4, 5, 3, 5],
 [9, 6, 8, 6, 5, 2, 4, 1, 4, 5, 3, 5, 1],
 [6, 8, 6, 5, 2, 4, 1, 4, 5, 3, 5, 1, 0],
 [8, 6, 5, 2, 4, 1, 4, 5, 3, 5, 1, 0, 0],
 [6, 5, 2, 4, 1, 4, 5, 3, 5, 1, 0, 0, 4],
 [5, 2, 4, 1, 4, 5, 3, 5, 1, 0, 0, 4, 7],
 [2, 4, 1, 4, 5, 3, 5, 1, 0, 0, 4, 7, 4],
 [4, 1, 4, 5, 3, 5, 1, 0, 0, 4, 7, 4, 8],
 [1, 4, 5, 3, 5, 1, 0, 0, 4, 7, 4, 8, 2],
 [4, 5, 3, 5, 1, 0, 0, 4, 7, 4, 8, 2, 1],
 [5, 3, 5, 1, 0, 0, 4, 7, 4, 8, 2, 1, 6],
 [3, 5, 1, 0, 0, 4, 7, 4, 8, 2, 1, 6, 6],
 [5, 1, 0, 0, 4, 7, 4, 8, 2, 1, 6, 6, 3],
 [1, 0, 0, 4, 7, 4, 8, 2, 1, 6, 6, 3, 7],
 [0, 0, 4, 7, 4, 8, 2, 1, 6, 6, 3, 7, 0],
 [0, 4, 7, 4, 8, 2, 1, 6, 6, 3, 7, 0, 4],
 [4, 7, 4, 8, 2, 1, 6, 6, 3, 7, 0, 4, 8],
 [7, 4, 8, 2, 1, 6, 6, 3, 7, 0, 4, 8, 4],
 [4, 8, 2, 1, 6, 6, 3, 7, 0, 4, 8, 4, 4],
 [8, 2, 1, 6, 6, 3, 7, 0, 4, 8, 4, 4, 0],
 [2, 1, 6, 6, 3, 7, 0, 4, 8, 4, 4, 0, 3],
 [1, 6, 6, 3, 7, 0, 4, 8, 4, 4, 0, 3, 1],
 [6, 6, 3, 7, 0, 4, 8, 4, 4, 0, 3, 1, 9],
 [6, 3, 7, 0, 4, 8, 4, 4, 0, 3, 1, 9, 9],
 [3, 7, 0, 4, 8, 4, 4, 0, 3, 1, 9, 9, 8],
 [7, 0, 4, 8, 4, 4, 0, 3, 1, 9, 9, 8, 9],
 [0, 4, 8, 4, 4, 0, 3, 1, 9, 9, 8, 9, 0],
 [4, 8, 4, 4, 0, 3, 1, 9, 9, 8, 9, 0, 0],
 [8, 4, 4, 0, 3, 1, 9, 9, 8, 9, 0, 0, 0],
 [4, 4, 0, 3, 1, 9, 9, 8, 9, 0, 0, 0, 8],
 [4, 0, 3, 1, 9, 9, 8, 9, 0, 0, 0, 8, 8],
 [0, 3, 1, 9, 9, 8, 9, 0, 0, 0, 8, 8, 9],
 [3, 1, 9, 9, 8, 9, 0, 0, 0, 8, 8, 9, 5],
 [1, 9, 9, 8, 9, 0, 0, 0, 8, 8, 9, 5, 2],
 [9, 9, 8, 9, 0, 0, 0, 8, 8, 9, 5, 2, 4],
 [9, 8, 9, 0, 0, 0, 8, 8, 9, 5, 2, 4, 3],
 [8, 9, 0, 0, 0, 8, 8, 9, 5, 2, 4, 3, 4],
 [9, 0, 0, 0, 8, 8, 9, 5, 2, 4, 3, 4, 5],
 [0, 0, 0, 8, 8, 9, 5, 2, 4, 3, 4, 5, 0],
 [0, 0, 8, 8, 9, 5, 2, 4, 3, 4, 5, 0, 6],
 [0, 8, 8, 9, 5, 2, 4, 3, 4, 5, 0, 6, 5],
 [8, 8, 9, 5, 2, 4, 3, 4, 5, 0, 6, 5, 8],
 [8, 9, 5, 2, 4, 3, 4, 5, 0, 6, 5, 8, 5],
 [9, 5, 2, 4, 3, 4, 5, 0, 6, 5, 8, 5, 4],
 [5, 2, 4, 3, 4, 5, 0, 6, 5, 8, 5, 4, 1],
 [2, 4, 3, 4, 5, 0, 6, 5, 8, 5, 4, 1, 2],
 [4, 3, 4, 5, 0, 6, 5, 8, 5, 4, 1, 2, 2],
 [3, 4, 5, 0, 6, 5, 8, 5, 4, 1, 2, 2, 7],
 [4, 5, 0, 6, 5, 8, 5, 4, 1, 2, 2, 7, 5],
 [5, 0, 6, 5, 8, 5, 4, 1, 2, 2, 7, 5, 8],
 [0, 6, 5, 8, 5, 4, 1, 2, 2, 7, 5, 8, 8],
 [6, 5, 8, 5, 4, 1, 2, 2, 7, 5, 8, 8, 6],
 [5, 8, 5, 4, 1, 2, 2, 7, 5, 8, 8, 6, 6],
 [8, 5, 4, 1, 2, 2, 7, 5, 8, 8, 6, 6, 6],
 [5, 4, 1, 2, 2, 7, 5, 8, 8, 6, 6, 6, 8],
 [4, 1, 2, 2, 7, 5, 8, 8, 6, 6, 6, 8, 8],
 [1, 2, 2, 7, 5, 8, 8, 6, 6, 6, 8, 8, 1],
 [2, 2, 7, 5, 8, 8, 6, 6, 6, 8, 8, 1, 1],
 [2, 7, 5, 8, 8, 6, 6, 6, 8, 8, 1, 1, 6],
 [7, 5, 8, 8, 6, 6, 6, 8, 8, 1, 1, 6, 4],
 [5, 8, 8, 6, 6, 6, 8, 8, 1, 1, 6, 4, 2],
 [8, 8, 6, 6, 6, 8, 8, 1, 1, 6, 4, 2, 7],
 [8, 6, 6, 6, 8, 8, 1, 1, 6, 4, 2, 7, 1],
 [6, 6, 6, 8, 8, 1, 1, 6, 4, 2, 7, 1, 7],
 [6, 6, 8, 8, 1, 1, 6, 4, 2, 7, 1, 7, 1],
 [6, 8, 8, 1, 1, 6, 4, 2, 7, 1, 7, 1, 4],
 [8, 8, 1, 1, 6, 4, 2, 7, 1, 7, 1, 4, 7],
 [8, 1, 1, 6, 4, 2, 7, 1, 7, 1, 4, 7, 9],
 [1, 1, 6, 4, 2, 7, 1, 7, 1, 4, 7, 9, 9],
 [1, 6, 4, 2, 7, 1, 7, 1, 4, 7, 9, 9, 2],
 [6, 4, 2, 7, 1, 7, 1, 4, 7, 9, 9, 2, 4],
 [4, 2, 7, 1, 7, 1, 4, 7, 9, 9, 2, 4, 4],
 [2, 7, 1, 7, 1, 4, 7, 9, 9, 2, 4, 4, 4],
 [7, 1, 7, 1, 4, 7, 9, 9, 2, 4, 4, 4, 2],
 [1, 7, 1, 4, 7, 9, 9, 2, 4, 4, 4, 2, 9],
 [7, 1, 4, 7, 9, 9, 2, 4, 4, 4, 2, 9, 2],
 [1, 4, 7, 9, 9, 2, 4, 4, 4, 2, 9, 2, 8],
 [4, 7, 9, 9, 2, 4, 4, 4, 2, 9, 2, 8, 2],
 [7, 9, 9, 2, 4, 4, 4, 2, 9, 2, 8, 2, 3],
 [9, 9, 2, 4, 4, 4, 2, 9, 2, 8, 2, 3, 0],
 [9, 2, 4, 4, 4, 2, 9, 2, 8, 2, 3, 0, 8],
 [2, 4, 4, 4, 2, 9, 2, 8, 2, 3, 0, 8, 6],
 [4, 4, 4, 2, 9, 2, 8, 2, 3, 0, 8, 6, 3],
 [4, 4, 2, 9, 2, 8, 2, 3, 0, 8, 6, 3, 4],
 [4, 2, 9, 2, 8, 2, 3, 0, 8, 6, 3, 4, 6],
 [2, 9, 2, 8, 2, 3, 0, 8, 6, 3, 4, 6, 5],
 [9, 2, 8, 2, 3, 0, 8, 6, 3, 4, 6, 5, 6],
 [2, 8, 2, 3, 0, 8, 6, 3, 4, 6, 5, 6, 7],
 [8, 2, 3, 0, 8, 6, 3, 4, 6, 5, 6, 7, 4],
 [2, 3, 0, 8, 6, 3, 4, 6, 5, 6, 7, 4, 8],
 [3, 0, 8, 6, 3, 4, 6, 5, 6, 7, 4, 8, 1],
 [0, 8, 6, 3, 4, 6, 5, 6, 7, 4, 8, 1, 3],
 [8, 6, 3, 4, 6, 5, 6, 7, 4, 8, 1, 3, 9],
 [6, 3, 4, 6, 5, 6, 7, 4, 8, 1, 3, 9, 1],
 [3, 4, 6, 5, 6, 7, 4, 8, 1, 3, 9, 1, 9],
 [4, 6, 5, 6, 7, 4, 8, 1, 3, 9, 1, 9, 1],
 [6, 5, 6, 7, 4, 8, 1, 3, 9, 1, 9, 1, 2],
 [5, 6, 7, 4, 8, 1, 3, 9, 1, 9, 1, 2, 3],
 [6, 7, 4, 8, 1, 3, 9, 1, 9, 1, 2, 3, 1],
 [7, 4, 8, 1, 3, 9, 1, 9, 1, 2, 3, 1, 6],
 [4, 8, 1, 3, 9, 1, 9, 1, 2, 3, 1, 6, 2],
 [8, 1, 3, 9, 1, 9, 1, 2, 3, 1, 6, 2, 8],
 [1, 3, 9, 1, 9, 1, 2, 3, 1, 6, 2, 8, 2],
 [3, 9, 1, 9, 1, 2, 3, 1, 6, 2, 8, 2, 4],
 [9, 1, 9, 1, 2, 3, 1, 6, 2, 8, 2, 4, 5],
 [1, 9, 1, 2, 3, 1, 6, 2, 8, 2, 4, 5, 8],
 [9, 1, 2, 3, 1, 6, 2, 8, 2, 4, 5, 8, 6],
 [1, 2, 3, 1, 6, 2, 8, 2, 4, 5, 8, 6, 1],
 [2, 3, 1, 6, 2, 8, 2, 4, 5, 8, 6, 1, 7],
 [3, 1, 6, 2, 8, 2, 4, 5, 8, 6, 1, 7, 8],
 [1, 6, 2, 8, 2, 4, 5, 8, 6, 1, 7, 8, 6],
 [6, 2, 8, 2, 4, 5, 8, 6, 1, 7, 8, 6, 6],
 [2, 8, 2, 4, 5, 8, 6, 1, 7, 8, 6, 6, 4],
 [8, 2, 4, 5, 8, 6, 1, 7, 8, 6, 6, 4, 5],
 [2, 4, 5, 8, 6, 1, 7, 8, 6, 6, 4, 5, 8],
 [4, 5, 8, 6, 1, 7, 8, 6, 6, 4, 5, 8, 3],
 [5, 8, 6, 1, 7, 8, 6, 6, 4, 5, 8, 3, 5],
 [8, 6, 1, 7, 8, 6, 6, 4, 5, 8, 3, 5, 9],
 [6, 1, 7, 8, 6, 6, 4, 5, 8, 3, 5, 9, 1],
 [1, 7, 8, 6, 6, 4, 5, 8, 3, 5, 9, 1, 2],
 [7, 8, 6, 6, 4, 5, 8, 3, 5, 9, 1, 2, 4],
 [8, 6, 6, 4, 5, 8, 3, 5, 9, 1, 2, 4, 5],
 [6, 6, 4, 5, 8, 3, 5, 9, 1, 2, 4, 5, 6],
 [6, 4, 5, 8, 3, 5, 9, 1, 2, 4, 5, 6, 6],
 [4, 5, 8, 3, 5, 9, 1, 2, 4, 5, 6, 6, 5],
 [5, 8, 3, 5, 9, 1, 2, 4, 5, 6, 6, 5, 2],
 [8, 3, 5, 9, 1, 2, 4, 5, 6, 6, 5, 2, 9],
 [3, 5, 9, 1, 2, 4, 5, 6, 6, 5, 2, 9, 4],
 [5, 9, 1, 2, 4, 5, 6, 6, 5, 2, 9, 4, 7],
 [9, 1, 2, 4, 5, 6, 6, 5, 2, 9, 4, 7, 6],
 [1, 2, 4, 5, 6, 6, 5, 2, 9, 4, 7, 6, 5],
 [2, 4, 5, 6, 6, 5, 2, 9, 4, 7, 6, 5, 4],
 [4, 5, 6, 6, 5, 2, 9, 4, 7, 6, 5, 4, 5],
 [5, 6, 6, 5, 2, 9, 4, 7, 6, 5, 4, 5, 6],
 [6, 6, 5, 2, 9, 4, 7, 6, 5, 4, 5, 6, 8],
 [6, 5, 2, 9, 4, 7, 6, 5, 4, 5, 6, 8, 2],
 [5, 2, 9, 4, 7, 6, 5, 4, 5, 6, 8, 2, 8],
 [2, 9, 4, 7, 6, 5, 4, 5, 6, 8, 2, 8, 4],
 [9, 4, 7, 6, 5, 4, 5, 6, 8, 2, 8, 4, 8],
 [4, 7, 6, 5, 4, 5, 6, 8, 2, 8, 4, 8, 9],
 [7, 6, 5, 4, 5, 6, 8, 2, 8, 4, 8, 9, 1],
 [6, 5, 4, 5, 6, 8, 2, 8, 4, 8, 9, 1, 2],
 [5, 4, 5, 6, 8, 2, 8, 4, 8, 9, 1, 2, 8],
 [4, 5, 6, 8, 2, 8, 4, 8, 9, 1, 2, 8, 8],
 [5, 6, 8, 2, 8, 4, 8, 9, 1, 2, 8, 8, 3],
 [6, 8, 2, 8, 4, 8, 9, 1, 2, 8, 8, 3, 1],
 [8, 2, 8, 4, 8, 9, 1, 2, 8, 8, 3, 1, 4],
 [2, 8, 4, 8, 9, 1, 2, 8, 8, 3, 1, 4, 2],
 [8, 4, 8, 9, 1, 2, 8, 8, 3, 1, 4, 2, 6],
 [4, 8, 9, 1, 2, 8, 8, 3, 1, 4, 2, 6, 0],
 [8, 9, 1, 2, 8, 8, 3, 1, 4, 2, 6, 0, 7],
 [9, 1, 2, 8, 8, 3, 1, 4, 2, 6, 0, 7, 6],
 [1, 2, 8, 8, 3, 1, 4, 2, 6, 0, 7, 6, 9],
 [2, 8, 8, 3, 1, 4, 2, 6, 0, 7, 6, 9, 0],
 [8, 8, 3, 1, 4, 2, 6, 0, 7, 6, 9, 0, 0],
 [8, 3, 1, 4, 2, 6, 0, 7, 6, 9, 0, 0, 4],
 [3, 1, 4, 2, 6, 0, 7, 6, 9, 0, 0, 4, 2],
 [1, 4, 2, 6, 0, 7, 6, 9, 0, 0, 4, 2, 2],
 [4, 2, 6, 0, 7, 6, 9, 0, 0, 4, 2, 2, 4],
 [2, 6, 0, 7, 6, 9, 0, 0, 4, 2, 2, 4, 2],
 [6, 0, 7, 6, 9, 0, 0, 4, 2, 2, 4, 2, 1],
 [0, 7, 6, 9, 0, 0, 4, 2, 2, 4, 2, 1, 9],
 [7, 6, 9, 0, 0, 4, 2, 2, 4, 2, 1, 9, 0],
 [6, 9, 0, 0, 4, 2, 2, 4, 2, 1, 9, 0, 2],
 [9, 0, 0, 4, 2, 2, 4, 2, 1, 9, 0, 2, 2],
 [0, 0, 4, 2, 2, 4, 2, 1, 9, 0, 2, 2, 6],
 [0, 4, 2, 2, 4, 2, 1, 9, 0, 2, 2, 6, 7],
 [4, 2, 2, 4, 2, 1, 9, 0, 2, 2, 6, 7, 1],
 [2, 2, 4, 2, 1, 9, 0, 2, 2, 6, 7, 1, 0],
 [2, 4, 2, 1, 9, 0, 2, 2, 6, 7, 1, 0, 5],
 [4, 2, 1, 9, 0, 2, 2, 6, 7, 1, 0, 5, 5],
 [2, 1, 9, 0, 2, 2, 6, 7, 1, 0, 5, 5, 6],
 [1, 9, 0, 2, 2, 6, 7, 1, 0, 5, 5, 6, 2],
 [9, 0, 2, 2, 6, 7, 1, 0, 5, 5, 6, 2, 6],
 [0, 2, 2, 6, 7, 1, 0, 5, 5, 6, 2, 6, 3],
 [2, 2, 6, 7, 1, 0, 5, 5, 6, 2, 6, 3, 2],
 [2, 6, 7, 1, 0, 5, 5, 6, 2, 6, 3, 2, 1],
 [6, 7, 1, 0, 5, 5, 6, 2, 6, 3, 2, 1, 1],
 [7, 1, 0, 5, 5, 6, 2, 6, 3, 2, 1, 1, 1],
 [1, 0, 5, 5, 6, 2, 6, 3, 2, 1, 1, 1, 1],
 [0, 5, 5, 6, 2, 6, 3, 2, 1, 1, 1, 1, 1],
 [5, 5, 6, 2, 6, 3, 2, 1, 1, 1, 1, 1, 0],
 [5, 6, 2, 6, 3, 2, 1, 1, 1, 1, 1, 0, 9],
 [6, 2, 6, 3, 2, 1, 1, 1, 1, 1, 0, 9, 3],
 [2, 6, 3, 2, 1, 1, 1, 1, 1, 0, 9, 3, 7],
 [6, 3, 2, 1, 1, 1, 1, 1, 0, 9, 3, 7, 0],
 [3, 2, 1, 1, 1, 1, 1, 0, 9, 3, 7, 0, 5],
 [2, 1, 1, 1, 1, 1, 0, 9, 3, 7, 0, 5, 4],
 [1, 1, 1, 1, 1, 0, 9, 3, 7, 0, 5, 4, 4],
 [1, 1, 1, 1, 0, 9, 3, 7, 0, 5, 4, 4, 2],
 [1, 1, 1, 0, 9, 3, 7, 0, 5, 4, 4, 2, 1],
 [1, 1, 0, 9, 3, 7, 0, 5, 4, 4, 2, 1, 7],
 [1, 0, 9, 3, 7, 0, 5, 4, 4, 2, 1, 7, 5],
 [0, 9, 3, 7, 0, 5, 4, 4, 2, 1, 7, 5, 0],
 [9, 3, 7, 0, 5, 4, 4, 2, 1, 7, 5, 0, 6],
 [3, 7, 0, 5, 4, 4, 2, 1, 7, 5, 0, 6, 9],
 [7, 0, 5, 4, 4, 2, 1, 7, 5, 0, 6, 9, 4],
 [0, 5, 4, 4, 2, 1, 7, 5, 0, 6, 9, 4, 1],
 [5, 4, 4, 2, 1, 7, 5, 0, 6, 9, 4, 1, 6],
 [4, 4, 2, 1, 7, 5, 0, 6, 9, 4, 1, 6, 5],
 [4, 2, 1, 7, 5, 0, 6, 9, 4, 1, 6, 5, 8],
 [2, 1, 7, 5, 0, 6, 9, 4, 1, 6, 5, 8, 9],
 [1, 7, 5, 0, 6, 9, 4, 1, 6, 5, 8, 9, 6],
 [7, 5, 0, 6, 9, 4, 1, 6, 5, 8, 9, 6, 0],
 [5, 0, 6, 9, 4, 1, 6, 5, 8, 9, 6, 0, 4],
 [0, 6, 9, 4, 1, 6, 5, 8, 9, 6, 0, 4, 0],
 [6, 9, 4, 1, 6, 5, 8, 9, 6, 0, 4, 0, 8],
 [9, 4, 1, 6, 5, 8, 9, 6, 0, 4, 0, 8, 0],
 [4, 1, 6, 5, 8, 9, 6, 0, 4, 0, 8, 0, 7],
 [1, 6, 5, 8, 9, 6, 0, 4, 0, 8, 0, 7, 1],
 [6, 5, 8, 9, 6, 0, 4, 0, 8, 0, 7, 1, 9],
 [5, 8, 9, 6, 0, 4, 0, 8, 0, 7, 1, 9, 8],
 [8, 9, 6, 0, 4, 0, 8, 0, 7, 1, 9, 8, 4],
 [9, 6, 0, 4, 0, 8, 0, 7, 1, 9, 8, 4, 0],
 [6, 0, 4, 0, 8, 0, 7, 1, 9, 8, 4, 0, 3],
 [0, 4, 0, 8, 0, 7, 1, 9, 8, 4, 0, 3, 8],
 [4, 0, 8, 0, 7, 1, 9, 8, 4, 0, 3, 8, 5],
 [0, 8, 0, 7, 1, 9, 8, 4, 0, 3, 8, 5, 0],
 [8, 0, 7, 1, 9, 8, 4, 0, 3, 8, 5, 0, 9],
 [0, 7, 1, 9, 8, 4, 0, 3, 8, 5, 0, 9, 6],
 [7, 1, 9, 8, 4, 0, 3, 8, 5, 0, 9, 6, 2],
 [1, 9, 8, 4, 0, 3, 8, 5, 0, 9, 6, 2, 4],
 [9, 8, 4, 0, 3, 8, 5, 0, 9, 6, 2, 4, 5],
 [8, 4, 0, 3, 8, 5, 0, 9, 6, 2, 4, 5, 5],
 [4, 0, 3, 8, 5, 0, 9, 6, 2, 4, 5, 5, 4],
 [0, 3, 8, 5, 0, 9, 6, 2, 4, 5, 5, 4, 4],
 [3, 8, 5, 0, 9, 6, 2, 4, 5, 5, 4, 4, 4],
 [8, 5, 0, 9, 6, 2, 4, 5, 5, 4, 4, 4, 3],
 [5, 0, 9, 6, 2, 4, 5, 5, 4, 4, 4, 3, 6],
 [0, 9, 6, 2, 4, 5, 5, 4, 4, 4, 3, 6, 2],
 [9, 6, 2, 4, 5, 5, 4, 4, 4, 3, 6, 2, 9],
 [6, 2, 4, 5, 5, 4, 4, 4, 3, 6, 2, 9, 8],
 [2, 4, 5, 5, 4, 4, 4, 3, 6, 2, 9, 8, 1],
 [4, 5, 5, 4, 4, 4, 3, 6, 2, 9, 8, 1, 2],
 [5, 5, 4, 4, 4, 3, 6, 2, 9, 8, 1, 2, 3],
 [5, 4, 4, 4, 3, 6, 2, 9, 8, 1, 2, 3, 0],
 [4, 4, 4, 3, 6, 2, 9, 8, 1, 2, 3, 0, 9],
 [4, 4, 3, 6, 2, 9, 8, 1, 2, 3, 0, 9, 8],
 [4, 3, 6, 2, 9, 8, 1, 2, 3, 0, 9, 8, 7],
 [3, 6, 2, 9, 8, 1, 2, 3, 0, 9, 8, 7, 8],
 [6, 2, 9, 8, 1, 2, 3, 0, 9, 8, 7, 8, 7],
 [2, 9, 8, 1, 2, 3, 0, 9, 8, 7, 8, 7, 9],
 [9, 8, 1, 2, 3, 0, 9, 8, 7, 8, 7, 9, 9],
 [8, 1, 2, 3, 0, 9, 8, 7, 8, 7, 9, 9, 2],
 [1, 2, 3, 0, 9, 8, 7, 8, 7, 9, 9, 2, 7],
 [2, 3, 0, 9, 8, 7, 8, 7, 9, 9, 2, 7, 2],
 [3, 0, 9, 8, 7, 8, 7, 9, 9, 2, 7, 2, 4],
 [0, 9, 8, 7, 8, 7, 9, 9, 2, 7, 2, 4, 4],
 [9, 8, 7, 8, 7, 9, 9, 2, 7, 2, 4, 4, 2],
 [8, 7, 8, 7, 9, 9, 2, 7, 2, 4, 4, 2, 8],
 [7, 8, 7, 9, 9, 2, 7, 2, 4, 4, 2, 8, 4],
 [8, 7, 9, 9, 2, 7, 2, 4, 4, 2, 8, 4, 9],
 [7, 9, 9, 2, 7, 2, 4, 4, 2, 8, 4, 9, 0],
 [9, 9, 2, 7, 2, 4, 4, 2, 8, 4, 9, 0, 9],
 [9, 2, 7, 2, 4, 4, 2, 8, 4, 9, 0, 9, 1],
 [2, 7, 2, 4, 4, 2, 8, 4, 9, 0, 9, 1, 8],
 [7, 2, 4, 4, 2, 8, 4, 9, 0, 9, 1, 8, 8],
 [2, 4, 4, 2, 8, 4, 9, 0, 9, 1, 8, 8, 8],
 [4, 4, 2, 8, 4, 9, 0, 9, 1, 8, 8, 8, 4],
 [4, 2, 8, 4, 9, 0, 9, 1, 8, 8, 8, 4, 5],
 [2, 8, 4, 9, 0, 9, 1, 8, 8, 8, 4, 5, 8],
 [8, 4, 9, 0, 9, 1, 8, 8, 8, 4, 5, 8, 0],
 [4, 9, 0, 9, 1, 8, 8, 8, 4, 5, 8, 0, 1],
 [9, 0, 9, 1, 8, 8, 8, 4, 5, 8, 0, 1, 5],
 [0, 9, 1, 8, 8, 8, 4, 5, 8, 0, 1, 5, 6],
 [9, 1, 8, 8, 8, 4, 5, 8, 0, 1, 5, 6, 1],
 [1, 8, 8, 8, 4, 5, 8, 0, 1, 5, 6, 1, 6],
 [8, 8, 8, 4, 5, 8, 0, 1, 5, 6, 1, 6, 6],
 [8, 8, 4, 5, 8, 0, 1, 5, 6, 1, 6, 6, 0],
 [8, 4, 5, 8, 0, 1, 5, 6, 1, 6, 6, 0, 9],
 [4, 5, 8, 0, 1, 5, 6, 1, 6, 6, 0, 9, 7],
 [5, 8, 0, 1, 5, 6, 1, 6, 6, 0, 9, 7, 9],
 [8, 0, 1, 5, 6, 1, 6, 6, 0, 9, 7, 9, 1],
 [0, 1, 5, 6, 1, 6, 6, 0, 9, 7, 9, 1, 9],
 [1, 5, 6, 1, 6, 6, 0, 9, 7, 9, 1, 9, 1],
 [5, 6, 1, 6, 6, 0, 9, 7, 9, 1, 9, 1, 3],
 [6, 1, 6, 6, 0, 9, 7, 9, 1, 9, 1, 3, 3],
 [1, 6, 6, 0, 9, 7, 9, 1, 9, 1, 3, 3, 8],
 [6, 6, 0, 9, 7, 9, 1, 9, 1, 3, 3, 8, 7],
 [6, 0, 9, 7, 9, 1, 9, 1, 3, 3, 8, 7, 5],
 [0, 9, 7, 9, 1, 9, 1, 3, 3, 8, 7, 5, 4],
 [9, 7, 9, 1, 9, 1, 3, 3, 8, 7, 5, 4, 9],
 [7, 9, 1, 9, 1, 3, 3, 8, 7, 5, 4, 9, 9],
 [9, 1, 9, 1, 3, 3, 8, 7, 5, 4, 9, 9, 2],
 [1, 9, 1, 3, 3, 8, 7, 5, 4, 9, 9, 2, 0],
 [9, 1, 3, 3, 8, 7, 5, 4, 9, 9, 2, 0, 0],
 [1, 3, 3, 8, 7, 5, 4, 9, 9, 2, 0, 0, 5],
 [3, 3, 8, 7, 5, 4, 9, 9, 2, 0, 0, 5, 2],
 [3, 8, 7, 5, 4, 9, 9, 2, 0, 0, 5, 2, 4],
 [8, 7, 5, 4, 9, 9, 2, 0, 0, 5, 2, 4, 0],
 [7, 5, 4, 9, 9, 2, 0, 0, 5, 2, 4, 0, 6],
 [5, 4, 9, 9, 2, 0, 0, 5, 2, 4, 0, 6, 3],
 [4, 9, 9, 2, 0, 0, 5, 2, 4, 0, 6, 3, 6],
 [9, 9, 2, 0, 0, 5, 2, 4, 0, 6, 3, 6, 8],
 [9, 2, 0, 0, 5, 2, 4, 0, 6, 3, 6, 8, 9],
 [2, 0, 0, 5, 2, 4, 0, 6, 3, 6, 8, 9, 9],
 [0, 0, 5, 2, 4, 0, 6, 3, 6, 8, 9, 9, 1],
 [0, 5, 2, 4, 0, 6, 3, 6, 8, 9, 9, 1, 2],
 [5, 2, 4, 0, 6, 3, 6, 8, 9, 9, 1, 2, 5],
 [2, 4, 0, 6, 3, 6, 8, 9, 9, 1, 2, 5, 6],
 [4, 0, 6, 3, 6, 8, 9, 9, 1, 2, 5, 6, 0],
 [0, 6, 3, 6, 8, 9, 9, 1, 2, 5, 6, 0, 7],
 [6, 3, 6, 8, 9, 9, 1, 2, 5, 6, 0, 7, 1],
 [3, 6, 8, 9, 9, 1, 2, 5, 6, 0, 7, 1, 7],
 [6, 8, 9, 9, 1, 2, 5, 6, 0, 7, 1, 7, 6],
 [8, 9, 9, 1, 2, 5, 6, 0, 7, 1, 7, 6, 0],
 [9, 9, 1, 2, 5, 6, 0, 7, 1, 7, 6, 0, 6],
 [9, 1, 2, 5, 6, 0, 7, 1, 7, 6, 0, 6, 0],
 [1, 2, 5, 6, 0, 7, 1, 7, 6, 0, 6, 0, 5],
 [2, 5, 6, 0, 7, 1, 7, 6, 0, 6, 0, 5, 8],
 [5, 6, 0, 7, 1, 7, 6, 0, 6, 0, 5, 8, 8],
 [6, 0, 7, 1, 7, 6, 0, 6, 0, 5, 8, 8, 6],
 [0, 7, 1, 7, 6, 0, 6, 0, 5, 8, 8, 6, 1],
 [7, 1, 7, 6, 0, 6, 0, 5, 8, 8, 6, 1, 1],
 [1, 7, 6, 0, 6, 0, 5, 8, 8, 6, 1, 1, 6],
 [7, 6, 0, 6, 0, 5, 8, 8, 6, 1, 1, 6, 4],
 [6, 0, 6, 0, 5, 8, 8, 6, 1, 1, 6, 4, 6],
 [0, 6, 0, 5, 8, 8, 6, 1, 1, 6, 4, 6, 7],
 [6, 0, 5, 8, 8, 6, 1, 1, 6, 4, 6, 7, 1],
 [0, 5, 8, 8, 6, 1, 1, 6, 4, 6, 7, 1, 0],
 [5, 8, 8, 6, 1, 1, 6, 4, 6, 7, 1, 0, 9],
 [8, 8, 6, 1, 1, 6, 4, 6, 7, 1, 0, 9, 4],
 [8, 6, 1, 1, 6, 4, 6, 7, 1, 0, 9, 4, 0],
 [6, 1, 1, 6, 4, 6, 7, 1, 0, 9, 4, 0, 5],
 [1, 1, 6, 4, 6, 7, 1, 0, 9, 4, 0, 5, 0],
 [1, 6, 4, 6, 7, 1, 0, 9, 4, 0, 5, 0, 7],
 [6, 4, 6, 7, 1, 0, 9, 4, 0, 5, 0, 7, 7],
 [4, 6, 7, 1, 0, 9, 4, 0, 5, 0, 7, 7, 5],
 [6, 7, 1, 0, 9, 4, 0, 5, 0, 7, 7, 5, 4],
 [7, 1, 0, 9, 4, 0, 5, 0, 7, 7, 5, 4, 1],
 [1, 0, 9, 4, 0, 5, 0, 7, 7, 5, 4, 1, 0],
 [0, 9, 4, 0, 5, 0, 7, 7, 5, 4, 1, 0, 0],
 [9, 4, 0, 5, 0, 7, 7, 5, 4, 1, 0, 0, 2],
 [4, 0, 5, 0, 7, 7, 5, 4, 1, 0, 0, 2, 2],
 [0, 5, 0, 7, 7, 5, 4, 1, 0, 0, 2, 2, 5],
 [5, 0, 7, 7, 5, 4, 1, 0, 0, 2, 2, 5, 6],
 [0, 7, 7, 5, 4, 1, 0, 0, 2, 2, 5, 6, 9],
 [7, 7, 5, 4, 1, 0, 0, 2, 2, 5, 6, 9, 8],
 [7, 5, 4, 1, 0, 0, 2, 2, 5, 6, 9, 8, 3],
 [5, 4, 1, 0, 0, 2, 2, 5, 6, 9, 8, 3, 1],
 [4, 1, 0, 0, 2, 2, 5, 6, 9, 8, 3, 1, 5],
 [1, 0, 0, 2, 2, 5, 6, 9, 8, 3, 1, 5, 5],
 [0, 0, 2, 2, 5, 6, 9, 8, 3, 1, 5, 5, 2],
 [0, 2, 2, 5, 6, 9, 8, 3, 1, 5, 5, 2, 0],
 [2, 2, 5, 6, 9, 8, 3, 1, 5, 5, 2, 0, 0],
 [2, 5, 6, 9, 8, 3, 1, 5, 5, 2, 0, 0, 0],
 [5, 6, 9, 8, 3, 1, 5, 5, 2, 0, 0, 0, 5],
 [6, 9, 8, 3, 1, 5, 5, 2, 0, 0, 0, 5, 5],
 [9, 8, 3, 1, 5, 5, 2, 0, 0, 0, 5, 5, 9],
 [8, 3, 1, 5, 5, 2, 0, 0, 0, 5, 5, 9, 3],
 [3, 1, 5, 5, 2, 0, 0, 0, 5, 5, 9, 3, 5],
 [1, 5, 5, 2, 0, 0, 0, 5, 5, 9, 3, 5, 7],
 [5, 5, 2, 0, 0, 0, 5, 5, 9, 3, 5, 7, 2],
 [5, 2, 0, 0, 0, 5, 5, 9, 3, 5, 7, 2, 9],
 [2, 0, 0, 0, 5, 5, 9, 3, 5, 7, 2, 9, 7],
 [0, 0, 0, 5, 5, 9, 3, 5, 7, 2, 9, 7, 2],
 [0, 0, 5, 5, 9, 3, 5, 7, 2, 9, 7, 2, 5],
 [0, 5, 5, 9, 3, 5, 7, 2, 9, 7, 2, 5, 7],
 [5, 5, 9, 3, 5, 7, 2, 9, 7, 2, 5, 7, 1],
 [5, 9, 3, 5, 7, 2, 9, 7, 2, 5, 7, 1, 6],
 [9, 3, 5, 7, 2, 9, 7, 2, 5, 7, 1, 6, 3],
 [3, 5, 7, 2, 9, 7, 2, 5, 7, 1, 6, 3, 6],
 [5, 7, 2, 9, 7, 2, 5, 7, 1, 6, 3, 6, 2],
 [7, 2, 9, 7, 2, 5, 7, 1, 6, 3, 6, 2, 6],
 [2, 9, 7, 2, 5, 7, 1, 6, 3, 6, 2, 6, 9],
 [9, 7, 2, 5, 7, 1, 6, 3, 6, 2, 6, 9, 5],
 [7, 2, 5, 7, 1, 6, 3, 6, 2, 6, 9, 5, 6],
 [2, 5, 7, 1, 6, 3, 6, 2, 6, 9, 5, 6, 1],
 [5, 7, 1, 6, 3, 6, 2, 6, 9, 5, 6, 1, 8],
 [7, 1, 6, 3, 6, 2, 6, 9, 5, 6, 1, 8, 8],
 [1, 6, 3, 6, 2, 6, 9, 5, 6, 1, 8, 8, 2],
 [6, 3, 6, 2, 6, 9, 5, 6, 1, 8, 8, 2, 6],
 [3, 6, 2, 6, 9, 5, 6, 1, 8, 8, 2, 6, 7],
 [6, 2, 6, 9, 5, 6, 1, 8, 8, 2, 6, 7, 0],
 [2, 6, 9, 5, 6, 1, 8, 8, 2, 6, 7, 0, 4],
 [6, 9, 5, 6, 1, 8, 8, 2, 6, 7, 0, 4, 2],
 [9, 5, 6, 1, 8, 8, 2, 6, 7, 0, 4, 2, 8],
 [5, 6, 1, 8, 8, 2, 6, 7, 0, 4, 2, 8, 2],
 [6, 1, 8, 8, 2, 6, 7, 0, 4, 2, 8, 2, 5],
 [1, 8, 8, 2, 6, 7, 0, 4, 2, 8, 2, 5, 2],
 [8, 8, 2, 6, 7, 0, 4, 2, 8, 2, 5, 2, 4],
 [8, 2, 6, 7, 0, 4, 2, 8, 2, 5, 2, 4, 8],
 [2, 6, 7, 0, 4, 2, 8, 2, 5, 2, 4, 8, 3],
 [6, 7, 0, 4, 2, 8, 2, 5, 2, 4, 8, 3, 6],
 [7, 0, 4, 2, 8, 2, 5, 2, 4, 8, 3, 6, 0],
 [0, 4, 2, 8, 2, 5, 2, 4, 8, 3, 6, 0, 0],
 [4, 2, 8, 2, 5, 2, 4, 8, 3, 6, 0, 0, 8],
 [2, 8, 2, 5, 2, 4, 8, 3, 6, 0, 0, 8, 2],
 [8, 2, 5, 2, 4, 8, 3, 6, 0, 0, 8, 2, 3],
 [2, 5, 2, 4, 8, 3, 6, 0, 0, 8, 2, 3, 2],
 [5, 2, 4, 8, 3, 6, 0, 0, 8, 2, 3, 2, 5],
 [2, 4, 8, 3, 6, 0, 0, 8, 2, 3, 2, 5, 7],
 [4, 8, 3, 6, 0, 0, 8, 2, 3, 2, 5, 7, 5],
 [8, 3, 6, 0, 0, 8, 2, 3, 2, 5, 7, 5, 3],
 [3, 6, 0, 0, 8, 2, 3, 2, 5, 7, 5, 3, 0],
 [6, 0, 0, 8, 2, 3, 2, 5, 7, 5, 3, 0, 4],
 [0, 0, 8, 2, 3, 2, 5, 7, 5, 3, 0, 4, 2],
 [0, 8, 2, 3, 2, 5, 7, 5, 3, 0, 4, 2, 0],
 [8, 2, 3, 2, 5, 7, 5, 3, 0, 4, 2, 0, 7],
 [2, 3, 2, 5, 7, 5, 3, 0, 4, 2, 0, 7, 5],
 [3, 2, 5, 7, 5, 3, 0, 4, 2, 0, 7, 5, 2],
 [2, 5, 7, 5, 3, 0, 4, 2, 0, 7, 5, 2, 9],
 [5, 7, 5, 3, 0, 4, 2, 0, 7, 5, 2, 9, 6],
 [7, 5, 3, 0, 4, 2, 0, 7, 5, 2, 9, 6, 3],
 [5, 3, 0, 4, 2, 0, 7, 5, 2, 9, 6, 3, 4],
 [3, 0, 4, 2, 0, 7, 5, 2, 9, 6, 3, 4, 5]]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [48]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;prod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Example: Compute $8!$&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [52]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[52]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;40320&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [53]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_to_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[53]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[5000940,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 4199040,
 4898880,
 9797760,
 9797760,
 2177280,
 13063680,
 7257600,
 25401600,
 50803200,
 71124480,
 284497920,
 568995840,
 189665280,
 158054400,
 112896000,
 84672000,
 84672000,
 381024000,
 63504000,
 114307200,
 65318400,
 146966400,
 62985600,
 62985600,
 283435200,
 566870400,
 1020366720,
 1632586752,
 1632586752,
 2040733440,
 453496320,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 78382080,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 371589120,
 2972712960,
 1857945600,
 2477260800,
 1651507200,
 412876800,
 294912000,
 221184000,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 235146240,
 167961600,
 188956800,
 104976000,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 42865200,
 342921600,
 244944000,
 244944000,
 69984000,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 812851200,
 812851200,
 270950400,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 6270566400,
 14108774400,
 23514624000,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 3225600,
 2419200,
 604800,
 967680,
 2419200,
 3628800,
 3628800,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 677376,
 225792,
 28224,
 4032,
 12096,
 72576,
 145152,
 145152,
 290304,
 373248,
 1492992,
 6718464,
 6718464,
 3359232,
 2239488,
 6718464,
 20155392,
 53747712,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 13063680,
 3265920,
 26127360,
 17418240,
 27869184,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 424673280,
 495452160,
 495452160,
 1114767360,
 836075520,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 2709504,
 24385536,
 27869184,
 97542144,
 219469824,
 768144384,
 987614208,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 630118440,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 120960000,
 96768000,
 96768000,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 2016000,
 1008000,
 3024000,
 10584000,
 13230000,
 9922500,
 59535000,
 107163000,
 107163000,
 428652000,
 214326000,
 1500282000,
 2700507600,
 3780710640,
 8821658160,
 7841473920,
 4480842240,
 5377010688,
 1792336896,
 2091059712,
 929359872,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 313528320,
 235146240,
 313528320,
 940584960,
 376233984,
 125411328,
 55738368,
 148635648,
 148635648,
 1189085184,
 396361728,
 509607936,
 445906944,
 222953472,
 74317824,
 37158912,
 6193152,
 9289728,
 32514048,
 40642560,
 30481920,
 76204800,
 66679200,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 365783040,
 261273600,
 87091200,
 62208000,
 31104000,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 258048000,
 258048000,
 309657600,
 309657600,
 495452160,
 123863040,
 123863040,
 371589120,
 743178240,
 212336640,
 297271296,
 37158912,
 32514048,
 5419008,
 3612672,
 4214784,
 4741632,
 5334336,
 10668672,
 42674688,
 28449792,
 28449792,
 28449792,
 36578304,
 73156608,
 83607552,
 167215104,
 125411328,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 627056640,
 78382080,
 117573120,
 39191040,
 19595520,
 9797760,
 1959552,
 1959552,
 559872,
 1119744,
 279936,
 1119744,
 1866240,
 1658880,
 9953280,
 1105920,
 7741440,
 30965760,
 61931520,
 371589120,
 247726080,
 619315200,
 619315200,
 928972800,
 1161216000,
 2090188800,
 261273600,
 87091200,
 348364800,
 248832000,
 186624000,
 186624000,
 155520000,
 77760000,
 139968000,
 69984000,
 163296000,
 195955200,
 108864000,
 435456000,
 1088640000,
 1632960000,
 2612736000,
 870912000,
 1161216000,
 928972800,
 3715891200,
 3715891200,
 928972800,
 265420800,
 353894400,
 566231040,
 424673280,
 84934656,
 56623104,
 14155776,
 42467328,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 223948800,
 199065600,
 33177600,
 33177600,
 24883200,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 2048385024,
 1820786688,
 910393344,
 1170505728,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 462944160,
 462944160,
 132269760,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 208372500,
 250047000,
 150028200,
 100018800,
 66679200,
 80015040,
 102876480,
 257191200,
 171460800,
 24494400,
 97977600,
 156764160,
 44789760,
 268738560,
 313528320,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [54]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_to_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[54]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;23514624000&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [56]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_to_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[56]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;5832&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Given the frequency of 0's when applying the sliding window, the next optimization to consider is skipping over windows containing at least one zero.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [60]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_to_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[60]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[(0, 724),
 (928972800, 3),
 (495452160, 3),
 (6718464, 3),
 (371589120, 3),
 (28449792, 3),
 (313528320, 3),
 (9797760, 3),
 (78382080, 2),
 (1959552, 2),
 (186624000, 2),
 (235146240, 2),
 (27869184, 2),
 (3628800, 2),
 (258048000, 2),
 (3715891200, 2),
 (87091200, 2),
 (33177600, 2),
 (69984000, 2),
 (619315200, 2),
 (32514048, 2),
 (424673280, 2),
 (148635648, 2),
 (2419200, 2),
 (309657600, 2),
 (13063680, 2),
 (244944000, 2),
 (107163000, 2),
 (125411328, 2),
 (261273600, 2),
 (66679200, 2),
 (62985600, 2),
 (145152, 2),
 (462944160, 2),
 (96768000, 2),
 (37158912, 2),
 (1161216000, 2),
 (1632586752, 2),
 (1119744, 2),
 (123863040, 2),
 (812851200, 2),
 (84672000, 2),
 (189665280, 1),
 (1651507200, 1),
 (348364800, 1),
 (297271296, 1),
 (19595520, 1),
 (171460800, 1),
 (1008000, 1),
 (3359232, 1),
 (250047000, 1),
 (566231040, 1),
 (2016000, 1),
 (630118440, 1),
 (3024000, 1),
 (62208000, 1),
 (97977600, 1),
 (42865200, 1),
 (7841473920, 1),
 (743178240, 1),
 (2709504, 1),
 (71124480, 1),
 (132269760, 1),
 (30965760, 1),
 (4898880, 1),
 (1492992, 1),
 (268738560, 1),
 (5419008, 1),
 (14155776, 1),
 (1866240, 1),
 (5377010688, 1),
 (2091059712, 1),
 (376233984, 1),
 (1189085184, 1),
 (76204800, 1),
 (61931520, 1),
 (212336640, 1),
 (1820786688, 1),
 (2612736000, 1),
 (967680, 1),
 (73156608, 1),
 (453496320, 1),
 (65318400, 1),
 (44789760, 1),
 (4199040, 1),
 (10584000, 1),
 (627056640, 1),
 (42467328, 1),
 (14108774400, 1),
 (114307200, 1),
 (24883200, 1),
 (1500282000, 1),
 (59535000, 1),
 (1114767360, 1),
 (100018800, 1),
 (1088640000, 1),
 (7741440, 1),
 (26127360, 1),
 (3780710640, 1),
 (102876480, 1),
 (5334336, 1),
 (4214784, 1),
 (677376, 1),
 (270950400, 1),
 (84934656, 1),
 (265420800, 1),
 (55738368, 1),
 (283435200, 1),
 (445906944, 1),
 (219469824, 1),
 (23514624000, 1),
 (353894400, 1),
 (25401600, 1),
 (199065600, 1),
 (412876800, 1),
 (155520000, 1),
 (4741632, 1),
 (604800, 1),
 (20155392, 1),
 (870912000, 1),
 (24385536, 1),
 (31104000, 1),
 (3612672, 1),
 (5000940, 1),
 (3265920, 1),
 (1658880, 1),
 (30481920, 1),
 (2090188800, 1),
 (1792336896, 1),
 (63504000, 1),
 (2972712960, 1),
 (381024000, 1),
 (188956800, 1),
 (163296000, 1),
 (53747712, 1),
 (1632960000, 1),
 (83607552, 1),
 (56623104, 1),
 (566870400, 1),
 (208372500, 1),
 (108864000, 1),
 (9953280, 1),
 (294912000, 1),
 (257191200, 1),
 (8821658160, 1),
 (247726080, 1),
 (284497920, 1),
 (167961600, 1),
 (195955200, 1),
 (279936, 1),
 (97542144, 1),
 (1170505728, 1),
 (12096, 1),
 (24494400, 1),
 (146966400, 1),
 (222953472, 1),
 (112896000, 1),
 (36578304, 1),
 (1105920, 1),
 (10668672, 1),
 (373248, 1),
 (509607936, 1),
 (248832000, 1),
 (156764160, 1),
 (2239488, 1),
 (40642560, 1),
 (987614208, 1),
 (290304, 1),
 (42674688, 1),
 (104976000, 1),
 (7257600, 1),
 (836075520, 1),
 (1020366720, 1),
 (28224, 1),
 (910393344, 1),
 (139968000, 1),
 (568995840, 1),
 (9289728, 1),
 (117573120, 1),
 (342921600, 1),
 (50803200, 1),
 (929359872, 1),
 (74317824, 1),
 (1857945600, 1),
 (214326000, 1),
 (2048385024, 1),
 (768144384, 1),
 (150028200, 1),
 (940584960, 1),
 (120960000, 1),
 (6270566400, 1),
 (13230000, 1),
 (77760000, 1),
 (365783040, 1),
 (6193152, 1),
 (4032, 1),
 (9922500, 1),
 (3225600, 1),
 (435456000, 1),
 (158054400, 1),
 (2177280, 1),
 (2700507600, 1),
 (17418240, 1),
 (4480842240, 1),
 (396361728, 1),
 (221184000, 1),
 (428652000, 1),
 (72576, 1),
 (223948800, 1),
 (2477260800, 1),
 (39191040, 1),
 (559872, 1),
 (80015040, 1),
 (2040733440, 1),
 (225792, 1),
 (167215104, 1)]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>ipython</category><category>project-euler</category><category>python</category><guid>http://louistiao.me/posts/project-euler/problem-8-largest-product-in-a-series/</guid><pubDate>Fri, 03 Apr 2015 03:34:56 GMT</pubDate></item></channel></rss>