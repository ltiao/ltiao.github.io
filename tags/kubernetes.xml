<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>Louis Tiao (kubernetes)</title><link>http://louistiao.me/</link><description></description><atom:link href="http://louistiao.me/tags/kubernetes.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 25 Aug 2016 07:11:54 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Kubernetes' new init containers feature is more powerful than Docker's --volumes-from option</title><link>http://louistiao.me/posts/kubernetes-new-init-containers-feature-is-more-powerful-than-dockers-volumes-from-option/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;Often, containerized applications depend on a list of initialization steps to be
performed before they can carry out their functions. In fact, most non-trivial
applications would. These steps may include such things as downloading and
seeding applications with data, fetching remote configurations or pre-loading
existing database snapshots.&lt;/p&gt;
&lt;p&gt;Consider the simple case of running a &lt;tt class="docutils literal"&gt;nginx&lt;/tt&gt; container with the official Docker image:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_8e3483220c90445295e5c03a4159d8c0-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; docker run -d -p 80:80 nginx
&lt;/pre&gt;&lt;p&gt;This will host the generic &lt;tt class="docutils literal"&gt;nginx&lt;/tt&gt; welcome page at &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://$(docker-machine&lt;/span&gt; &lt;span class="pre"&gt;ip):80/&lt;/span&gt;&lt;/tt&gt;.
But what if what if we wanted a quick way to host some static files or pictures
of say, adorable baby ducks for our friends? We'd simply need to to pre-populate
the &lt;tt class="docutils literal"&gt;/usr/share/nginx/html&lt;/tt&gt; with said adorable duck images. Without modifying
the entrypoint/command and/or creating another image based on &lt;tt class="docutils literal"&gt;nginx&lt;/tt&gt; (which
is definitely the wrong approach in the case), we can just mount a data volume
container to the &lt;tt class="docutils literal"&gt;nginx&lt;/tt&gt; container, and have another &lt;tt class="docutils literal"&gt;busybox&lt;/tt&gt; container
pre-populate the data volume container with the pictures.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="http://i.imgur.com/Yy3hrM1.jpg" class="img-thumbnail" src="http://i.imgur.com/Yy3hrM1.jpg"&gt;
&lt;p class="caption"&gt;The adorable baby ducks under examination.
Visit &lt;a class="reference external" href="https://www.reddit.com/r/duck/"&gt;/r/duck&lt;/a&gt; for more!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/kubernetes-new-init-containers-feature-is-more-powerful-than-dockers-volumes-from-option/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>busybox</category><category>docker</category><category>docker compose</category><category>kubernetes</category><category>nginx</category><category>wget</category><guid>http://louistiao.me/posts/kubernetes-new-init-containers-feature-is-more-powerful-than-dockers-volumes-from-option/</guid><pubDate>Thu, 25 Aug 2016 06:25:22 GMT</pubDate></item><item><title>Deploy Flask with a Celery task queue and Flower dashboard using Kubernetes</title><link>http://louistiao.me/posts/deploy-flask-with-a-celery-task-queue-and-flower-dashboard-using-kubernetes/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;In this article, we walkthrough the steps to deploy a simple &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; app
integrated with &lt;a class="reference external" href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt;, an asynchronous task queue based on message passing. It
makes uses &lt;a class="reference external" href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt; and/or &lt;a class="reference external" href="http://redis.io/"&gt;Redis&lt;/a&gt; as the message broker and results backend,
which can be cumbersome to provision and orchestrate. We use &lt;a class="reference external" href="http://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; to
ease the management of the various deployments and services required in our
stack, which leaves us more time to focus on coding and less on DevOps.&lt;/p&gt;
&lt;img alt="../../images/rq-dashboard.png" class="align-center" src="http://louistiao.me/images/rq-dashboard.png"&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/deploy-flask-with-a-celery-task-queue-and-flower-dashboard-using-kubernetes/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>celery</category><category>docker</category><category>flask</category><category>flower</category><category>jsonpath</category><category>kubernetes</category><category>rabbitmq</category><category>redis</category><category>yaml</category><guid>http://louistiao.me/posts/deploy-flask-with-a-celery-task-queue-and-flower-dashboard-using-kubernetes/</guid><pubDate>Tue, 16 Aug 2016 02:09:47 GMT</pubDate></item><item><title>Walkthrough: Deploying a Flask app with Redis Queue (RQ) Workers and Dashboard using Kubernetes</title><link>http://louistiao.me/posts/walkthrough-deploying-a-flask-app-with-redis-queue-rq-workers-and-dashboard-using-kubernetes/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;In this article, we walkthrough the steps to deploy a simple &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; app together
with &lt;a class="reference external" href="http://python-rq.org/"&gt;Redis Queue (RQ)&lt;/a&gt;, a minimalistic job queue built on &lt;a class="reference external" href="http://redis.io/"&gt;Redis&lt;/a&gt;, using
&lt;a class="reference external" href="http://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; to provision and manage the necessary deployments and services for
our stack.&lt;/p&gt;
&lt;img alt="../../images/rq-dashboard.png" class="align-center" src="http://louistiao.me/images/rq-dashboard.png"&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/walkthrough-deploying-a-flask-app-with-redis-queue-rq-workers-and-dashboard-using-kubernetes/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>docker</category><category>flask</category><category>jsonpath</category><category>kubernetes</category><category>redis</category><category>rq</category><category>yaml</category><guid>http://louistiao.me/posts/walkthrough-deploying-a-flask-app-with-redis-queue-rq-workers-and-dashboard-using-kubernetes/</guid><pubDate>Fri, 01 Jul 2016 04:12:07 GMT</pubDate></item><item><title>Re-implementing the Kubernetes Guestbook Example with Flask and NGINX</title><link>http://louistiao.me/posts/re-implementing-the-kubernetes-guestbook-example-with-flask-and-nginx/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;The official &lt;a class="reference external" href="http://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; &lt;a class="reference external" href="http://kubernetes.io/docs/user-guide/walkthrough/"&gt;walkthrough guides&lt;/a&gt; often points to the &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/tree/master/examples/guestbook"&gt;guestbook
application&lt;/a&gt; as a quintessential example of how a simple, but complete multi-tier
web application can be deployed with Kubernetes. As described in the &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/master/examples/guestbook/README.md"&gt;README&lt;/a&gt;, it
consists of a web frontend, a redis master (for storage), and a replicated set of
redis 'slaves'.&lt;/p&gt;
&lt;img alt="//cloud.google.com/container-engine/images/guestbook.png" class="align-center" src="//cloud.google.com/container-engine/images/guestbook.png"&gt;
&lt;p&gt;This seemed like an ideal starting point for deploying my &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; applications
with a similar stack, and also makes use of redis master/slaves. The difficulty
I found with readily making use of this example as a starting point is that the
frontend is implemented in PHP, which is considerably different to modern paradigms
(Node.js, Flask/Django, Rails, etc.) As described in the README:&lt;/p&gt;
&lt;blockquote&gt;
A frontend pod is a simple PHP server that is configured to talk to either
the slave or master services, depending on whether the client request is a
read or a write. It exposes a simple AJAX interface, and serves an
Angular-based UX. Again we'll create a set of replicated frontend pods
instantiated by a Deployment — this time, with three replicas.&lt;/blockquote&gt;
&lt;p&gt;I figured re-implementing the frontend pod in with Flask would require minimal
changes - the UI would remain mostly the same, and the actual interaction with
the redis master/slaves is quite trivial.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/re-implementing-the-kubernetes-guestbook-example-with-flask-and-nginx/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>angularjs</category><category>docker</category><category>flask</category><category>html</category><category>kubernetes</category><category>nginx</category><category>redis</category><category>uwsgi</category><guid>http://louistiao.me/posts/re-implementing-the-kubernetes-guestbook-example-with-flask-and-nginx/</guid><pubDate>Wed, 25 May 2016 04:10:00 GMT</pubDate></item></channel></rss>