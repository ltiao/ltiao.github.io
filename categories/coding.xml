<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Louis Tiao (coding)</title><link>http://louistiao.me/</link><description></description><atom:link rel="self" href="http://louistiao.me/categories/coding.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 24 Nov 2016 01:27:40 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Deploy Flask with a Celery task queue and Flower dashboard using Kubernetes</title><link>http://louistiao.me/posts/deploy-flask-with-a-celery-task-queue-and-flower-dashboard-using-kubernetes/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;In this article, we walkthrough the steps to deploy a simple &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; app
integrated with &lt;a class="reference external" href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt;, an asynchronous task queue based on message passing. It
makes uses &lt;a class="reference external" href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt; and/or &lt;a class="reference external" href="http://redis.io/"&gt;Redis&lt;/a&gt; as the message broker and results backend,
which can be cumbersome to provision and orchestrate. We use &lt;a class="reference external" href="http://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; to
ease the management of the various deployments and services required in our
stack, which leaves us more time to focus on coding and less on DevOps.&lt;/p&gt;
&lt;img alt="../../images/rq-dashboard.png" class="align-center" src="http://louistiao.me/images/rq-dashboard.png"&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/deploy-flask-with-a-celery-task-queue-and-flower-dashboard-using-kubernetes/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>celery</category><category>docker</category><category>flask</category><category>flower</category><category>jsonpath</category><category>kubernetes</category><category>rabbitmq</category><category>redis</category><category>yaml</category><guid>http://louistiao.me/posts/deploy-flask-with-a-celery-task-queue-and-flower-dashboard-using-kubernetes/</guid><pubDate>Tue, 16 Aug 2016 02:09:47 GMT</pubDate></item><item><title>Walkthrough: Deploying a Flask app with Redis Queue (RQ) Workers and Dashboard using Kubernetes</title><link>http://louistiao.me/posts/walkthrough-deploying-a-flask-app-with-redis-queue-rq-workers-and-dashboard-using-kubernetes/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;In this article, we walkthrough the steps to deploy a simple &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; app together
with &lt;a class="reference external" href="http://python-rq.org/"&gt;Redis Queue (RQ)&lt;/a&gt;, a minimalistic job queue built on &lt;a class="reference external" href="http://redis.io/"&gt;Redis&lt;/a&gt;, using
&lt;a class="reference external" href="http://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; to provision and manage the necessary deployments and services for
our stack.&lt;/p&gt;
&lt;img alt="../../images/rq-dashboard.png" class="align-center" src="http://louistiao.me/images/rq-dashboard.png"&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/walkthrough-deploying-a-flask-app-with-redis-queue-rq-workers-and-dashboard-using-kubernetes/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>docker</category><category>flask</category><category>jsonpath</category><category>kubernetes</category><category>redis</category><category>rq</category><category>yaml</category><guid>http://louistiao.me/posts/walkthrough-deploying-a-flask-app-with-redis-queue-rq-workers-and-dashboard-using-kubernetes/</guid><pubDate>Fri, 01 Jul 2016 04:12:07 GMT</pubDate></item><item><title>Re-implementing the Kubernetes Guestbook Example with Flask and NGINX</title><link>http://louistiao.me/posts/re-implementing-the-kubernetes-guestbook-example-with-flask-and-nginx/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;The official &lt;a class="reference external" href="http://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; &lt;a class="reference external" href="http://kubernetes.io/docs/user-guide/walkthrough/"&gt;walkthrough guides&lt;/a&gt; often points to the &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/tree/master/examples/guestbook"&gt;guestbook
application&lt;/a&gt; as a quintessential example of how a simple, but complete multi-tier
web application can be deployed with Kubernetes. As described in the &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/master/examples/guestbook/README.md"&gt;README&lt;/a&gt;, it
consists of a web frontend, a redis master (for storage), and a replicated set of
redis 'slaves'.&lt;/p&gt;
&lt;img alt="//cloud.google.com/container-engine/images/guestbook.png" class="align-center" src="//cloud.google.com/container-engine/images/guestbook.png"&gt;
&lt;p&gt;This seemed like an ideal starting point for deploying my &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; applications
with a similar stack, and also makes use of redis master/slaves. The difficulty
I found with readily making use of this example as a starting point is that the
frontend is implemented in PHP, which is considerably different to modern paradigms
(Node.js, Flask/Django, Rails, etc.) As described in the README:&lt;/p&gt;
&lt;blockquote&gt;
A frontend pod is a simple PHP server that is configured to talk to either
the slave or master services, depending on whether the client request is a
read or a write. It exposes a simple AJAX interface, and serves an
Angular-based UX. Again we'll create a set of replicated frontend pods
instantiated by a Deployment — this time, with three replicas.&lt;/blockquote&gt;
&lt;p&gt;I figured re-implementing the frontend pod in with Flask would require minimal
changes - the UI would remain mostly the same, and the actual interaction with
the redis master/slaves is quite trivial.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/re-implementing-the-kubernetes-guestbook-example-with-flask-and-nginx/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>angularjs</category><category>docker</category><category>flask</category><category>html</category><category>kubernetes</category><category>nginx</category><category>redis</category><category>uwsgi</category><guid>http://louistiao.me/posts/re-implementing-the-kubernetes-guestbook-example-with-flask-and-nginx/</guid><pubDate>Wed, 25 May 2016 04:10:00 GMT</pubDate></item><item><title>Quick Reference: Deleting Local and Remote Git Branches</title><link>http://louistiao.me/posts/quick-reference-deleting-local-and-remote-git-branches/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;From &lt;a class="reference external" href="http://stackoverflow.com/questions/2003505/delete-a-git-branch-both-locally-and-remotely"&gt;http://stackoverflow.com/questions/2003505/delete-a-git-branch-both-locally-and-remotely&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;Deleting a Local Git Branch:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_a202d952c4434f2491f89d5cd2b0450f-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git branch -D &amp;lt;branch-name&amp;gt;
&lt;a name="rest_code_a202d952c4434f2491f89d5cd2b0450f-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;Deleted branch &amp;lt;branch-name&amp;gt; (was &amp;lt;commit-hash&amp;gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Deleting a Remote Git Branch (available as of &lt;a class="reference external" href="https://github.com/git/git/blob/c2c5f6b1e479f2c38e0e01345350620944e3527f/Documentation/RelNotes/1.7.0.txt#L154"&gt;Git 1.7.0&lt;/a&gt;)&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_1bc80ae370144e188ee35bb8aee5689a-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git push origin --delete &amp;lt;branch-name&amp;gt;
&lt;a name="rest_code_1bc80ae370144e188ee35bb8aee5689a-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;To &amp;lt;git-remote-origin-url&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1bc80ae370144e188ee35bb8aee5689a-3"&gt;&lt;/a&gt;&lt;span class="go"&gt; - [deleted]         &amp;lt;branch-name&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>git</category><guid>http://louistiao.me/posts/quick-reference-deleting-local-and-remote-git-branches/</guid><pubDate>Wed, 11 May 2016 07:16:05 GMT</pubDate></item><item><title>Setting up a IPython Parallel Cluster on Amazon EC2 with StarCluster</title><link>http://louistiao.me/posts/setting-up-a-ipython-parallel-cluster-on-amazon-ec2-with-starcluster/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="http://star.mit.edu/cluster/"&gt;StarCluster&lt;/a&gt; is an open source cluster-computing toolkit for Amazon’s Elastic
Compute Cloud (EC2) that is designed to automate and simplify the process of
building, configuring, and managing clusters of virtual machines on Amazon’s
EC2 cloud. StarCluster makes it easy to create a cluster computing environment
in the cloud for distributed and parallel computing applications.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/setting-up-a-ipython-parallel-cluster-on-amazon-ec2-with-starcluster/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>amazon aws</category><category>amazon ec2</category><category>distributed computing</category><category>ipython</category><category>pip</category><category>python</category><category>starcluster</category><category>virtualenv</category><guid>http://louistiao.me/posts/setting-up-a-ipython-parallel-cluster-on-amazon-ec2-with-starcluster/</guid><pubDate>Tue, 03 May 2016 12:55:55 GMT</pubDate></item><item><title>Visualizing and Animating Optimization Algorithms with Matplotlib</title><link>http://louistiao.me/posts/notebooks/visualizing-and-animating-optimization-algorithms-with-matplotlib/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In this series of notebooks, we demonstrate some useful patterns and recipes for visualizing animating optimization algorithms using Matplotlib.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;autograd.numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mpl_toolkits.mplot3d&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Axes3D&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.colors&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LogNorm&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;animation&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autograd&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;elementwise_grad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value_and_grad&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.optimize&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;minimize&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;zip_longest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We shall restrict our attention to 3-dimensional problems for right now (i.e. optimizing over only 2 parameters), though what follows can be extended to higher dimensions by plotting all pairs of parameters against each other, effectively projecting the problem to 3-dimensions.&lt;/p&gt;
&lt;p&gt;The Wikipedia article on &lt;a href="https://en.wikipedia.org/wiki/Test_functions_for_optimization"&gt;Test functions for optimization&lt;/a&gt; has a few functions that are useful for evaluating optimization algorithms. In particular, we shall look at &lt;strong&gt;Beale's function&lt;/strong&gt;:&lt;/p&gt;
$$
f(x, y) = (1.5 - x + xy)^2 + (2.25 - x + xy^2)^2 + (2.625 - x + xy^3)^2
$$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.25&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.625&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/notebooks/visualizing-and-animating-optimization-algorithms-with-matplotlib/"&gt;Read more…&lt;/a&gt; (12 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>autograd</category><category>ipython</category><category>jupyter</category><category>matplotlib</category><category>numpy</category><category>optimization</category><category>scipy</category><category>visualization</category><guid>http://louistiao.me/posts/notebooks/visualizing-and-animating-optimization-algorithms-with-matplotlib/</guid><pubDate>Tue, 26 Apr 2016 12:13:17 GMT</pubDate></item><item><title>Installing Cartopy on Mac OSX (10.11)</title><link>http://louistiao.me/posts/installing-cartopy-on-mac-osx-1011/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;So you develop on Mac OS X (10.11) and have installed the external
dependencies (&lt;a class="reference external" href="https://trac.osgeo.org/geos/"&gt;geos&lt;/a&gt; 3.5.0, &lt;a class="reference external" href="https://trac.osgeo.org/proj/"&gt;proj&lt;/a&gt; 4.9.2) of &lt;a class="reference external" href="http://scitools.org.uk/cartopy/"&gt;Cartopy&lt;/a&gt; with &lt;a class="reference external" href="http://brew.sh/"&gt;Homebrew&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_1e564823810d477db8960ad5ca36426b-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; brew install geos
&lt;a name="rest_code_1e564823810d477db8960ad5ca36426b-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; brew install proj
&lt;/pre&gt;&lt;p&gt;Moreover, you have created a &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; and installed the Python
dependencies (Cython, NumPy):&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_84235bb77dec45bf99dbd80ace7fd155-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkvirtualenv cartopy_venv
&lt;a name="rest_code_84235bb77dec45bf99dbd80ace7fd155-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;(cartopy_venv)$&lt;/span&gt; pip install cython
&lt;a name="rest_code_84235bb77dec45bf99dbd80ace7fd155-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;(cartopy_venv)$&lt;/span&gt; pip install numpy
&lt;/pre&gt;&lt;p&gt;Yet, when you finally go install Cartopy, you still encounter the following
seemingly inexplicable error:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_1095ae638bbc40fb8a45ac049d896461-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;(cartopy_venv)$&lt;/span&gt; pip install cartopy
&lt;a name="rest_code_1095ae638bbc40fb8a45ac049d896461-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;[...]&lt;/span&gt;
&lt;a name="rest_code_1095ae638bbc40fb8a45ac049d896461-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;clang -fno-strict-aliasing -fno-common -dynamic -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/Tk.framework/Versions/8.5/Headers -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/include -I./lib/cartopy -I-I/usr/local/Cellar/proj/4.9.2/include -I/usr/local/Cellar/geos/3.5.0/include -I/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c lib/cartopy/trace.cpp -o build/temp.macosx-10.11-x86_64-2.7/lib/cartopy/trace.o&lt;/span&gt;
&lt;a name="rest_code_1095ae638bbc40fb8a45ac049d896461-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;lib/cartopy/trace.cpp:249:10: fatal error: 'proj_api.h' file not found&lt;/span&gt;
&lt;a name="rest_code_1095ae638bbc40fb8a45ac049d896461-5"&gt;&lt;/a&gt;&lt;span class="gp"&gt;#&lt;/span&gt;include &lt;span class="s2"&gt;"proj_api.h"&lt;/span&gt;
&lt;a name="rest_code_1095ae638bbc40fb8a45ac049d896461-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;         ^&lt;/span&gt;
&lt;a name="rest_code_1095ae638bbc40fb8a45ac049d896461-7"&gt;&lt;/a&gt;&lt;span class="go"&gt;1 error generated.&lt;/span&gt;
&lt;a name="rest_code_1095ae638bbc40fb8a45ac049d896461-8"&gt;&lt;/a&gt;&lt;span class="go"&gt;error: command 'clang' failed with exit status 1&lt;/span&gt;
&lt;a name="rest_code_1095ae638bbc40fb8a45ac049d896461-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_1095ae638bbc40fb8a45ac049d896461-10"&gt;&lt;/a&gt;&lt;span class="go"&gt;----------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a href="http://louistiao.me/posts/installing-cartopy-on-mac-osx-1011/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cartopy</category><category>cython</category><category>geos</category><category>numpy</category><category>proj.4</category><guid>http://louistiao.me/posts/installing-cartopy-on-mac-osx-1011/</guid><pubDate>Thu, 31 Mar 2016 12:33:50 GMT</pubDate></item><item><title>Workflow for keeping Nikola config file updated</title><link>http://louistiao.me/posts/workflow-for-keeping-nikola-config-file-updated/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;For most, keeping Nikola up-to-date is usually a simple matter of running
something like:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_69a67dd921f846289a143e70bac79da5-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install --upgrade nikola
&lt;/pre&gt;&lt;p&gt;The same goes for its dependencies. However, one important thing that can get
overlooked is the Nikola configuration file for your site (the &lt;tt class="docutils literal"&gt;conf.py&lt;/tt&gt; file
sitting at the root of your Nikola site directory), which is almost always
updated with each major Nikola release.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/workflow-for-keeping-nikola-config-file-updated/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>meld</category><category>nikola</category><category>pip</category><category>python</category><guid>http://louistiao.me/posts/workflow-for-keeping-nikola-config-file-updated/</guid><pubDate>Tue, 29 Mar 2016 00:13:12 GMT</pubDate></item><item><title>Creating custom (Unix) fortunes</title><link>http://louistiao.me/posts/creating-custom-unix-fortunes/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;p&gt;Like others, I include &lt;tt class="docutils literal"&gt;fortune&lt;/tt&gt; in my &lt;tt class="docutils literal"&gt;.bash_profile&lt;/tt&gt; so that I am
greeted with a random, witty and thought-provoking epigram upon starting a
new shell session. Eventually, however, I found most of the epigrams to be
mostly trite and vapid, and quickly grew tired of them. Instead of tinkering
with the probabilities of sampling from the various datafiles available, I
decided to roll with my own epigram datafile.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/creating-custom-unix-fortunes/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>bash</category><category>cowsay</category><category>fortune</category><category>gtd</category><category>lolcat</category><category>unix</category><guid>http://louistiao.me/posts/creating-custom-unix-fortunes/</guid><pubDate>Wed, 17 Feb 2016 14:15:42 GMT</pubDate></item><item><title>Louis does dotfiles</title><link>http://louistiao.me/posts/louis-does-dotfiles/</link><dc:creator>Louis Tiao</dc:creator><description>&lt;div&gt;&lt;a class="reference external image-reference" href="http://louistiao.me/images/bash.png"&gt;&lt;img alt="../../images/bash.thumbnail.png" class="align-center" src="http://louistiao.me/images/bash.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;For a long time, I kept a small set of minimalistic dotfiles
(&lt;tt class="docutils literal"&gt;.bash_profile&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;.gitconfig&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt;). You probably couldn't find
anything in my &lt;tt class="docutils literal"&gt;.bash_profile&lt;/tt&gt; other than exports and path definitions that
were absolutely necessary to get tools such as &lt;a class="reference external" href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; and
&lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.org/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; to work. Furthermore, I was dismissive towards spending
any significant amount of time down the rabbit hole of perpetual dotfile
customization and optimization.&lt;/p&gt;
&lt;p&gt;Recently, while digging through my bookmarks saved from months ago, I came
across &lt;a class="reference external" href="https://dotfiles.github.io/"&gt;GitHub does dotfiles&lt;/a&gt;. Needless to say, after perusing through some
of the most popular dotfiles, dotfile utilities and tutorials, I came away
quite impressed. It disabused me of my previous misbelief that dotfile
calibration is ultimately a fruitless and ceaseless task, and I decided to
give it another shot.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://louistiao.me/posts/louis-does-dotfiles/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>dotfiles</category><category>git</category><category>github</category><category>gnu stow</category><category>osx</category><guid>http://louistiao.me/posts/louis-does-dotfiles/</guid><pubDate>Fri, 12 Feb 2016 11:59:46 GMT</pubDate></item></channel></rss>